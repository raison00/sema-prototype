<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:control="com.macys.marketing.sema.control.*" 
	xmlns:login="com.macys.marketing.sema.view.login.*"
	layout="absolute" 
	backgroundColor="#ffffff" width="100%" height="100%" backgroundAlpha="0"
	creationCompleteEffect="Fade" verticalScrollPolicy="auto" horizontalScrollPolicy="auto"
	paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
    initialize="initApp();" xmlns:ns1="*" viewSourceURL="srcview/index.html" verticalAlign="middle">    

	<control:ServiceController id="Controller"/> 

	<mx:Style source="style/style.css"/>
	<mx:Style source="style/skin/rdp_FxSkin.css"/>

	<mx:Script>
		<![CDATA[
		
			/*
		  	* List of imports
		  	*/	
		  	
			import mx.events.CloseEvent;
			import mx.rpc.soap.SOAPFault;
			import mx.utils.ObjectUtil;
			import mx.core.UIComponent;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import com.macys.marketing.sema.MatchType;
			import com.macys.marketing.sema.view.event.ReplicateEvent;
			import com.macys.marketing.sema.view.event.ViewEventDispatcher;
			import com.macys.marketing.sema.model.type.ReplicateToken;
			import com.macys.marketing.sema.event.tools.GenerateKeywordsEvent;
			import com.macys.marketing.sema.GetAdCopyStats;
			import com.macys.marketing.sema.GetAdGroupStats;
			import com.macys.marketing.sema.GetCampaignStats;
			import com.macys.marketing.sema.AdCopyService;
			import com.macys.marketing.sema.AdCopyType;
			import mx.controls.scrollClasses.ScrollBar;
			import mx.collections.XMLListCollection;
			import com.macys.marketing.sema.CampaignStats;
			import com.macys.marketing.sema.AdRunOption;
			import com.macys.marketing.sema.AdCopyStats;
			import com.macys.marketing.sema.AdCopyStatsPK;
            import com.macys.marketing.sema.AdKeyWordStatsPK;                   
            import com.macys.marketing.sema.AdGroupStatsPK;
            import com.macys.marketing.sema.CampaignStatsPK;
			import com.macys.marketing.sema.AdKeywordId;
			import com.macys.marketing.sema.SemaStatsType;
			import com.macys.marketing.sema.AdKeyWordStats;
			import com.macys.marketing.sema.GetAdKeyWordStats;
			import com.macys.marketing.sema.GetAdKeyWordStats_request;
			import com.macys.marketing.sema.AdGroupStats;
			import com.macys.marketing.sema.Statistics;
			import mx.controls.treeClasses.TreeListData;		   
			import com.macys.marketing.sema.PortfolioGroup;
			import com.macys.marketing.sema.Portfolio;
			import flash.net.sendToURL;
			import mx.charts.chartClasses.StackedSeries;
			import mx.events.StateChangeEvent;			
			import com.macys.marketing.sema.SemaStatusType;			
			import mx.utils.DisplayUtil;
			import com.macys.marketing.sema.AdCopy;
			import com.macys.marketing.sema.AdGroup;
			import com.macys.marketing.sema.AdKeyWord;
			import com.macys.marketing.sema.Campaign;				
			import mx.events.ItemClickEvent;			
			import mx.events.CollectionEvent;
			import mx.controls.ComboBase;			
			import mx.events.IndexChangedEvent;
		  	import mx.collections.ArrayCollection;
		  	import mx.rpc.events.ResultEvent;
		  	import mx.rpc.events.FaultEvent;
		  	import mx.utils.StringUtil;
		  	import mx.controls.Alert;
		  	import mx.utils.StringUtil;		  	
		  	import com.macys.marketing.sema.model.SEMAModelLocator;
		  	import com.adobe.serialization.json.JSON;
		  	import com.adobe.cairngorm.control.CairngormEventDispatcher;
		  	
		  	
		  	/*
		  	* List of local variables
		  	*/	
		  	
		  	private var selectedAdId: int = -1;
		  	private var selectedAdKeywordId: int = -1;
		  	private var selectedPortfolioIndexId : int = -1;
		  	private var noOfKeywords : int = 0;
		  	private var noOfCampaigns : int = 0;		  	
		  	private var currentGroupId : int = -1;		  	
		  	private var currentCampaignName : String = "";
		  	private var currentAdGroupDestURL : String = "";			  		 		  
		  	private var currentAdGroupId : int = -1;	
		  	private var currentKeywordId : int = -1;	
		  	private var currentAdCopyId : int = -1;
		  	private var currentAdCopyHeadLine : String = "";
		  	private var currentKeywordText : String = "";
		    private var currentPortfolioGroupId : int = -1;		    
		  	private var isAddingAdGroup : Boolean = false;
		  	private var isAddingAdCopy : Boolean = false;
		  	private var isAddingPortfolio : Boolean = false;
		  	private var isAddingCampaign : Boolean = false;
		  	private var isAddingKeyword : Boolean = false;		  
		  	private var isAddingPortfolioGroup : Boolean = false;
		  	private var isSavingFromPortfolioGroupSummaryTab : Boolean = false;		  	
		  	private var adCopiesCreated : Boolean =false;
		  	private var adGroupsCreated : Boolean =false;		  	
		  	[Bindable]
		  	private var currentPortfolioId : int = -1; 		  	
		  	private var currentPortfolioName : String = "";
		  	private var currentPortfolioGroupName : String = "";
		  	private var currentAdGroupName : String = "";		  	
		  	private var isFromCampaignNode : Boolean = false;
		  	private var isFromAdGroupNode : Boolean = false;		  	
		  	private var isFromPortfolioNode : Boolean = false;		  	
		  	private var campaignAccntId : Number = 0;		  	
		  	private var currentAdGroupMaxCPC : Number = 0;		  	
		  	private var campaignDailyBudget : Number = 0;		  
		  	private var currentCampaignObj : Campaign;
		  	private var lastCampaignNameExistsCheck : Date = new Date;
		  	private var adgroupDestURL:String = "";
		  	private var currentAdGroupModifiedDate : Date;//p139dak: maintain the ModifiedDate of the Ad Group. UI must pass it back to the service.
		  	private var currentPortfolioModifiedDate : Date;//p139dak: maintain the ModifiedDate of the Portfolio. UI must pass it back to the service.
		  	private var currentPortfolioGroupModifiedDate : Date;//p139dak: maintain the ModifiedDate of the Portfolio Group. UI must pass it back to the service.
		  	
		  	/*
		  	* List of bindable variables
		  	*/		 
		  	 	
		    [Bindable] private var dgCampaignData : ArrayCollection;
		  	[Bindable] private var campaignsList :ArrayCollection;
		  	[Bindable] private var campaignNamesList :ArrayCollection;
		  	[Bindable] private var dgKeywordsData : ArrayCollection;
		  	[Bindable] public var model:SEMAModelLocator;
		  	[Bindable] private var adList : ArrayCollection;	
		  	[Bindable] private var adCopyList : ArrayCollection;		  	
		  	[Bindable] private var adKeywordsList : ArrayCollection;			  		
		  	[Bindable] private var portfoliosList : ArrayCollection;
		  	[Bindable] private var portfoliosTempList : ArrayCollection;
		  	[Bindable] private var portfolioGroupsTempList : ArrayCollection;
		  	[Bindable] private var portfolioGroupNamesList : ArrayCollection;
		  	[Bindable] private var adGroupsList : ArrayCollection;
		  	//[Bindable] private var accountsList : ArrayCollection;
		    [Bindable] private var currentCampaignId : int = -1;			  	
		  	[Bindable] private var newNodeName : String;		  	
		  	[Bindable] private var wsAdGroupUrl : String;
		  	[Bindable] private var wsAdCopyServiceURL : String;
		  	[Bindable] private var wsKeyWordServiceURL : String;
		  	[Bindable] private var wsCampaignServiceURL : String;
		  	[Bindable] private var wsPortfolioServiceURL : String;
		  	[Bindable] private var wsPortfolioGroupServiceURL : String;
		  	[Bindable] private var wsCampaignExistsServiceURL : String;			
		  	[Bindable] private var wsAccountServiceURL : String;
		  	[Bindable] private var wsReplicateEntityServiceURL : String;		  			  		 
		  	[Bindable] private var wsAdCopyStatServiceURL : String;
		  	[Bindable] private var wsAdKeyWordStatServiceURL : String;
		  	[Bindable] private var wsCampaignStatServiceURL : String;
		  	[Bindable] private var wsAdGroupStatServiceURL : String;		  	
		  	[Bindable] private var currentlyEditing : String;
		  	
			
		   /**
			 * Application initialization and Web service header setting
			 * function.
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */			 
		  	private function initApp() : void 
		  	{			  		
		  		//Loads the Web service URL's from config.xml		
		  		this.urlRetrieveService.send();	
		  			  	
		  		//Web service header settings			  		
		  		wsAdGroup.addSimpleHeader("userName", "http://schemas.macys.com/definitions/ad/v1", "userName","Macys"); 
		  		wsAdService.addSimpleHeader("userName","http://schemas.macys.com/definitions/ad/v1","userName","Macys");		  		  
		  		wsAdKeywordService.addSimpleHeader("userName","http://schemas.macys.com/definitions/ad/v1","userName","Macys");
		  		wsCampaignService.addSimpleHeader("userName","http://schemas.macys.com/definitions/ad/v1","userName","Macys");
		  		wsPortfolioService.addSimpleHeader("userName","http://schemas.macys.com/definitions/ad/v1","userName","Macys");
		  		wsPortfolioGroupService.addSimpleHeader("userName","http://schemas.macys.com/definitions/ad/v1","userName","Macys");
		  		wsReplicateEntityService.addSimpleHeader("userName","http://schemas.macys.com/definitions/ad/v1","userName","Macys");

				model = SEMAModelLocator.getInstance();
		  		wsPortfolioGroupService.getAllPortfolioGroups.send(null);	  
		  		
		  		//view handlers (this one is only needed because the replicate buttons use cairngorm and 
		  		//the dnd version has its handler here (which we want to call)
		  		ViewEventDispatcher.addViewEventListener(ReplicateEvent.REPLICATE_EVENT, handleReplicateResults);	
			  	//loginScreen.loginBtn.addEventListener("click", enableAppView);
			  	  		  	    		  		
		  	}
		 	
		   /**
			 * Keyword Tool initialization function.
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
			private function initKeywordTool() : void
			{
				this.keywordTool.keywordGeneratorSubmitAction = onKeywordToolDoItClick;
			}
		  	
		  	/**
			 * Initialization of the AdGroup Summary Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function initTabView() : void 
		  	{		  	
		  		//Disables the Ad group summary controlls
		  		this.disableSummaryControls();
		  		
		  		//Set editable filed properties
		  		disableAdGroupSummaryComponents();
		  		
		  		//Event listners for AdGroup Summary tab
		  		this.tbAdGroup.btnSaveAdGroup.addEventListener(MouseEvent.CLICK, onClickSaveAdGroup);
		  		this.tbAdGroup.txtAdGroupName.addEventListener(Event.CHANGE, onAdGroupTextChange);
		  		this.tbAdGroup.txtAdGroupURL.addEventListener(Event.CHANGE, onAdGroupTextChange);
		  		this.tbAdGroup.cmbAdGroupStatus.addEventListener("close", onAdGroupTextChange);
		  		this.tbAdGroup.btnCancelAdGroup.addEventListener(MouseEvent.CLICK, onClickCancelAdGroup);
		  		this.tbAdGroup.btnEditAdGroup.addEventListener(MouseEvent.CLICK, onClickEditAddGroup);
		  		this.tbAdGroup.txtAdGroupMaxCPC.addEventListener(Event.CHANGE, onAdGroupTextChange);		  		
		  		adGroupsCreated = true;		  		
		  		this.tabMain.selectedIndex = 0;
		  		this.lblBreadCrumb.text = "SEMA";
		  		
		  		//Display appropriate control buttons
		  		showHideAdGroupSummaryButtons(true,false,false);
		  	}
		  	
		  	
			/**
			 * Initialization of the Campaign Summary Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function initCampaignTabView(): void 
		  	{
		  		//Event listners for Campaign Summary tab
				this.tbCampaignSummary.btnSaveCampaign.addEventListener(MouseEvent.CLICK, onClickSaveCampaign);
				this.tbCampaignSummary.txtCampaignName.addEventListener(Event.CHANGE, onCampaignTextChange);
				this.tbCampaignSummary.txtDailyBudget.addEventListener(Event.CHANGE, onCampaignTextChange);
				this.tbCampaignSummary.cmbCampaignStatus.addEventListener("close", onCampaignComboChange);		  		
		  		this.tbCampaignSummary.btnAddAdGruop.addEventListener(MouseEvent.CLICK,onAddAdGroupBtnClick);		  				  		
				this.tbCampaignSummary.radioOptimize.addEventListener(Event.CHANGE,onCampaignAdrunOptionChanged);		  		
				this.tbCampaignSummary.radioRotate.addEventListener(Event.CHANGE,onCampaignAdrunOptionChanged);		  								  				  	
				this.tbCampaignSummary.btnEditCampaignSummary.addEventListener(MouseEvent.CLICK,onEditCampaignBtnClick);
				this.tbCampaignSummary.btnCancelCampaignSummary.addEventListener(MouseEvent.CLICK,onCancelCampaignBtnClick);
				this.tbCampaignSummary.dtEffectiveDate.addEventListener(Event.CHANGE,onCampaignDateChanged);
				this.tbCampaignSummary.dtExpirationDate.addEventListener(Event.CHANGE,onCampaignDateChanged);
				this.tbCampaignSummary.dtCamSummPuDate.setStyle("backgroundDisabledColor", 0xffffff);
				this.tbCampaignSummary.dtEffectiveDate.setStyle("backgroundDisabledColor", 0xffffff);
				this.tbCampaignSummary.dtExpirationDate.setStyle("backgroundDisabledColor", 0xffffff);
				this.tbCampaignSummary.btnScheduleCampaign.addEventListener(MouseEvent.CLICK,onClickCampaignSummaryScheduleButton);
				this.tbCampaignSummary.btnCancelScheduleCampaign.addEventListener(MouseEvent.CLICK,onClickCampaignSummaryCancelButton);
				
				this.tbCampaignSummary.btnScheduleCampaign.visible = true;
				this.tbCampaignSummary.btnScheduleCampaign.enabled = false;
				this.tbCampaignSummary.btnCancelScheduleCampaign.visible = false;
				
				//Display appropriate control buttons
				showHideCampaignSummaryButtons(true,true,false,false);
				showCampaignSummaryScheduleComponents(false);
			}


		   /**
			 * Initialization of the Keywords & Placements Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
			private function initKeywordsTab() : void
			{
				try
				{    
					//Event listners for Keywords & Placements tab   
					this.tbKeywords.btnAddKW.addEventListener(MouseEvent.CLICK, onClickAddKeyword);
					this.tbKeywords.btnSaveKW.addEventListener(MouseEvent.CLICK, onClickSaveKeyword);				       			       
					this.tbKeywords.grdKeywords.addEventListener(ItemClickEvent.ITEM_CLICK, onKeywordsGridItemClick);
					this.tbKeywords.txtKWText.addEventListener("change", onKeywordTextChange);
					this.tbKeywords.txtKWDestURL.addEventListener("change", onKeywordTextChange);	
					this.tbKeywords.txtVEReq.addEventListener("change", onKeywordTextChange);	
					this.tbKeywords.chkKWNegativeMatch.addEventListener("change", onCheckBoxChange);		
					this.tbKeywords.cmbKWStatus.addEventListener("change", onKeywordStatusComboClose);					       				       			      
					this.tbKeywords.cmbKWMatchType.addEventListener("change", onKeywordMatchTypeComboClose);					
					this.tbKeywords.txtKWMaxCPC.addEventListener("change", onKeywordMaxCPCChange);		
					this.tbKeywords.btnEditKeywords.addEventListener(MouseEvent.CLICK,onKeywordEditButtonClick);
					this.tbKeywords.btnCancelKeywords.addEventListener(MouseEvent.CLICK,onKeywordCancelButtonClick);

					//Display appropriate control buttons
					this.clearKeyWordsControls();
					disableKeywordsComponents();
					showHideKeywordButtons(true,false,false,false);	
								       				       			      
				}
				catch(e:Error)
				{ 
					Alert.show(e.message);
				}
			}
			
			
			
		   /**
			 * Initialization of the Campaign Adgroups Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		    private function initCampaignAdgroups() : void
		    {
		    	//Event listners for Campaign Adgroups tab 
		    	this.tbCampaignAdGroup.dgAdGroup.addEventListener(ItemClickEvent.ITEM_CLICK, onDataGridAdGroupClick);
		    }
		    
		   
		   /**
			 * Initialization of the Portfolio Campaigns Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		    private function initPortfolioCampaigns() : void
		    {
		    	//Event listners for Portfolio Campaigns tab 
		    	this.tbPortfolioAdCampaign.dgPortfolioCampaign.addEventListener(ItemClickEvent.ITEM_CLICK, onDataGridCampaignClick);
		    }
		  	
		  	
		  	/**
			 * Initialization of the Ad Copy Tab
			 * 
			 * @author Zone24x7
			 */			  		  
			private function initTextAdsTab() : void 
			{
				try
				{				       
					this.tbAdCopies.btnAddAd.addEventListener(MouseEvent.CLICK, onClickAddAd);
					this.tbAdCopies.btnSaveAd.addEventListener(MouseEvent.CLICK, onClickSaveAd);					   
					this.tbAdCopies.txtHeadline.addEventListener("change", onTextChange);
					this.tbAdCopies.txtDescOne.addEventListener("change", onTextChange);
					this.tbAdCopies.txtDescTwo.addEventListener("change", onTextChange);
					this.tbAdCopies.txtDispUrl.addEventListener("change", onTextChange);
					this.tbAdCopies.txtDestUrl.addEventListener("change", onTextChange);				
					this.tbAdCopies.txtVendorPolicyExcemption.addEventListener("change", onTextChange);			
					this.tbAdCopies.cmbAdCopyStatus.addEventListener("change", onAdCopyStatusComboClose);				       	
					this.tbAdCopies.cmbAdCopyType.addEventListener("change", onAdCopyTypeComboClose);					   
					this.tbAdCopies.grdAdCopies.addEventListener(ItemClickEvent.ITEM_CLICK, onDataGridItemClick);
					this.tbAdCopies.btnEditAds.addEventListener(MouseEvent.CLICK, onClickAdCopyEditBtn);   
					this.tbAdCopies.btnCancelAds.addEventListener(MouseEvent.CLICK, onAdCopyCancelButtonClick);
					this.tbAdCopies.btnSchedule.addEventListener(MouseEvent.CLICK, onClickAdCopyScheduleButton);
					this.tbAdCopies.btnCancelSchedule.addEventListener(MouseEvent.CLICK, onClickAdCopyCancelScheduleButton); 
					this.tbAdCopies.dtEffectiveDate.addEventListener(Event.CHANGE,onAdCopyDateChanged);
				    this.tbAdCopies.dtExpirationDate.addEventListener(Event.CHANGE,onAdCopyDateChanged);   
					adCopiesCreated = true;
					this.tbAdCopies.grdAdCopies.enabled = true;
					this.tbAdCopies.btnSchedule.visible = false;
					this.tbAdCopies.btnCancelSchedule.visible = false; 
					  			       		      
					this.tbAdCopies.dtEffectiveDate.setStyle("backgroundDisabledColor", 0xffffff);
					this.tbAdCopies.dtExpirationDate.setStyle("backgroundDisabledColor", 0xffffff);
					   			       		      
					this.clearAdCopyFields();
					this.enableAdCopyFields(false);
					showHideAdCopyButtons(true,false,false,false);
					showAdCopyScheduleComponents(false);	
						       		      
				}
				catch(e:Error)
				{ 
					Alert.show(e.message);
				}
			}
		  			  			  	
		  	/**
			 * Function to hide scheduling components in the Ad Copy tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function showAdCopyScheduleComponents(visible : Boolean) : void {
		  		
		  		this.tbAdCopies.dtEffectiveDate.visible = visible;
		  		this.tbAdCopies.dtExpirationDate.visible = visible;
		  	}
		  	
			/**
			 * Function to show scheduling components in the Campaign Summary tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
			 private function showCampaignSummaryScheduleComponents(visible : Boolean):void {
			 	
			 	this.tbCampaignSummary.lblsd.visible = visible;
			 	this.tbCampaignSummary.dtEffectiveDate.visible = visible;
			 	this.tbCampaignSummary.lbled.visible = visible;
			 	this.tbCampaignSummary.dtExpirationDate.visible = visible;
			 }
			 
		  	/**
			 * Function to handle the schedule button event in the Ad Copy tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
			private function onClickAdCopyScheduleButton(event:Event) : void {
		  		if(this.tbAdCopies.cmbAdCopyStatus.selectedLabel == "Enabled")
			   	{
			   		scheduleAdCopy();
			   	}
			   	else
			   	{
			   		Alert.show("You need to Enable the Ad Copy status to schedule.\nDo you wish to Enable the status & continue?", "Ad Copy Schedule Confirmation", Alert.YES|Alert.NO, this, confirmAdCopyStatusHandler,null ,Alert.NO);
			   	}
		  	}	
		  	
		  	/**
		  	 * Function to hanlde the schedule button operations
		  	 * 
		  	 * @author zone24x7
		  	 */
		  	private function scheduleAdCopy() : void
		  	{
		  		this.tbAdCopies.btnSchedule.visible = false;
				this.tbAdCopies.btnCancelSchedule.visible = true;
				
				var tempDate : Date = new Date();
  				
  				this.tbAdCopies.dtEffectiveDate.selectedDate = new Date(tempDate.fullYear, tempDate.month, tempDate.date);
  				this.tbAdCopies.dtExpirationDate.selectedDate = new Date(tempDate.fullYear, tempDate.month+2, tempDate.date);
  				
  				//Setting the original values
  				this.tbAdCopies.dtOriginalAdCopyEffectiveDate = new Date(tempDate.fullYear, tempDate.month, tempDate.date);
  				this.tbAdCopies.dtOriginalAdCopyExpirationDate = new Date(tempDate.fullYear, tempDate.month+2, tempDate.date);
  				
  				showAdCopyScheduleComponents(true);
  				
  				 if(!this.isAddingAdCopy)
				  		{
				  			this.lblEditMSG.text = "You are editing AdCopy : " +this.currentAdCopyHeadLine;
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You are adding a new Ad Copy";
				  		}	
		  	}
		  	
		  	/**
			 * Function to handle the cancel schedule button event in the Ad Copy tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function onClickAdCopyCancelScheduleButton(event:Event) : void {
		  		
		  		this.tbAdCopies.btnSchedule.visible = true;
				this.tbAdCopies.btnCancelSchedule.visible = false;
				showAdCopyScheduleComponents(false);
		  	}	  	
		  	
		  
		  	/**
			 * Function to handle the schedule button event in the Campaign Summary tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function onClickCampaignSummaryScheduleButton(event:Event) : void {
		  		
		  		if(this.tbCampaignSummary.cmbCampaignStatus.selectedLabel == "Enabled")
			   	{
			   		scheduleCampaign(); 
			   	}
			   	else
			   	{
			   		Alert.show("You need to Enable the Campaign status to schedule.\nDo you wish to Enable the status & continue?", "Campaign Schedule Confirmation", Alert.YES|Alert.NO, this, confirmCampaignStatusHandler,null ,Alert.NO);
			   	}			
		  	}
		  			  	
		  	
		  	private function confirmCampaignStatusHandler(event:CloseEvent) : void {
				if (event.detail == Alert.YES) {
					this.tbCampaignSummary.cmbCampaignStatus.selectedIndex = 0;					
					scheduleCampaign();
				}
			}
			
			private function confirmAdCopyStatusHandler(event: CloseEvent) : void
			{
				if (event.detail == Alert.YES) {
					this.tbAdCopies.cmbAdCopyStatus.selectedIndex = 0;					
					scheduleAdCopy();
				}
			}
			
			private function scheduleCampaign() : void 
			{				
		  		this.tbCampaignSummary.btnScheduleCampaign.visible = false;
		  		this.tbCampaignSummary.btnCancelScheduleCampaign.visible = true;
		  		showCampaignSummaryScheduleComponents(true);
		  		this.tbCampaignSummary.dtEffectiveDate.enabled = true;
  				this.tbCampaignSummary.dtExpirationDate.enabled = true;
		  		
		  		var effectiveDate:Date = new Date();
		  		var expDate:Date = new Date();
		  		effectiveDate.setHours(00);
  				effectiveDate.setMilliseconds(000000);
  				effectiveDate.setMinutes(00);
  				effectiveDate.setSeconds(00);
  				
  				
  				expDate.setHours(00);
  				expDate.setMilliseconds(000000);
  				expDate.setMinutes(00);
  				expDate.setMonth(expDate.getMonth()+2);
  				expDate.setSeconds(00);
  				
  				this.tbCampaignSummary.dtEffectiveDate.selectedDate = effectiveDate;
  				this.tbCampaignSummary.dtExpirationDate.selectedDate = expDate; 
  				
  				//Setting the original values
		  		this.tbCampaignSummary.dtOriginalCampaignEffectiveDate = effectiveDate;
		  		this.tbCampaignSummary.dtOriginalCampaignExpirationDate = expDate;
		  			
				 if(!this.isAddingCampaign)
				  		{
				  			this.lblEditMSG.text = "You are editing Campaign : " + this.currentlyEditing;
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You are adding a new Campaign";
				  		}	
			 			 				 
				
		  	}
		  	
		  	/**
			 * Function to handle the schedule button event in the Campaign Summary tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function onClickCampaignSummaryCancelButton(event:Event) : void {
		  		
		  		this.tbCampaignSummary.btnScheduleCampaign.visible = true;
		  		this.tbCampaignSummary.btnCancelScheduleCampaign.visible = false;
		  		showCampaignSummaryScheduleComponents(false);
				
		  	}
		  			  	
		  	/**
			 * Initialization of the Portfolio Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function initPortfolioTab():void{
		  		try{
		  			
		  			this.tbPortfolioSummary.btnSavePortfolio.addEventListener(MouseEvent.CLICK,onClickSavePortfolio);
		  			this.tbPortfolioSummary.btnAddPortfolioSummaryAddCampaign.addEventListener(MouseEvent.CLICK,onClickAddCampaign);
		  			this.tbPortfolioSummary.txtPortfolioName.addEventListener("change",onPortfolioSummaryValuesChange);
		  			this.tbPortfolioSummary.txtDescription.addEventListener("change",onPortfolioSummaryValuesChange);
		  			this.tbPortfolioSummary.cmbCampaignStatus.addEventListener("change",onPortfolioSummaryValuesChange);
		  			this.tbPortfolioSummary.chkAddPofileGroup.addEventListener("change",onPortfolioSummaryValuesChange);
		  			this.tbPortfolioSummary.btnEditPortfolioSummary.addEventListener(MouseEvent.CLICK,onPortfolioEditButtonClick);
		  			this.tbPortfolioSummary.btnCancelPortfolioSummary.addEventListener(MouseEvent.CLICK,onPortfolioCancelButtonClick);
		  			showHidePortfolioButtons(true,true,false,false);
		  		}catch(e:Error){ 
			      	Alert.show(e.message);
			    }
		  	}
		  	
		  	
		  	
		  	/**
			 * Initialization of the Portfolio Group Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function initPortfolioGroupTab():void{
		  		try{
		  			this.tbPortfolioGroupSummary.btnSavePortfolioGroup.addEventListener(MouseEvent.CLICK,onClickSavePortfolioGroup);		  			
		  			this.tbPortfolioGroupSummary.btnAddPortfolio.addEventListener(MouseEvent.CLICK,onClickAddPortfolio);
		  			this.tbPortfolioGroupSummary.btnEditPortfolioGroup.addEventListener(MouseEvent.CLICK,onClickEditPortfolioGroup);		  			
		  			this.tbPortfolioGroupSummary.btnCancelPortfolioGroup.addEventListener(MouseEvent.CLICK,onClickCancelPortfolioGroup);
		  			this.tbPortfolioGroupSummary.txtPortfolioGroupName.addEventListener("change",onPortfolioGroupSummaryValuesChange);
		  			this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.addEventListener("change",onPortfolioGroupSummaryValuesChange);
		  			this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.addEventListener("change",onPortfolioGroupSummaryValuesChange);		  			
		  		}catch(e:Error){ 
			      	Alert.show(e.message);
			    }
		  	}

		  	/**
			 * Initialization of the SEMA(Root) Tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		  	private function initSEMATab():void{		  
		  		try{		  	
		  			this.tbSEMA.btnAddPortfolioGroup.addEventListener(MouseEvent.CLICK,onClickAddPortfolioGroup);
		  		}
		  		catch(e:Error){
		  			Alert.show(e.message);
		  		}
		  	}
		  	
		  	private function onKeywordToolButtonClick() : void
		  	{
		  		this.keywordTool.visible = true;
		  		this.tabSEMA.visible = false;
		  		this.tabPortfolioGroup.visible = false;
		  		this.tabPortfolio.visible = false;
				this.tabCampaign.visible = false;
				this.tabMain.visible = false;
				this.lblBreadCrumb.text = "Keyword Select";
		  	}
		  	
		  	/**
			 * Function to handle date change in Campaign
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onCampaignDateChanged(event : Event):void{			 				 	
			 	this.tbCampaignSummary.btnSaveCampaign.enabled = true;		
			 	if(!this.isAddingCampaign)
					{
				  		this.lblEditMSG.text = "You are editing Campaign : " + this.currentlyEditing;
				  	}
				  	else
				  	{
				  		this.lblEditMSG.text = "You are adding a new Campaign";
				  	}	
			 			 				 
			 }
			 		  	
			 		  	/**
			 * Function to handle date change in Ad Copy
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onAdCopyDateChanged(event : Event):void{			 				 	
			 			
			 	 if(!this.isAddingAdCopy)
				 	{
				  		this.lblEditMSG.text = "You are editing AdCopy : " + this.currentAdCopyHeadLine;
				  	}
				  	else
				  	{
				  		this.lblEditMSG.text = "You are adding a new Ad Copy";
				  	}	
			 			 				 
			 }
		  	
			/**
			 * Function to handle add run option change
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onCampaignAdrunOptionChanged(event : Event):void{			 				 	
			 	this.tbCampaignSummary.btnSaveCampaign.enabled = true;				 				 
			 	if(!this.isAddingCampaign)
					{
						this.lblEditMSG.text = "You are editing Campaign : " + this.currentlyEditing;
				  	}
				  	else
				  	{
				  		this.lblEditMSG.text = "You are adding a new Campaign";
				  	}	
			 			 				 
			 }
			 		  		
		  		

		  	
		  	private function onKeywordToolDoItClick() : void
		  	{
		  		CairngormEventDispatcher.getInstance().dispatchEvent(new GenerateKeywordsEvent(this.keywordTool.txtKeyword.text,this.keywordTool.cbType.selectedItem.toString() as String,this.keywordTool.negativeCheck.selected,this.keywordTool.synonymCheck.selected));		
			}
		  	
		  	
		  	
		  	
		  	/**
			 * Function to handle edit button click on Portfolio groups tab
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onClickEditPortfolioGroup(event : Event):void{
			 		  		
		  		try{
		  			this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = true;
			  		this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = true;
			  		this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.enabled = true;
			  		
			  		showHidePortfolioGroupButtons(false,false,true,true);
			  		
			  		this.isAddingPortfolioGroup = false;	
			  		this.tbPortfolioGroupSummary.pnlPortfolioGroupSummary.title = "Edit Portfolio Group";
			  		
			  		this.lblEditMSG.text = "You are going to edit Portfolio Group: "+this.currentPortfolioGroupName ;
			  		this.tbPortfolioGroup.enabled = false;
		  		}catch(e:Error){	
		  			Alert.show(e.message, "onClickEditPortfolioGroup");
		  		}
			 }
		  	
		  	
		  	
		  	
		  	/**
			 * Function to handle cancel button click on Portfolio groups tab
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onClickCancelPortfolioGroup(event : Event):void{
			 		  		
		  		try{
		  			if(isAddingPortfolioGroup){
		  				//Adding a Portfolio group		  			
		  				this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = false;
			  			this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = false;
			  			this.tbPortfolioGroupSummary.txtPortfolioGroupName.text = "";
			  			this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.text = "";
			  			this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.selectedIndex = 0;
			  			this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.enabled = false;
			  			this.showSEMATab();
			  			
			  			this.lblEditMSG.text = "You have cancelled adding a new Portfolio Group ";
		  			}else{
		  				//In Edit mode, so reset the fields
		  				if(this.customTreeView.treeList.selectedItem != null && this.customTreeView.treeList.selectedItem.@type != null){
		   	 				wsPortfolioGroupService.getPortfolioGroupList.send(this.currentPortfolioGroupId,"macys");		   	 			
		   	 			} 						
		   	 			this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = false;
			  			this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = false;
			  			this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.enabled = false;
			  			this.lblEditMSG.text = "You have cancelled editing the Portfolio Group: "+this.currentPortfolioGroupName ;
			  			
			  			this.tbPortfolioGroup.enabled = true;					
		  			}
		  			
		  			this.tbPortfolioGroupSummary.txtPortfolioGroupName.enabled = true;
			  		this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.enabled = true;
			  			
			  		showHidePortfolioGroupButtons(true,true,false,false);
			  		
			  		this.currentPortfolioGroupId = 0;
			  		this.currentPortfolioGroupModifiedDate=null;//p139dak: maintain modified date to be passed back to the service layer
			  		this.isAddingPortfolioGroup = false;	 
			  		
			  		this.tbPortfolioGroupSummary.pnlPortfolioGroupSummary.title = "Summary"; 
			  		
		  		}catch(e:Error){	
		  			Alert.show(e.message, "onClickCancelPortfolioGroup");
		  		}
			 }

		  	/**
			 * Function to handle value changes in the Portfolio groups tab
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onPortfolioGroupValueChange(event : Event):void{
			 	
			 	var target : TextInput;
		  		target = TextInput(event.target);
		  			  		
		  		try{
		  			if(this.selectedPortfolioIndexId != -1){		  			
				  		var portfolioGroupObj :  PortfolioGroup = PortfolioGroup(this.tbSEMA.portfolioGroupsListData.getItemAt(this.selectedPortfolioIndexId));				  						  		
				  		this.currentPortfolioGroupId = portfolioGroupObj.Id;
				  		this.currentPortfolioGroupModifiedDate=portfolioGroupObj.ModifiedDate;//p139dak: maintain modified date to be passed back to the service layer
				  	   		
				  		switch(target.id){
				  			case "txtPortfolioGroupDescription":	
				  				portfolioGroupObj.Description = target.text;				  						  					  			
				  				break;
				  				
				  			case "txtPortfolioName":
				  				portfolioGroupObj.Name = target.text;
				  				break;				  						  								  	
				  		}				  		
				  		
				  		this.tbSEMA.btnAddPortfolioGroup.enabled = false;
		  	
				  		this.tbSEMA.portfolioGroupsListData.setItemAt(portfolioGroupObj, this.selectedPortfolioIndexId); 					  						  						  					  	
				  	}
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}
			 }
			 
			 /**
			 * Function to handle value changes in the Portfolio summary tab
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onPortfolioSummaryValuesChange(event : Event):void
			 {
			 	this.tbPortfolioSummary.btnSavePortfolio.enabled = true;
			 	if(!this.isAddingPortfolio)
					{
						this.lblEditMSG.text = "You are editing Portfolio : " + this.currentPortfolioName;
				  	}
				  	else
				  	{
				  		this.lblEditMSG.text = "You are adding a new Portfolio";
				  	}
			 
			 }
			 
			 
			 /**
			 * Function to handle value changes in the Portfolio summary tab
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			 private function onPortfolioGroupSummaryValuesChange(event : Event):void
			 {
			 	this.tbPortfolioGroupSummary.btnSavePortfolioGroup.enabled = true;
			 	this.isSavingFromPortfolioGroupSummaryTab = true;
			 	if(!this.isAddingPortfolioGroup)
				{
					this.lblEditMSG.text = "You are editing Portfolio Group : " + this.currentPortfolioGroupName;
				}
				else
				{
					this.lblEditMSG.text = "You are adding a new Portfolio Group";
				}
			 	 
			 }
			 
			 /**
			 * Function to handle Portfolio group Add button click
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function onClickAddPortfolioGroup(event:Event) : void {
		  		
				this.tabPortfolioGroup.visible = true;
				this.tabPortfolioGroup.selectedIndex = 0;
		  		this.tabSEMA.visible = false;
		  		this.keywordTool.visible = false;
		  		this.tbPortfolioGroupSummary.txtPortfolioGroupName.setFocus();
		  		
				this.tbPortfolioGroupSummary.txtPortfolioGroupName.text = "";
		  		this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.text = "";
		  		
		  		this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = true;
		  		this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = true;
		  		
		  		this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.enabled = true;
		  		this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.selectedIndex = 1;
		  		
		  		showHidePortfolioGroupButtons(false,false,true,true);
		  	
		  		
		  		this.tbPortfolioGroup.enabled = false;
		  		
		  		this.currentPortfolioGroupId = 0;
		  		this.currentPortfolioGroupModifiedDate=new Date();//p139dak: pass current timestamp to the service layer for new objects
		  		this.isAddingPortfolioGroup = true;		  		
		  	
		  		this.tbPortfolioGroupSummary.pnlPortfolioGroupSummary.title = "Create New Portfolio Group";
		  		
		  		
		  		this.lblEditMSG.text = "You are adding a new Portfolio Group ";
		  	}
		  	
		  	
		  	/**
			 * Function to show/hide Portfolio group buttons
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function showHidePortfolioGroupButtons(add:Boolean,edit:Boolean,save:Boolean,cancel:Boolean):void{
		  		
		  		this.tbPortfolioGroupSummary.btnAddPortfolio.visible = add;
		  		this.tbPortfolioGroupSummary.btnEditPortfolioGroup.visible = edit;
		  		this.tbPortfolioGroupSummary.btnSavePortfolioGroup.visible = save;
		  		this.tbPortfolioGroupSummary.btnCancelPortfolioGroup.visible = cancel;
		  	}
		  	
		  	/**
			 * Function to show/hide Portfolio buttons
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function showHidePortfolioButtons(add:Boolean,edit:Boolean,save:Boolean,cancel:Boolean):void{
		  		
		  			this.tbPortfolioSummary.btnAddPortfolioSummaryAddCampaign.visible = add;
		  			this.tbPortfolioSummary.btnEditPortfolioSummary.visible = edit;
		  			this.tbPortfolioSummary.btnSavePortfolio.visible = save;
		  			this.tbPortfolioSummary.btnCancelPortfolioSummary.visible = cancel;	
		  	}
		  		/**
			 * Function to show/hide campaign summary buttons
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function showHideCampaignSummaryButtons(add:Boolean,edit:Boolean,save:Boolean,cancel:Boolean):void{
		  		
		  			this.tbCampaignSummary.btnAddAdGruop.visible = add;
		  			this.tbCampaignSummary.btnEditCampaignSummary.visible = edit;
		  			this.tbCampaignSummary.btnSaveCampaign.visible = save;
		  			this.tbCampaignSummary.btnCancelCampaignSummary.visible = cancel;
		  	}
		  	
		  	
		  	/**
		  	 * Function to show/hide AdGroup summary buttons
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function showHideAdGroupSummaryButtons(edit:Boolean,save:Boolean,cancel:Boolean):void{
		  		
		  		this.tbAdGroup.btnEditAdGroup.visible = edit;
		  		this.tbAdGroup.btnSaveAdGroup.visible = save;
		  		this.tbAdGroup.btnCancelAdGroup.visible = cancel;
		  	}
		  	
		  	/**
		  	 * Function to show/hide Keyword buttons
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function showHideKeywordButtons(add:Boolean,edit:Boolean,save:Boolean,cancel:Boolean):void{
		  		
		  		this.tbKeywords.btnAddKW.visible = add;
		  		this.tbKeywords.btnEditKeywords.visible = edit;
		  		this.tbKeywords.btnSaveKW.visible = save;
		  		this.tbKeywords.btnCancelKeywords.visible = cancel;
		  		
		  	}
		  	
		  	/**
		  	 * Function to show/hide AdCopy buttons
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function showHideAdCopyButtons(add:Boolean,edit:Boolean,save:Boolean,cancel:Boolean):void{
		  		
		  		this.tbAdCopies.btnAddAd.visible = add;
		  		this.tbAdCopies.btnEditAds.visible = edit;
		  		this.tbAdCopies.btnSaveAd.visible = save;
		  		this.tbAdCopies.btnCancelAds.visible = cancel;
		  		
		  	}
		  	/**
			 * Function to handle Portfolio group save button click
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function onClickSavePortfolioGroup(event:Event) : void {
		  	try{	
			   		var portfolioGroup : PortfolioGroup = new PortfolioGroup();
			   		var statusTypeObj : SemaStatusType = new SemaStatusType();
			        
				    portfolioGroup.Name = tbPortfolioGroupSummary.txtPortfolioGroupName.text;
				    portfolioGroup.Description = tbPortfolioGroupSummary.txtPortfolioGroupDescription.text;
				    statusTypeObj._SemaStatusType = tbPortfolioGroupSummary.cmbPortfolioGroupStatus.selectedLabel;
				    portfolioGroup.Status = statusTypeObj;
				    this.currentPortfolioGroupName = tbPortfolioGroupSummary.txtPortfolioGroupName.text;
  										   	
			   		if(!isAddingPortfolioGroup)
	  				{	
	  					//Modifying a Portfolio group
	  					
	  					portfolioGroup.Id =  this.currentPortfolioGroupId;
	  					portfolioGroup.ModifiedDate = this.currentPortfolioGroupModifiedDate;//p139dak: pass modified date for existing objects back to the service layer
	  					if((tbPortfolioGroupSummary.txtPortfolioGroupName.text != null)&&(StringUtil.trim(tbPortfolioGroupSummary.txtPortfolioGroupName.text)!="")
	  							&&(tbPortfolioGroupSummary.txtPortfolioGroupDescription.text!=null)&&(StringUtil.trim(tbPortfolioGroupSummary.txtPortfolioGroupDescription.text)!=""))
	  					{     						
			         		
			         		wsPortfolioGroupService.putPortfolioGroups.send(portfolioGroup, "Macys");				            
			            		            
				        }
				        else
				        {
					  		if(StringUtil.trim(this.tbPortfolioGroupSummary.txtPortfolioGroupName.text) == "")
					  		{
	  							this.tbPortfolioGroupSummary.txtPortfolioGroupName.setFocus();               
					  		}
	  							else if(StringUtil.trim(this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.text) == "")
					  		{
	  							this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.setFocus();          
					  		}
					  		Alert.show("Please complete all fields!");
	  					}

				        	this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = true;
						  	this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = true;	
						  	this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.enabled = true;
						
							  						  											    
	  				}	  				
	  				else
	  				{
	  					//Adding a Portfolio Group
	  					portfolioGroup.ModifiedDate = new Date();//p139dak: for new objects, pass current timestamp to the service layer
	  					   		
					   
				    	if((tbPortfolioGroupSummary.txtPortfolioGroupName.text != null)&&(StringUtil.trim(tbPortfolioGroupSummary.txtPortfolioGroupName.text)!="")
	  							&&(tbPortfolioGroupSummary.txtPortfolioGroupDescription.text!=null)&&(StringUtil.trim(tbPortfolioGroupSummary.txtPortfolioGroupDescription.text)!="")){
     						
			         		wsPortfolioGroupService.putPortfolioGroups.send(portfolioGroup, "Macys");      
				        }
				        else
				        {
				        	Alert.show("Please complete all fields!");
				        	this.tbPortfolioGroup.enabled = false;	
				        }			        					       					        					     		  											  			
			  		}		  					  	
			  	}
			  	catch(e2:Error){		
			   		Alert.show(e2.message);
			   	}		  		
		  	}
		  	
		  	/**
			 * Function to handle Portfolio Add button click
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function onClickAddPortfolio(event:Event) : void {
		  		this.tabMain.visible = false;
		  		this.tabCampaign.visible = false;
				this.tabPortfolio.visible = true;
				this.keywordTool.visible = false;
		  		this.tabPortfolioGroup.visible = false;
		  		this.ClearPortfolioDetails();
		  		this.currentPortfolioId = -1;
		  		this.currentPortfolioModifiedDate=new Date();//p139dak: for new Portfolio, services expect current timestamp
		  		this.isAddingPortfolio = true;
		  		this.tbPortfolioAdCampaign.enabled =false;
		  		this.tbPortfolioSummary.pnlPortfolioSummary.title = "Create New Portfolio";
		  		this.tbPortfolioSummary.cmbCampaignStatus.selectedIndex = 1;
				this.tabPortfolio.selectedIndex = 0;
		  		enablePortfolioSummaryComponents(true);
		  		this.tbPortfolioSummary.txtPortfolioName.setFocus();
		  		
	  			showHidePortfolioButtons(false,false,true,true);
		  		this.lblEditMSG.text = "You are adding a new Portfolio ";	
		  		
		  	}
		  	
		  	private function ClearPortfolioDetails() : void {
		  		
		  		this.tbPortfolioSummary.txtDescription.text = "";
		  		this.tbPortfolioSummary.txtPortfolioName.text = "";
		  		this.tbPortfolioSummary.cmbCampaignStatus.selectedIndex = 0;
		  		this.tbPortfolioSummary.btnSavePortfolio.enabled = true;
		  		
		  	}
		  	
		  	/**
			 * Function to handle Portfolio Save button click
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function onClickSavePortfolio(event:Event) : void {
		  		
		  		var portfolioObj : Portfolio = new Portfolio();
		   		
		   		var statusObj : SemaStatusType= new SemaStatusType();
               			    
		   		if(!isAddingPortfolio)
		   		{
		   			portfolioObj.Id = new Number(this.currentPortfolioId);
		   			portfolioObj.PortfolioGroupId = this.currentPortfolioGroupId;		   			
		   			portfolioObj.ModifiedDate = this.currentPortfolioModifiedDate;//p139dak: maintain modified date timestamp per contract with the services	   			
		   		}
		   		else
		   		{
		   			portfolioObj.PortfolioGroupId = this.currentPortfolioGroupId;
		   			portfolioObj.ModifiedDate = new Date();//p139dak: services expect current timestamp for the new object
		   		}
		   		
		   		portfolioObj.Name = this.tbPortfolioSummary.txtPortfolioName.text;
		   		
		   		this.currentPortfolioName = this.tbPortfolioSummary.txtPortfolioName.text;
		   		portfolioObj.Description = this.tbPortfolioSummary.txtDescription.text;
		   		
		   		statusObj._SemaStatusType = this.tbPortfolioSummary.cmbCampaignStatus.selectedLabel;
			    portfolioObj.Status = statusObj;
			    
		   		this.tbPortfolioSummary.enabled = true;	
		   		
		   		if(
		   			(this.tbPortfolioSummary.txtPortfolioName.text != null) && (StringUtil.trim(this.tbPortfolioSummary.txtPortfolioName.text) != "") &&
		   		   	(this.tbPortfolioSummary.txtDescription.text != null) && (StringUtil.trim(this.tbPortfolioSummary.txtDescription.text) != "") 	
		   		  )
		   		  {
		   		  	wsPortfolioService.putPortfolios.send(portfolioObj);		   		
		   		  }
		   		  else
		   		  {
		   		  	if(StringUtil.trim(this.tbPortfolioSummary.txtPortfolioName.text) == "")
		   		  	{
			         	this.tbPortfolioSummary.txtPortfolioName.setFocus();			           	
		   		  	}
		   		  	else if(StringUtil.trim(this.tbPortfolioSummary.txtDescription.text) == "")
		   		  	{
			         	this.tbPortfolioSummary.txtDescription.setFocus();			           	
		   		  	}
			        
		   		  	Alert.show("Please complete all text fields!");
		   		  }	
		   		  
		   		  showHidePortfolioButtons(false,false,true,true);   		  
		  	}
			
			/**
			 * Function to handle portfolio summary edit button event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onPortfolioEditButtonClick(event:Event) :void {
		   	
		  		enablePortfolioSummaryComponents(true);
		  		this.tbPortfolioSummary.pnlPortfolioSummary.title = "Edit Porfolio";
		  		// samapath 02.04.2008
		  		this.lblEditMSG.text = "You are going to edit Portfolio: " + this.currentPortfolioName;
	  			showHidePortfolioButtons(false,false,true,true);
	  			this.tbPortfolioAdCampaign.enabled = false;
		   }
		   
		   /**
			 * Function to handle AdGroup summary edit button event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onClickEditAddGroup(event:Event) :void {
		  		this.tbAdGroup.lblPublishedDate.visible = true;
		  		enableAdGroupSummaryComponents();
		  		this.tbAdGroup.pnlAdGroupSummary.title = "Edit Ad Group";
                                this.lblEditMSG.text = "You are going to edit Ad Group : "+ currentAdGroupName; 
		  	
		  		showHideAdGroupSummaryButtons(false,true,true);
		  		
		  		this.tbAdCopies.enabled = false;
		  		this.tbKeywords.enabled = false;
		  		
		   }
			
	       /**
			 * Function to handle campaign summary edit button event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onEditCampaignBtnClick(event:Event) :void {
		   	
		   		enableCampaignSummaryComponents(true);
		   		this.tbCampaignSummary.pnlCampaignSummary.title = "Edit Campaign";		   		
		   		this.lblEditMSG.text = "You are going to edit Campaign : "+ currentCampaignName; 
		   		
		  	
		  		this.tbCampaignSummary.cmbAccount.enabled = false;
		  		showHideCampaignSummaryButtons(false,false,true,true);
		  		
		  		this.tbCampaignAdGroup.enabled = false;
		  		
		  		this.tbCampaignSummary.btnScheduleCampaign.enabled = true;
		   }

		   
		   /**
			 * Function to disable AdGroup summary tab components
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
			private function disableAdGroupSummaryComponents():void {
				this.tbAdGroup.txtAdGroupName.editable = false;
				this.tbAdGroup.cmbAdGroupStatus.enabled = false;
				this.tbAdGroup.txtAdGroupMaxCPC.editable = false;
				this.tbAdGroup.txtAdGroupURL.editable = false;
			}
			
			/**
			 * Function to enable AdGroup summary tab components
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
			private function enableAdGroupSummaryComponents():void {
				this.tbAdGroup.txtAdGroupName.editable = true;
				this.tbAdGroup.cmbAdGroupStatus.enabled = true;
				this.tbAdGroup.txtAdGroupMaxCPC.editable = true;
				this.tbAdGroup.txtAdGroupURL.editable = true;
			}
			
				/**
			 * Function to handle AdGroup summary cancel button event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
			private function onClickCancelAdGroup(event:Event) :void {
				
		   	
		   	try{
		  			if(isAddingAdGroup){
		  				//Adding		  			
		  				disableAdGroupSummaryComponents();
		  				this.tbAdGroup.txtAdGroupName.text = "";
				  		this.tbAdGroup.txtAdGroupMaxCPC.text = "";
				  		this.tbAdGroup.txtAdGroupURL.text = "";
				  		this.showCampaignSummaryTab();
				  		
		  			}else{
		  				//In Edit mode, so reset the fields
		  				if(this.customTreeView.treeList.selectedItem != null && this.customTreeView.treeList.selectedItem.@type != null){
		   	 				wsAdGroup.getAdGroupList.send(this.currentAdGroupId);
		   	 			} 	
		  			}
		  			this.lblEditMSG.text = "You have cancelled the operation";	
		  			disableAdGroupSummaryComponents();
			  		this.tbAdGroup.pnlAdGroupSummary.title = "Summary";
			  		this.currentAdGroupId = 0;
			  		this.currentAdGroupModifiedDate=null;//p139dak: maintaining the ModifiedDate of the ad group
			  		this.isAddingAdGroup = false;	 
		   
			  		showHideAdGroupSummaryButtons(true,false,false); 
			  		
			  		this.tbAdCopies.enabled = true;
			  		this.tbKeywords.enabled = true;
		   
		  		}catch(e:Error){	
		  			Alert.show(e.message, "onClickCancelCampaign");
		  		}
		 
			}

	/**
			 * Function to handle portfolio cancel button event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onPortfolioCancelButtonClick(event:Event) :void {
		   	
		   	try{
		  			if(isAddingPortfolio){
		  				//Adding		  			
		  				enablePortfolioSummaryComponents(false);
		  				this.tbPortfolioSummary.txtPortfolioName.text = "";
				  		this.tbPortfolioSummary.txtDescription.text = "";
				  		this.showPortfolioGroupTab();
				  		
				  		this.lblEditMSG.text = "You have cancelled adding a portfolio" ;
		  			}else{
		  				//In Edit mode, so reset the fields
		  				if(this.customTreeView.treeList.selectedItem != null && this.customTreeView.treeList.selectedItem.@type != null){
		   	 				wsPortfolioService.getPortfolioList.send(this.currentPortfolioId,"macys");	   	 			
		   	 			} 						
		   	 		showHidePortfolioButtons(true,true,false,false);	
		   	 		
		   	 		this.lblEditMSG.text = "You have cancelled editing portfolio: " + this.currentPortfolioName;
		   	 		this.tbPortfolioAdCampaign.enabled = true;					
		  			}
		  			
		  			enablePortfolioSummaryComponents(false);
			  		this.tbPortfolioSummary.pnlPortfolioSummary.title = "Summary";
			  		
		   		
			  		this.currentPortfolioId = 0;
			  		this.currentPortfolioModifiedDate = null;//p139dak: maintain modified date
		   		this.isAddingPortfolio = false;
		  		
		  		}catch(e:Error){	
		  			Alert.show(e.message, "onClickCancelPortfolio");
		  		}
		  	}

	       /**
			 * Function to handle portfolio cancel button event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onCancelCampaignBtnClick(event:Event) :void {
		   	
		   	try{
		  			if(isAddingCampaign){
		  				//Adding		  			
		  				
		  				this.tbCampaignSummary.txtCampaignName.text = "";
				  		this.tbCampaignSummary.txtDailyBudget.text = "";
				  		//this.showPortfolioTab();
				  		
				  		
				  		showPortfolioTab();
				  		
				  		this.lblEditMSG.text = "You have cancelled adding a campaign" ;
				  		
		  				this.tbCampaignSummary.btnScheduleCampaign.enabled = true;	
				  		this.isAddingCampaign = false;
		  			}else{
		  				//In Edit mode, so reset the fields
		  				if(this.customTreeView.treeList.selectedItem != null && this.customTreeView.treeList.selectedItem.@type != null){		   	 				
		   	 				wsCampaignService.getCampaignList.send(this.currentCampaignId,"macys");
		   	 			} 
		   	 			this.lblEditMSG.text = "You have cancelled editing campaign: " + customTreeView.treeList.selectedItem.@label;						
		   	 			
				  		showHideCampaignSummaryButtons(true,true,false,false);
				  		showCampaignSummaryTab();				
				  		
		  				this.tbCampaignSummary.btnScheduleCampaign.enabled = false;			
		  			}
		  			
		  			this.tbCampaignSummary.lblCampaignExist.visible = false;
			  		this.tbCampaignSummary.pnlCampaignSummary.title = "Summary";
			  		this.tbCampaignSummary.btnSaveCampaign.enabled = true;
			  		this.tbCampaignSummary.btnAddAdGruop.enabled = true;
			  		disableCampaignSummaryComponents();
			  		//this.currentCampaignId = 0;
			  		//this.isAddingCampaign = false;	 
		   
		   			
		  			this.tbCampaignAdGroup.enabled = true;
		  			
		  			this.tbCampaignSummary.btnCancelScheduleCampaign.visible = false;
		  			this.tbCampaignSummary.dtEffectiveDate.enabled = false;
  					this.tbCampaignSummary.dtExpirationDate.enabled = false;
		  		}catch(e:Error){	
		  			Alert.show(e.message, "onClickCancelCampaign");
		  		}
		   }
		   
		   /**
			 * Function to switch Main tab and Campaign tab
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		   private function onAddAdGroupBtnClick(event:Event) : void {	
		   		this.tabCampaign.visible = false;
		   		this.tabMain.visible = true;
		   		this.keywordTool.visible = false;
		   		//this.tabMain.tabIndex = 0;
		   		this.tabMain.selectedIndex = 0;	
			   	this.lblEditMSG.text = "You are Adding an Ad Group"; 	   		
		   		this.tbAdGroup.txtAdGroupName.text = "";			   					   	
		   		this.tbAdGroup.txtAdGroupMaxCPC.text = "";
		   		this.tbAdGroup.txtAdGroupURL.text = "http://";
		   		this.tbAdGroup.cmbAdGroupStatus.selectedIndex = 1; 
		   		var selectedNodeType: String = customTreeView.treeList.selectedItem.@type;
		   		this.tbAdGroup.pnlAdGroupSummary.title = "Create New AdGroup";
		   		enableAdGroupSummaryComponents();
		   		this.tbAdGroup.lblPublishedDate.visible = true;
		   		//this.tbAdGroup.dtAdGroupPuDate.enabled = true;
		   		//this.tbAdGroup.dtAdGroupPuDate.selectedDate = sendUTCDate(new Date());
		   		//this.tbAdGroup.dtAdGroupPuDate.text = "";
		   		this.tbAdGroup.lblPublishedDate.visible = false;
		   		this.tbAdGroup.lblPubDate.visible = false;
		   		this.tbAdGroup.txtAdGroupName.setFocus();	
                var selectedIndex : int = 0;
                var slectedLabel : String = "";
                
                /* if(this.tbAdGroup.campaignsListData != null){
		   		for(var i :int = 0 ; i < this.tbAdGroup.campaignsListData.length; i++){
		   			
		   			if(this.tbAdGroup.campaignsListData[i].label == selectedNode.@label){
		   				slectedLabel = this.tbAdGroup.campaignsListData[i].label;
		   				break;
		   			}
		   			selectedIndex++;
		   		}
                }
		   			
		   		this.tbAdGroup.cmbAdGroupCampaignName.selectedIndex = selectedIndex; */		   				   		 		   				   		
		   		this.tbAdGroup.lblCampaignName.text = this.currentCampaignName;//this.selectedNode.@label;//slectedLabel;
                this.isAddingAdGroup = true;
		   		this.currentAdGroupId = 0;
		   		this.currentAdGroupModifiedDate=new Date();//p139dak: UI expects current timestamp for new items
		   		enableSummaryControls();
		   		//this.tbAdGroup.dtAdGroupPuDate.selectedDate = null;	
		   			   		
		   		this.tbAdGroup.lblVendorStatusRes.visible = false;
		   		this.tbAdGroup.lblVendorStatus.visible = false;
		   		showHideAdGroupSummaryButtons(false,true,true);	   		
		   		
		   		this.tbKeywords.enabled =false;
    			this.tbAdCopies.enabled  =false;
       				
		   }

		  
		   
		   /**
			 * Function to add a new campaign.
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		   private function onClickAddCampaign(event : Event) : void {		   	
		   	 try {
		   	 		this.keywordTool.visible = false;
		   	 		this.tabCampaign.visible = true;
		   	 		this.tabMain.visible = false;
		   	 		this.tabPortfolio.visible = false;
		   	 		this.tabPortfolioGroup.visible = false;
		   	 		
		   	 		this.tbCampaignSummary.cmbAccount.visible = true;
		   	 		this.tbCampaignSummary.lblAccount.visible = false;
		   			this.tbCampaignSummary.lblCampaignExist.visible = false;
		   					   		
		   			this.tbCampaignSummary.txtCampaignName.setFocus();
		   			
					//this.tbCampaignSummary.dtEffectiveDate.selectedDate = null;		   		
			   		//this.tbCampaignSummary.dtExpDate.selectedDate = null;	
			   		this.clearAndEnableCampaignTextFields();
			   		
			   		this.lblEditMSG.text = "You are adding a new Campaign";// + this.currentlyEditing;
			   		this.currentCampaignId = 0;
			   		
			   		this.isAddingCampaign = true;		
			   		this.tbCampaignAdGroup.enabled = false;																				   	 					   	 		  	
			   		this.tbCampaignSummary.pnlCampaignSummary.title = "Create New Campaign";																			   	 					   	 		  	
			   		this.tabCampaign.selectedIndex = 0;
			   		this.tbCampaignSummary.cmbCampaignStatus.selectedIndex = 1;
			   		
			   		this.tbCampaignSummary.cmbAccount.selectedIndex =0;
			   		this.tbCampaignSummary.radioOptimize.selected = true;
			   		
			   		this.tbCampaignSummary.cmbAccount.enabled = true;
			   		this.tbCampaignSummary.btnScheduleCampaign.enabled = true;  
			   		showHideCampaignSummaryButtons(false,false,true,true);
			   		wsAccountService.getAllAccounts();
			   		
			   		enableCampaignSummaryComponents(true);			   																	   	 					   	 		  
			   	    hideCampaignSummaryComponents();
			   	    
			   	   	this.currentCampaignObj = new Campaign();			   	   	
		   	 		this.currentCampaignObj.EffectiveDate = new Date(2000,01,01,01,01,00,000000);
	   				this.currentCampaignObj.ExpirationDate = new Date(2030,01,01,01,01,00,000000); 
	   				this.currentCampaignObj.ModifiedDate=new Date();//p139dak: UI should pass current timestamp to the services for new campaigns. 
			   	   
		  			this.tbCampaignSummary.btnScheduleCampaign.enabled = true;
		  			this.tbCampaignSummary.btnScheduleCampaign.visible = true;	
		  			this.tbCampaignSummary.btnCancelScheduleCampaign.visible = false;
		  			showCampaignSummaryScheduleComponents(false);
		  			this.tbCampaignSummary.dtEffectiveDate.enabled = true;
  					this.tbCampaignSummary.dtExpirationDate.enabled = true;
			   	}catch(e:Error){	
			   		Alert.show(e.message, "onClickAddCampaign");	
			   	}		   			   	
		   }
		   
		   		  
		   
		   /**
			 * Function to enable save button in the Campaign Summary 
			 * tab when editing an exisiting campain data. This method also kicks
			 * off an asynch call to check whether the entered campaign name
			 * already exists.
			 * 
			 * @param  event
			 */	
		   private function onCampaignTextChange(event : Event): void {		   	
		   	 if ( this.tbCampaignSummary.btnSaveCampaign.enabled.toString() == "false"){
		   	 	 this.tbCampaignSummary.btnSaveCampaign.enabled = true;			   	 	 
		   	 }	
		   	 if(!this.isAddingCampaign)
			 {
			 	this.lblEditMSG.text = "You are editing Campaign : " + this.currentlyEditing;
			 }
			 else
			 {
			 	this.lblEditMSG.text = "You are adding a new Campaign";
			 }	
		   	  
		   	 var currentDate : Date = new Date();
		   	 var currentMillis : Number = currentDate.valueOf();
		   	 var lastCheckMillis:Number = lastCampaignNameExistsCheck.valueOf();
		   	 var diff : Number = currentMillis -  lastCheckMillis;
		   	 // only submit again if at least 500 ms passed
		   	 if(diff > 500) {
       	      	lastCampaignNameExistsCheck = currentDate;
       	      	campaignExistsService.send();
       		 }
		   }
		   
		 
		   
		   /**
			 * Function to enable save & schedule buttons in the Campaign Summary 
			 * tab when editing campain status
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		   private function onCampaignComboChange(event : Event): void {		   	
		   	 if ( this.tbCampaignSummary.btnSaveCampaign.enabled.toString() == "false"){
		   	 	 this.tbCampaignSummary.btnSaveCampaign.enabled = true;			   	 	 
		   	 }	
		   	 if(!this.isAddingCampaign)
			 {
			 	this.lblEditMSG.text = "You are editing Campaign : " + this.currentlyEditing;
			 }
			 else
			 {
			 	this.lblEditMSG.text = "You are adding a new Campaign";
			 }	
		   	 
		   	 
		   	 if(this.currentCampaignObj != null)
		   	 {
		   	 	
		   	 	if(!(this.currentCampaignObj.EffectiveDate.toLocaleString() == "Sat Jan 1 2000 01:01:00 AM" && 
		   	 	this.currentCampaignObj.ExpirationDate.toLocaleString() == "Tue Jan 1 2030 01:01:00 AM"))
			   	 {
			   	 	
			   	 	if(this.tbCampaignSummary.cmbCampaignStatus.selectedLabel == "Paused" || this.tbCampaignSummary.cmbCampaignStatus.selectedLabel == "Deleted")
				   	{		   	 	
				   	 	this.tbCampaignSummary.btnScheduleCampaign.visible = true;	
				   	 	this.tbCampaignSummary.dtEffectiveDate.visible = false;	
				   	 	this.tbCampaignSummary.dtExpirationDate.visible = false;
				   	 	this.tbCampaignSummary.lblsd.visible = false;	
				   	 	this.tbCampaignSummary.lbled.visible = false;
				   	 	
				   	 }
				   	 /* else
				   	 {
				   	 	this.tbCampaignSummary.btnScheduleCampaign.visible = false;				   	 	
				   	 	this.tbCampaignSummary.dtEffectiveDate.visible = true;	
				   	 	this.tbCampaignSummary.dtExpirationDate.visible = true;
				   	 	this.tbCampaignSummary.lblsd.visible = true;	
				   	 	this.tbCampaignSummary.lbled.visible = true;
				   	 }	 */
				   	 
				   	 this.tbCampaignSummary.btnCancelScheduleCampaign.visible = false;	
			   	 }		   	  
		   	 }		   	  
		   }
		   
		 
		   
		   /**
			 * Seperate function to clear all the text boxes
			 * and enable all of them to add a new campaign in the campaign summary tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		   private function clearAndEnableCampaignTextFields() : void{
		   			
		   			// Clearing the values of text boxes if they are populated.
			   		this.tbCampaignSummary.txtCampaignName.text = "";		  		
			  		this.tbCampaignSummary.txtDailyBudget.text = "";
			  		this.tbCampaignSummary.lblActualStatusCMP.text = "";
			  		this.tbCampaignSummary.lblClicksCMP.text = "";
			  		this.tbCampaignSummary.lblImpressionsCMP.text = "";
			  		this.tbCampaignSummary.lblClickThruRateCMP.text = "";
			  		this.tbCampaignSummary.lblAverageCPCCMP.text = "";
			  		this.tbCampaignSummary.lblTextCPM.text = "";			  		
			  		this.tbCampaignSummary.lblCostCMP.text = "";				  			  	
		   }
		   
	      
	      
	       /**
			 * Function to disable Campaign summary components
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
		   private function disableCampaignSummary() : void {
		   	
				this.tbCampaignSummary.cmbCampaignStatus.enabled=false;
				this.tbCampaignSummary.txtCampaignName.editable=false;
				this.tbCampaignSummary.txtDailyBudget.editable=false;
				this.tbCampaignSummary.dtEffectiveDate.enabled=false;
				this.tbCampaignSummary.dtExpirationDate.enabled=false;
			}

			
			
		   /**
			 * Function to enable rquired fields in the campaign summary tab 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */	
			private function enableCampaignSummaryFields() : void {
				this.tbCampaignSummary.btnAddAdGruop.enabled=true;
				//this.tbCampaignSummary.btnAddCampaign.enabled=true;
				//this.tbCampaignSummary.btnSaveCampaign.enabled=false; 
				this.tbCampaignSummary.txtCampaignName.enabled=true;
				this.tbCampaignSummary.dtEffectiveDate.enabled=true;
				this.tbCampaignSummary.dtExpirationDate.enabled=true;
				this.tbCampaignSummary.txtDailyBudget.enabled=true;
				this.tbCampaignSummary.cmbCampaignStatus.enabled=true;			
				
				
			}
			
			
			
		   /**
			 * Function to track Ad Group Text Change event 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			private function onAdGroupTextChange(event : Event): void{				
				
				if(!isAddingAdGroup)
				{
					 this.tbAdGroup.btnSaveAdGroup.enabled = true;
                     this.lblEditMSG.text = "You are editing AdGroup: "+ currentAdGroupName;
				}
				else
				{
					this.lblEditMSG.text = "You are adding a new AdGroup";
				}
			
			}
			
			
		    
		   /**
			 * Function to Save a new campaign or a modified campaign.
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		   private function onClickSaveCampaign(event : Event) : void {		   	
		   		var campaignObj : Campaign = new Campaign();		   			   		
		   		var statusTypeObj : SemaStatusType = new SemaStatusType();
		        var statusObj : SemaStatusType= new SemaStatusType();
			    var adRunObj : AdRunOption = new AdRunOption();
                 
                this.tbCampaignSummary.btnCancelScheduleCampaign.visible = false
			   	this.tbCampaignSummary.btnEditCampaignSummary.enabled = true;
			    this.tbCampaignSummary.btnAddAdGruop.enabled = true;
			    
		   		if(!this.isAddingCampaign) 
		   		{
		   			campaignObj.Id = this.currentCampaignId; 
		   			campaignObj.PortfolioId = this.currentPortfolioId;
		   			campaignObj.AccountId = this.campaignAccntId;
                    campaignObj.ModifiedDate = this.currentCampaignObj.ModifiedDate;//p139dak: manitain modified date; must be passed unchanged to the services		   			 
		   		}
		   		else 
		   		{
		   			campaignObj.PortfolioId = this.currentPortfolioId;
		   			campaignObj.AccountId = new Number( this.tbCampaignSummary.cmbAccount.selectedItem.Id);		   		 
		   			campaignObj.ModifiedDate = new Date();//p139dak: new campaign must have current timestamp when passed to services
		   		}
		   		

				if(this.tbCampaignSummary.btnScheduleCampaign.visible)
	   			{
	   				//Reset schedule dates
	   				campaignObj.EffectiveDate = new Date(2000,00,01,01,01,00,000000);
	   				campaignObj.ExpirationDate = new Date(2030,00,01,01,01,00,000000);
	   			}
	   			else
	   			{
	   				//set schedule dates
	   				if(this.tbCampaignSummary.dtEffectiveDate.selectedDate != null)
			   		{
			   			campaignObj.EffectiveDate = this.tbCampaignSummary.dtEffectiveDate.selectedDate;
			   		}
			   						   		
			   		if(this.tbCampaignSummary.dtExpirationDate.selectedDate != null)
			   		{
			   			campaignObj.ExpirationDate = this.tbCampaignSummary.dtExpirationDate.selectedDate;
			   		}		   				
	   			}	

		   		if(this.tbCampaignSummary.radioRotate.selected)
		   		{
		   			adRunObj.adRunOption = "Rotate";
		   		}else {
		   			adRunObj.adRunOption = "Optimize";
		   		}
		   		
		   		campaignObj.AdRunOption = adRunObj;
		   		
		   		//campaignObj.AdVendorId = new Number(1801);
		   		statusObj._SemaStatusType = this.tbCampaignSummary.cmbCampaignStatus.selectedLabel;
			    campaignObj.Status = statusObj;
				campaignObj.AdVendorStatus = "Active";
		   		campaignObj.CampaignName = this.tbCampaignSummary.txtCampaignName.text;
		   		this.currentCampaignName = this.tbCampaignSummary.txtCampaignName.text;
		   		
		   		campaignObj.DailyBudget = new Number(parseFloat(this.tbCampaignSummary.txtDailyBudget.text));
		   		
		   			   		
		   		if((StringUtil.trim(this.tbCampaignSummary.txtCampaignName.text) != "") 
		   			&& (StringUtil.trim(this.tbCampaignSummary.txtDailyBudget.text) != ""))
		   		{
			   			if(ObjectUtil.dateCompare(campaignObj.EffectiveDate, campaignObj.ExpirationDate)<=0)
			   			{			   						   			
		   					wsCampaignService.putCampaigns.send(campaignObj,"macys");
			   			}
			   			else
			   			{			   				
			   				this.tbCampaignSummary.dtEffectiveDate.setFocus();     
				   			Alert.show("Please set an expiry date greater than the effective date");
			   			}
		   		}
		   		else
		   		{
			   		if(StringUtil.trim(this.tbCampaignSummary.txtCampaignName.text) == "")
	         		{
	             		this.tbCampaignSummary.txtCampaignName.setFocus();               
	         		}
	         		else if(StringUtil.trim(this.tbCampaignSummary.txtDailyBudget.text) == "")
	         		{
	             		this.tbCampaignSummary.txtDailyBudget.setFocus();          
			   		}
			   		Alert.show("Please fill all required fields!");
		   		}
		   		
		    }	
		    
		    
		    private function onDataGridAdGroupClick(event : Event) : void
		    {
		    	var adGroupObj : Statistics = new Statistics();
		    	this.tbCampaignAdGroup.replicate.btnCopyGrps1.enabled =true;
		    }	
		    
		    private function onDataGridCampaignClick(event : Event) : void
		    {
		    	/* var campaignObj : Statistics = new Statistics();
		    	
		    	if(this.tbPortfolioAdCampaign.dgPortfolioCampaign.selectedItem != null)
		    	{
		    		campaignObj = Statistics(this.tbPortfolioAdCampaign.dgPortfolioCampaign.selectedItem);
		    		wsCampaignStatService.getCampaignStats.send(campaignObj.Id);
		    	} */
		    	
		    }   		  
		  	
		  	
		  	
		   /**
			 * Function to track the clicked item on the Ad copy grid
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			private function onDataGridItemClick(event : Event) : void
			{
				var adCopyObj : Statistics;
				this.enableAdCopyFields(false);

				try
				{
					if(this.tbAdCopies.grdAdCopies.selectedItem != null)
					{
						//TODO reference below should be event driven or less fragile
						tbAdCopies.copyEnabled = true;

						adCopyObj = new Statistics(); //AdCopy();
						adCopyObj = Statistics(this.tbAdCopies.grdAdCopies.selectedItem); //AdCopy(this.tbAdCopies.grdAdCopies.selectedItem);

						//this.tbAdCopies.btnSaveAd.enabled = true;

						this.selectedAdId = this.tbAdCopies.grdAdCopies.selectedIndex;
						this.currentAdCopyId = adCopyObj.Id;
						this.currentAdCopyHeadLine = adCopyObj.Headline;

						if(!isAddingAdCopy)
						{
							this.tbAdCopies.txtHeadline.text = adCopyObj.Headline;
							this.tbAdCopies.txtDescOne.text = adCopyObj.Description1;
							this.tbAdCopies.txtDescTwo.text = adCopyObj.Description2;
							this.tbAdCopies.txtDispUrl.text = adCopyObj.DisplayUrl;
							this.tbAdCopies.txtDestUrl.text = adCopyObj.DestinationUrl;
						}

						var defaultEffectiveDate : Date = new Date(2000,0,1,1,1);
						var defaultExpirationDate : Date = new Date(2030,0,1,1,1);

						if (adCopyObj.EffectiveDate != null && adCopyObj.ExpirationDate != null && 
								(adCopyObj.EffectiveDate.getTime() > defaultEffectiveDate.getTime())
								&&(adCopyObj.ExpirationDate.getTime() < defaultExpirationDate.getTime()))
						{
							this.tbAdCopies.dtEffectiveDate.selectedDate = adCopyObj.EffectiveDate;
							this.tbAdCopies.dtExpirationDate.selectedDate = adCopyObj.ExpirationDate;
							
							//Setting the original values
  							this.tbAdCopies.dtOriginalAdCopyEffectiveDate = adCopyObj.EffectiveDate;
  							this.tbAdCopies.dtOriginalAdCopyExpirationDate = adCopyObj.ExpirationDate;
  							
							this.tbAdCopies.btnSchedule.visible = false;
							this.tbAdCopies.btnSchedule.enabled = false;
							showAdCopyScheduleComponents(true);
						}
						else
						{
		  					this.tbAdCopies.dtEffectiveDate.selectedDate = new Date(defaultEffectiveDate.getTime());
			  				this.tbAdCopies.dtExpirationDate.selectedDate = new Date(defaultExpirationDate.getTime());
			  				
			  				//Setting the original values
  							this.tbAdCopies.dtOriginalAdCopyEffectiveDate = new Date(defaultEffectiveDate.getTime());
  							this.tbAdCopies.dtOriginalAdCopyExpirationDate = new Date(defaultExpirationDate.getTime());
  				
			  				this.tbAdCopies.btnSchedule.visible = true;
							this.tbAdCopies.btnSchedule.enabled = false;
							showAdCopyScheduleComponents(false);
		  				}
		  				
						switch(adCopyObj.Status._SemaStatusType.toUpperCase()) 
		  				{
		  					case "ENABLED" : 
		  							this.tbAdCopies.cmbAdCopyStatus.selectedIndex = 0;
		  							break;
		  					case "PAUSED" :
		  							this.tbAdCopies.cmbAdCopyStatus.selectedIndex = 1;
		  							break;
		  					case "DELETED" :
		  							this.tbAdCopies.cmbAdCopyStatus.selectedIndex = 2;
		  							break;
		  				}
		  				
           				if(adCopyObj.VendorPolicyExemptionRequest != null)
           				{
           				
           					this.tbAdCopies.txtVendorPolicyExcemption.text = adCopyObj.VendorPolicyExemptionRequest;          					
           				}
           				else
           				{
           					this.tbAdCopies.txtVendorPolicyExcemption.text = ""; 
           				}
           				
           				if(adCopyObj.AdVendorStatus != null)
           				{           					
	           				this.tbAdCopies.lblVendorStatus.text = adCopyObj.AdVendorStatus;
           				} 
           				else
           				{
           					this.tbAdCopies.lblVendorStatus.text = "UNKNOWN";
           				}
           				
           				if ( adCopyObj.Disapproved ) 
           				{	           					
	           				this.tbAdCopies.txtDisapproved.text = "[DISAPPROVED]";
	           			} 
	           			else 
	           			{
	           				this.tbAdCopies.txtDisapproved.text = "";
	           			}
           				
           				if(adCopyObj.Type != null)
           				{
           					if(adCopyObj.Type._AdCopyType.toUpperCase() == "PROMO")
           					{
								this.tbAdCopies.cmbAdCopyType.selectedIndex = 0;
	           				}
	           				else if(adCopyObj.Type._AdCopyType.toUpperCase() == "DIDO")
	           				{
	           					this.tbAdCopies.cmbAdCopyType.selectedIndex = 1;
	           				}
	           				else if(adCopyObj.Type._AdCopyType.toUpperCase() == "UNKNOWN")
	           				{
	           					this.tbAdCopies.cmbAdCopyType.selectedIndex = 2;
	           				}
           				}          				
		  			}		  			
		  			
		  			if(this.tbAdCopies.grdAdCopies.enabled)
		  			{
			  			enableAdCopyFields(false);	
			  			showHideAdCopyButtons(true,true,false,false);  
		  				this.tbAdCopies.replicate.btnCopyGrps1.enabled  = true;
		  			
		  			}
		  			else{
			  			enableAdCopyFields(true);	
			  			showHideAdCopyButtons(false,false,true,true);
		  				this.tbAdCopies.replicate.btnCopyGrps1.enabled  = false;	
			  			
		  			}
		  			
		  			
		  			//this.lblEditMSG.text ="";
		  			this.tbAdCopies.btnCancelSchedule.visible = false;	
		  			
		  		}catch(e:Error){
		  			Alert.show(e.message);
		  		}		  		  		
		  	}	
		  
		  
		  
		  	 /**
			 * Function to track the clicked item on the portfolio groups grid
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function onPortfolioGroupDataGridClick(event :Event) : void
		  	{	
		     	
		  		/* var editPortfolioGroupObj : PortfolioGroup;
		  		try
		  		{
		  			if(this.tbSEMA.grdPortfolioList.selectedItem != null)
		  			{
		  				editPortfolioGroupObj = new PortfolioGroup();
			  			editPortfolioGroupObj = PortfolioGroup(this.tbSEMA.grdPortfolioList.selectedItem);
			  			this.selectedPortfolioIndexId = this.tbSEMA.grdPortfolioList.selectedIndex;
		  							    		
		  				this.enablePortfolioGroupTabInputs();
			  			this.isAddingPortfolioGroup = false;
			  						  			
			  			this.currentPortfolioGroupId = editPortfolioGroupObj.Id;
			  			
			  			this.tbSEMA.txtPortfolioGroupDescription.text = editPortfolioGroupObj.Description;
			  			this.tbSEMA.txtPortfolioName.text = editPortfolioGroupObj.Name;
			  						  			
			  			if(editPortfolioGroupObj.Status._SemaStatusType != null){
			  				if(editPortfolioGroupObj.Status._SemaStatusType.toUpperCase() == "ENABLED"){
			  					
			  					
			  					this.tbSEMA.cmbPortfolioStatus.selectedIndex = 0;	  					
			  				}
			  				else if(editPortfolioGroupObj.Status._SemaStatusType.toUpperCase() == "PAUSED"){
			  				
			  					this.tbSEMA.cmbPortfolioStatus.selectedIndex = 1;			  					
			  				}
			  				else if(editPortfolioGroupObj.Status._SemaStatusType.toUpperCase() == "DELETED"){
			  					this.tbSEMA.cmbPortfolioStatus.selectedIndex = 2;			  					
			  				}			  				 	
		  				}
		  			}	   			 
		  		}
		  		catch(e:Error)
		  		{
		  			Alert.show(e.message);
		  		}*/	
		  	}
		  	
		  	
		   /**
			 * Function to track the clicked item on the Keywords grid
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
		  	private function onKeywordsGridItemClick(event : Event) : void
		  	{	
		  		var adKeywordObj : Statistics;
		  		
		  		try{
		  			if(this.tbKeywords.grdKeywords.selectedItem != null){		 
		  					
		  			
		  				//disableKeywordsComponents();				  				
		  				adKeywordObj = new Statistics();
		  				adKeywordObj = Statistics(this.tbKeywords.grdKeywords.selectedItem);
		  				
		  				
		  				this.selectedAdKeywordId = this.tbKeywords.grdKeywords.selectedIndex;
		  				this.currentKeywordId = adKeywordObj.Id;		  				
		  				this.currentKeywordText	= adKeywordObj.KeywordText;  
		  								
		  				if(adKeywordObj.Id != 0){
		  					this.tbKeywords.txtKWText.enabled = false;
		  				}		  				
		  				
		  				this.tbKeywords.txtKWText.text = adKeywordObj.KeywordText;
		  				this.tbKeywords.txtKWMaxCPC.text = adKeywordObj.MaxCPC.toString();
		  				this.tbKeywords.txtKWMinCPC.text = adKeywordObj.MinCPC.toString();
		  				this.tbKeywords.txtKWDestURL.text = adKeywordObj.DestinationURL;
		  				
		  						  				
		  				if ( adKeywordObj.VendorPolicyExemptionRequest != null ) {
		  					this.tbKeywords.txtVEReq.text = adKeywordObj.VendorPolicyExemptionRequest;	
		  				} else {
		  					this.tbKeywords.txtVEReq.text = "";
		  				}
		  				
		  				
		  				if(adKeywordObj.Status._SemaStatusType != null){
			  				if(adKeywordObj.Status._SemaStatusType.toUpperCase() == "ENABLED"){	
			  					this.tbKeywords.cmbKWStatus.selectedIndex = 0;	  					
			  				}
			  				else if(adKeywordObj.Status._SemaStatusType.toUpperCase() == "PAUSED"){
			  					this.tbKeywords.cmbKWStatus.selectedIndex = 1;			  					
			  				}
			  				else if(adKeywordObj.Status._SemaStatusType.toUpperCase() == "DELETED"){
			  					this.tbKeywords.cmbKWStatus.selectedIndex = 2;			  					
			  				}			  				 	
		  				} 
		  						  				
		  				if(adKeywordObj.MatchType._MatchType.toUpperCase() == "BROAD"){	
		  					this.tbKeywords.cmbKWMatchType.selectedIndex = 0;	  					
		  				}
		  				else if(adKeywordObj.MatchType._MatchType.toUpperCase() == "PHRASE"){
		  					this.tbKeywords.cmbKWMatchType.selectedIndex = 1;			  					
		  				}
		  				else if(adKeywordObj.MatchType._MatchType.toUpperCase() == "EXACT"){
		  					this.tbKeywords.cmbKWMatchType.selectedIndex = 2;			  					
		  				} 		  						  				
		  				
						this.tbKeywords.lblPublishedDate.visible = true;
						this.tbKeywords.lblPubDt.visible = true;
						//this.lblEditMSG.text ="";
					
						if(adKeywordObj.PublishedDate.getMonth() != 00 && adKeywordObj.PublishedDate.getDate() != 01 && adKeywordObj.PublishedDate.getFullYear() != 1901){
							
		  					this.tbKeywords.lblPublishedDate.text = (adKeywordObj.PublishedDate.getMonth()+1).toString() + " / " + adKeywordObj.PublishedDate.getDate().toString()+ " / " + adKeywordObj.PublishedDate.getFullYear().toString();
						} else {
		  					
		  					this.tbKeywords.lblPublishedDate.text = "Not Published";
		  				}
		  				//this.tbKeywords.dtKeywordPuDate.enabled = false;
		  				
		  				this.tbKeywords.txtKeyVendorStatus.text = adKeywordObj.AdVendorStatus; 
		  				
		  				//Negative
		  				this.tbKeywords.chkKWNegativeMatch.selected = adKeywordObj.NegativeMatch;
		  				
		  				 					  			
		  			}		  					  			
		  				  					  		
		  			
		  			if(this.tbKeywords.grdKeywords.enabled)
		  			{					 					  	
				      this.tbKeywords.replicate.btnCopyGrps1.enabled  = true;
				      showHideKeywordButtons(true,true,false,false);		
				   }
				   else{
				   		showHideKeywordButtons(false,false,true,true);
				   }			
		  		
		  		}catch(e:Error){
		  			Alert.show(e.message, "onKeywordsGridItemClick");
		  		}		  		  		
		  	}
		  	
		  	
		  	
		   /**
			 * Function to track the ad copy tab's text change
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onTextChange(event : Event) : void {		  		
		  		var target : TextInput;
		  		target = TextInput(event.target);
		  		this.tbAdCopies.btnSaveAd.enabled = true;
		  				  		
		  		try{
		  			if(this.selectedAdId != -1){		  			
				  		var adCopyObj : Statistics = Statistics(this.adCopyList.getItemAt(this.selectedAdId));				  						  		
				  		this.currentAdCopyId = adCopyObj.Id;
				  						
				  		switch(target.id){
				  			case "txtHeadline":	
				  				adCopyObj.Headline = target.text;
				  				break;
				  				
				  			case "txtDescOne":
				  				adCopyObj.Description1 = target.text;
				  				break;
				  			
				  			case "txtDescTwo":
				  				adCopyObj.Description2 = target.text;
				  				break;
				  				
				  			case "txtDispUrl":
				  				adCopyObj.DisplayUrl = target.text;
				  				break;
				  				
				  			case "txtDestUrl":
				  				adCopyObj.DestinationUrl = target.text;
				  				break;
				  		}
				  		
				  		if(!this.isAddingAdCopy)
				  		{
				  			this.lblEditMSG.text = "You are editing AdCopy : " +this.currentAdCopyHeadLine;
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You are adding a new Ad Copy";
				  		}
				  		
				  		this.adCopyList.setItemAt(adCopyObj, this.selectedAdId);
				  		this.tbAdCopies.adsListData = this.adCopyList;				  					  					  						  						  					  	
				  	}
		  		
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}	  				  		
		  	}	
		  	
		  	  /**
			 * Function to handle adcopy edit button click events
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onClickAdCopyEditBtn(event:Event):void{
		  		enableAdCopyFields(true);
		  		this.tbAdCopies.cmbAdCopyStatus.enabled = true;
				 showHideAdCopyButtons(false,false,true,true);
			     this.lblEditMSG.text = "You are going to edit AdCopy : " +this.currentAdCopyHeadLine;
				 this.tbAdCopies.btnSchedule.enabled = true;
				 this.tbAdCopies.grdAdCopies.enabled = false;
				 this.tbAdCopies.replicate.btnCopyGrps1.enabled  = false;
		  	}
		  	
		  	private function onCheckBoxChange(event : Event) : void {
		  		var target : Boolean;
		  		target = Boolean(event.target);
		  		this.tbKeywords.btnSaveKW.enabled = true;
		  		
		  		try{
		  			if(this.selectedAdKeywordId != -1){	
		  				var keyWordObj : Statistics = Statistics(this.adKeywordsList.getItemAt(this.selectedAdKeywordId));	
		  				keyWordObj.NegativeMatch = target;
		  				this.adKeywordsList.setItemAt(keyWordObj, this.selectedAdKeywordId);
				        this.tbKeywords.keywordsListData = this.adKeywordsList; 
		  			}
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}
		  		
		  	}
		  	
		  	
		   /**
			 * Function to track the keywords tab's text change
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onKeywordTextChange(event : Event) : void {		  		
		  		var target : TextInput;
		  		target = TextInput(event.target);
		  		this.tbKeywords.btnSaveKW.enabled = true;
		  				  		
		  		try{
		  			if(this.selectedAdKeywordId != -1){		  			
				  		var keyWordObj : Statistics = Statistics(this.adKeywordsList.getItemAt(this.selectedAdKeywordId));				  						  		
				  		this.currentKeywordId = keyWordObj.Id;//this.selectedAdKeywordId;
				  	   		
				  		switch(target.id){
				  			case "txtKWText":	
				  				keyWordObj.KeywordText = target.text;				  						  					  			
				  				break;
				  				
				  			case "txtKWMaxCPC":
				  				keyWordObj.MaxCPC = parseFloat(target.text);
				  				break;
				  			
				  			case "txtKWMinCPC":
				  				keyWordObj.MinCPC = parseFloat(target.text);
				  				break;
				  				
				  			case "txtKWDestURL":
				  				keyWordObj.DestinationURL = target.text;
				  				break;				  								  		
				  		}				  		
				  		
				  		if(!this.isAddingKeyword)
				  		{
				  			this.lblEditMSG.text = "You are editing Keyword : " +this.currentKeywordText;
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You are adding a new Keyword";
				  		}
				  		
				  		this.adKeywordsList.setItemAt(keyWordObj, this.selectedAdKeywordId);
				        this.tbKeywords.keywordsListData = this.adKeywordsList; 					        	  					  						  						  					  	
				  	}
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}  	  				  		
		  	}	
		  	
		  	 /**
			 * Function to handle the keywords edit button click event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onKeywordEditButtonClick(event:Event):void{
		  		
		  		enableKeywordsComponents();
		  		//this.tbKeywords.dtKeywordPuDate.enabled = false;
		  		showHideKeywordButtons(false,false,true,true);
		  		this.lblEditMSG.text = "You are going to edit Keyword : " +this.currentKeywordText;
                this.tbKeywords.replicate.btnCopyGrps1.enabled  = false;
                this.tbKeywords.grdKeywords.enabled = false;
		  	}
		  	
		  	
                        /**
			 * Function to handle the keywords cancel button click event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onKeywordCancelButtonClick(event:Event):void{
		  		
		  		//this.tbKeywords.keywordsListData = this.adKeywordsListCopy;
				try{	
					//this.tbKeywords.dtKeywordPuDate.enabled = false;
					if(isAddingKeyword){
					  this.tbKeywords.grdKeywords.enabled = true;
					  this.isAddingKeyword = false;
					  
						this.tbKeywords.lblPublishedDate.visible = true;
						this.tbKeywords.lblPubDt.visible = true;
					}
						
		  			wsAdKeywordService.getAllAdKeywords.send(this.currentAdGroupId);	
		  			clearKeyWordsControls();
		  			disableKeywordsComponents();	
		  				
		  			this.lblEditMSG.text = "You have cancelled the operation.";		
		  				
		  			showHideKeywordButtons(true,false,false,false);	
		  			this.tbKeywords.lblPublishedDate.text = "";
		  			this.tbKeywords.grdKeywords.enabled = true;
		  		}
		  		catch(e:Error){		
		  			Alert.show(e.message, "Error sending get keyword statistics request!");  
		  		} 		
		  	}
                        
                       /**
			 * Function to handle the keywords cancel button click event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onAdCopyCancelButtonClick(event:Event):void{
		  		
		  		//this.tbKeywords.keywordsListData = this.adKeywordsListCopy;
				try{	
		  			wsAdService.getAllAdCopy.send(this.currentAdGroupId);	
		  			clearAdCopyFields();
		  			enableAdCopyFields(false);	
		  			
		  			 /* if(isAddingAdCopy){
		  			this.tbAdCopies.btnAddAd.enabled = true;  	
		  				this.tbAdCopies.btnEditAds.enabled = false;
		  				isAddingAdCopy = false;
       		       	
		  			}
		  			else{//editing
		  				this.tbAdCopies.btnAddAd.enabled = false;
		  				this.tbAdCopies.btnEditAds.enabled = true;
		  			} */ 
		  			
		  			 this.tbAdCopies.replicate.btnCopyGrps1.enabled  = false;		
				     showHideAdCopyButtons(true,false,false,false);
				     isAddingAdCopy = false;
		  			 	
		  			 	
		  			this.lblEditMSG.text = "You have cancelled the operation.";		
		  		
					this.tbAdCopies.grdAdCopies.enabled = true;
					
					if(isAddingAdCopy){
						
						this.tbAdCopies.btnSchedule.enabled = true;
						
					}
					else{
						
						this.tbAdCopies.btnSchedule.enabled = false;
					}
				 
				 	this.tbAdCopies.btnCancelSchedule.visible = false;	
		  			showAdCopyScheduleComponents(false);	
		  			this.tbAdCopies.btnSchedule.visible = true;
		  		}
		  		catch(e:Error){		
		  			Alert.show(e.message, "Error sending get AdCopy statistics request!");
		  		} 			  		
		  		
		  		this.tbAdCopies.grdAdCopies.selectedItem = null;
		  	   	this.tbAdCopies.grdAdCopies.selectedIndex = -1;	 			  		
		  	}

		  	private function onKeywordPublishedDateChange(event : Event) : void 
		  	{
		  		if(this.selectedAdKeywordId != -1)
		  		{		  			
				  	var keyWordObj : Statistics = Statistics(this.adKeywordsList.getItemAt(this.selectedAdKeywordId));				  						  		
				  	this.currentKeywordId = keyWordObj.Id;
				  	//keyWordObj.PublishedDate = this.tbKeywords.dtKeywordPuDate.selectedDate;
				  	this.adKeywordsList.setItemAt(keyWordObj, this.selectedAdKeywordId);
				    this.tbKeywords.keywordsListData = this.adKeywordsList; 
		  		}				  	   		
		  	}
		  	
		   /**
			 * Function to track the Ad copy Status combo change event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onAdCopyStatusComboClose(event : Event) : void{
		  		try{		
		  			var statusTypeObj : SemaStatusType = new SemaStatusType();
		  		    
		  		    if(this.selectedAdId != -1){
		  		    	var adCopyObj : Statistics = Statistics(this.adCopyList.getItemAt(this.selectedAdId));
		  		    	statusTypeObj._SemaStatusType = this.tbAdCopies.cmbAdCopyStatus.selectedLabel;						  						  						  		
				  		adCopyObj.Status = statusTypeObj;				  		
				  		this.adCopyList.setItemAt(adCopyObj, this.selectedAdId);
				  		this.tbAdCopies.btnSaveAd.enabled = true;
				  		this.currentAdCopyId = adCopyObj.Id;
				  		this.tbAdCopies.adsListData = this.adCopyList;
		  		    	
		  		    	if(adCopyObj.EffectiveDate != null && adCopyObj.ExpirationDate != null)
		  		    	{
		  		    	if(!(adCopyObj.EffectiveDate.toLocaleString() == "Sat Jan 1 2000 01:01:00 AM" && 
				   	 		adCopyObj.ExpirationDate.toLocaleString() == "Tue Jan 1 2030 01:01:00 AM"))
					   	{
					   	 	
					   	 	if(this.tbAdCopies.cmbAdCopyStatus.selectedLabel == "Paused" || this.tbAdCopies.cmbAdCopyStatus.selectedLabel == "Deleted")
						   	{		  			
						  		this.tbAdCopies.dtEffectiveDate.visible = false;
						  		this.tbAdCopies.dtExpirationDate.visible = false;
						  		this.tbAdCopies.btnSchedule.visible = true;
						  		this.tbAdCopies.btnCancelSchedule.visible = false;
						  	}
						}
		  		    }
		  		    	
		  		    	if(!this.isAddingAdCopy)
				  	{
				  		this.lblEditMSG.text = "You are editing AdCopy : " +this.currentAdCopyHeadLine;
				  	}
				  	else
				  	{
				  		this.lblEditMSG.text = "You are adding a new Ad Copy";
				  	}
		  		    }
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}		  		
		  	}
		  	
		  	
		  		
		  		
		  	/**
			 * Function to track the Ad copy Vendor policy chk change event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onAdCopyVendorExCHKChange(event : Event) : void{
		  		try{				  			
		  		    if(this.selectedAdId != -1){		  			
				  		var adCopyObj : Statistics = Statistics(this.adCopyList.getItemAt(this.selectedAdId));
				  		adCopyObj.VendorPolicyExemptionRequest = this.tbAdCopies.txtVendorPolicyExcemption.text; 			  		
				  		this.adCopyList.setItemAt(adCopyObj, this.selectedAdId);
				  		this.tbAdCopies.btnSaveAd.enabled = true;
				  		this.currentAdCopyId = adCopyObj.Id;
				  		this.tbAdCopies.adsListData = this.adCopyList;				  		 
				  	}		  		
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}		  		
		  	}
		  	
		  	
		  	
		   /**
			 * Function to track the Ad copy Type combo change event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onAdCopyTypeComboClose(event : Event) : void {
		  		try{		
		  			if(this.selectedAdId != -1){		  			
				  		var adCopyObj : Statistics = Statistics(this.adCopyList.getItemAt(this.selectedAdId));
				  		var adCopyTypeObj : AdCopyType = new AdCopyType();
				  		
				  		if(this.tbAdCopies.cmbAdCopyType.selectedLabel != null){
				  			adCopyTypeObj._AdCopyType = this.tbAdCopies.cmbAdCopyType.selectedLabel.toUpperCase();
				  			adCopyObj.Type = adCopyTypeObj;	
				  		}
				  						  		
				  		this.adCopyList.setItemAt(adCopyObj, this.selectedAdId);
				  		this.tbAdCopies.btnSaveAd.enabled = true;
				  		this.currentAdCopyId = adCopyObj.Id;
				  		this.tbAdCopies.adsListData = this.adCopyList;				  		 
				  		
				  		if(!this.isAddingAdCopy)
				  		{
				  			this.lblEditMSG.text = "You are editing AdCopy : " +this.currentAdCopyHeadLine;
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You are adding a new Ad Copy";
				  		}			  		 
				  	}
		  		
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}		  		
		  	}
		  	
		  	
		  	
		   /**
			 * Function to track the Keyword MatchType CheckBox Changed event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onKeywordMatchTypeCheckBoxChanged(event : Event) : void {
		  		/* try{		
		  			if(this.selectedAdKeywordId != -1) {		  			
				  		var keyWordObj : Statistics = Statistics(this.adKeywordsList.getItemAt(this.selectedAdKeywordId));				  						  		
				  		keyWordObj.NegativeMatch = new Boolean(this.tbKeywords.chkKWNegativeMatch.selected);				  		
				  		this.adKeywordsList.setItemAt(keyWordObj, this.selectedAdKeywordId);
				  		this.tbKeywords.keywordsListData = this.adKeywordsList;	 
				  		this.tbKeywords.btnSaveKW.enabled = true;
				  	}			
		  		
		  		}catch(e:Error){	  			
		  		}		 */  	
		  	}	 
		  	
		  	
		  	
		   /**
			 * Function to add new Ad copy
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		  	private function onClickAddAd(event : Event) : void{
		  		try{		  	
		  			var adCopyObj : Statistics = new Statistics();		
		  			var statusTypeObj : SemaStatusType = new SemaStatusType();
	       			var adCopyTypeObj : AdCopyType = new AdCopyType();  					  					  		
		        	
	       			var selectedAdCopyObj : Statistics = new Statistics(); 					  					  		
		        	
		        	/* var defaultEffectiveDate :Date = new Date();
		        	var defaultExpirationDate : Date = new Date();
		        	defaultExpirationDate.setMonth(defaultExpirationDate.getMonth()+2);*/

			   	 	this.lblEditMSG.text = "You are adding a new Ad Copy";
	       			  					  					  		
		  			this.currentAdCopyId = 0;
		  			this.isAddingAdCopy = true;
		  			this.tbAdCopies.txtHeadline.setFocus();  
		  			this.tbAdCopies.txtDisapproved.text = "";
		  			
		  					  			
		  			statusTypeObj._SemaStatusType = "Paused";
				    adCopyObj.Status = statusTypeObj;
				    
				    adCopyObj.AdVendorStatus = "UNKNOWN";
				    
				    adCopyTypeObj._AdCopyType = "UNKNOWN";
				    adCopyObj.Type = adCopyTypeObj;
				    
				    adCopyObj.Disapproved = new Boolean(false);
				    
				    selectedAdCopyObj = Statistics(this.tbAdCopies.grdAdCopies.selectedItem);
				    
				    if(selectedAdCopyObj == null)
				    {
		  			adCopyObj.Id = this.currentAdCopyId;
		  			adCopyObj.AdVendorId = 1;
		  			adCopyObj.GroupId = this.currentAdGroupId;
		  			adCopyObj.Headline = "Headline";
		  			adCopyObj.Description1 = "Description 1";
		  			adCopyObj.Description2 = "Description 2";
		  			adCopyObj.DisplayUrl = "URL";
		  			adCopyObj.DestinationUrl = "Destination";
		  			adCopyObj.VendorPolicyExemptionRequest = "";
		  			}
				    else
				    {
				    	adCopyObj.Id = this.currentAdCopyId;
			  			adCopyObj.AdVendorId = selectedAdCopyObj.AdVendorId;
			  			adCopyObj.GroupId = this.currentAdGroupId;
			  			adCopyObj.Headline = selectedAdCopyObj.Headline;
			  			adCopyObj.Description1 = selectedAdCopyObj.Description1;
			  			adCopyObj.Description2 = selectedAdCopyObj.Description2;
			  			adCopyObj.DisplayUrl = selectedAdCopyObj.DisplayUrl;
			  			adCopyObj.DestinationUrl = selectedAdCopyObj.DestinationURL;
			  			adCopyObj.VendorPolicyExemptionRequest = selectedAdCopyObj.VendorPolicyExemptionRequest;
			  			
				    } 
		  			
		  			adCopyObj.ModifiedDate = new Date();//p139dak: UI is required to pass existing ModifiedDate for existing objects and current date for new objects
		  			
		  			this.adCopyList.addItem(adCopyObj);
		  			
					this.tbAdCopies.adsListData = this.adCopyList;
		  			
		  			this.tbAdCopies.grdAdCopies.selectedItem = adCopyObj;
		  			this.selectedAdId = this.adCopyList.getItemIndex(adCopyObj);
		  			
		  			enableAdCopyFields(true);	
		  		
				     showHideAdCopyButtons(false,false,true,true);
		  			this.tbAdCopies.replicate.btnCopyGrps1.enabled  = false;
		  		
		  			adCopyObj.Clicks = 0;
					adCopyObj.Impressions = 0;
					adCopyObj.Cost = 0;	
					adCopyObj.CTR = 0;
					adCopyObj.CPM = 0;
					adCopyObj.CPC = 0;
									
					this.tbAdCopies.btnSchedule.visible = true;	
					showAdCopyScheduleComponents(false);			
					this.tbAdCopies.btnSchedule.enabled = true;
					this.tbAdCopies.grdAdCopies.scrollToIndex(this.adCopyList.length - 1);
					this.tbAdCopies.grdAdCopies.enabled = false;
									
		  		}catch(e:Error){		  		
		  		}		  					  				  				  		
		  	} 
		  	
			/**
			 * This is the event listener for on click function of the save button in ad copy. This will do some validations and call the 
			 * web service as necessary.
			 * 
			 * @author Zone24x7
			 * @param  event click event
			 */
			private function onClickSaveAd(event : Event) : void
			{
				try
				{
					var adCopyObj : Statistics = new Statistics();
					
					if(!this.isAddingAdCopy)
					{
						//this.currentAdCopyId != 0
						adCopyObj.Id = new Number(this.currentAdCopyId); //updating an existing ad
	                }

					adCopyObj.Status = new SemaStatusType();
					adCopyObj.Status._SemaStatusType = this.tbAdCopies.cmbAdCopyStatus.selectedLabel;
					adCopyObj.Type = new AdCopyType();
					adCopyObj.Type._AdCopyType = this.tbAdCopies.cmbAdCopyType.selectedLabel;
					adCopyObj.GroupId = new Number(this.currentAdGroupId);
				    
				    adCopyObj.Headline = this.tbAdCopies.txtHeadline.text;
					adCopyObj.Description1 = this.tbAdCopies.txtDescOne.text;
					adCopyObj.Description2 = this.tbAdCopies.txtDescTwo.text;
					adCopyObj.DisplayUrl = this.tbAdCopies.txtDispUrl.text;
					adCopyObj.DestinationUrl = this.tbAdCopies.txtDestUrl.text;
					
					copyOriginalAdCopyModifiedDate(adCopyObj);//p139dak: The UI is REQUIRED to save and pass back the modified date
					
					if(this.tbAdCopies.btnSchedule.visible)
					{
						adCopyObj.EffectiveDate = new Date(2000,00,01,01,01);
						adCopyObj.ExpirationDate = new Date(2030,00,01,01,01);
					}
					else
					{
						adCopyObj.ExpirationDate = this.tbAdCopies.dtExpirationDate.selectedDate;
						adCopyObj.EffectiveDate = this.tbAdCopies.dtEffectiveDate.selectedDate;
					}
					
			    	adCopyObj.VendorPolicyExemptionRequest = this.tbAdCopies.txtVendorPolicyExcemption.text;
						
					if(StringUtil.trim(adCopyObj.Headline) != "" && adCopyObj.Headline != null)
					{
						if(StringUtil.trim(adCopyObj.Description1) != "" && adCopyObj.Description1 != null)
						{
							if(StringUtil.trim(adCopyObj.Description2) != "" && adCopyObj.Description2 != null)
							{
								if(validateURL(adCopyObj.DestinationUrl) )
								{
									if(ObjectUtil.dateCompare(adCopyObj.EffectiveDate, adCopyObj.ExpirationDate)<=0) {
										wsAdService.putAdCopyList.send(adCopyObj);
									}
									else
									{
										this.tbAdCopies.dtExpirationDate.setFocus();
										Alert.show("Please select an expiration date greater than the effective date");
										enableAdCopyFields(true);
										this.tbAdCopies.grdAdCopies.enabled = false;
										
									}
								}
								else
								{
									this.tbAdCopies.txtDestUrl.setFocus();
									Alert.show("Please add URL's in correct format");
									enableAdCopyFields(true);
									this.tbAdCopies.grdAdCopies.enabled = false;
									
								}
							}
							else
							{
								this.tbAdCopies.txtDescTwo.setFocus();
								Alert.show("Please fill description line 2");
								enableAdCopyFields(true);
								this.tbAdCopies.grdAdCopies.enabled = false;
							}
							
						}
						else{
							this.tbAdCopies.txtDescOne.setFocus();
							Alert.show("Please fill description line 1");
							enableAdCopyFields(true);
							this.tbAdCopies.grdAdCopies.enabled = false;
						}
						
					}
					else
					{
						this.tbAdCopies.txtHeadline.setFocus();
						Alert.show("Please add a headline");
						enableAdCopyFields(true);
						this.tbAdCopies.grdAdCopies.enabled = false;
					}
						
					if(this.tbAdCopies.grdAdCopies.enabled)
					{
			        	showHideAdCopyButtons(true,true,false,false);  
			     	}
			     	else
			     	{
			        	showHideAdCopyButtons(false,false,true,true); 
			        	this.tbAdCopies.grdAdCopies.enabled = false;
			        	enableAdCopyFields(true);
			     	}
			     	
			     	//Hide the ScheduleCancel Button
			     	this.tbAdCopies.btnCancelSchedule.visible = false;
		  	   }
		  	   catch(e:Error)
		       {  
		        	Alert.show(e.message + " Put ad copy");
		        	this.tbAdCopies.grdAdCopies.enabled = false;
		       }               
		       this.lblEditMSG.text ="";
		       this.tbAdCopies.grdAdCopies.selectedItem = null;
		  	   this.tbAdCopies.grdAdCopies.selectedIndex = -1;	              
		   }
		   
		   /**
			 * Function to track the Keyword Status Combo Changed event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onKeywordStatusComboClose(event : Event) : void {
		  		try{		
		  			var statusTypeObj : SemaStatusType = new SemaStatusType();
		  		    
		  		    if(this.selectedAdKeywordId != -1){	
		  				var keyWordObj : Statistics = Statistics(this.adKeywordsList.getItemAt(this.selectedAdKeywordId));				  						  						  		
						statusTypeObj._SemaStatusType = this.tbKeywords.cmbKWStatus.selectedLabel;
			    		keyWordObj.Status = statusTypeObj;			
			    			  		
				  		this.adKeywordsList.setItemAt(keyWordObj, this.selectedAdKeywordId);				  		
				  		this.currentKeywordId = keyWordObj.Id;
				  		this.tbKeywords.keywordsListData = this.adKeywordsList;	 
				  		this.tbKeywords.btnSaveKW.enabled = true;
				  		
				  		if(!this.isAddingKeyword)
				  		{
				  			this.lblEditMSG.text = "You are editing Keyword : " +this.currentKeywordText;
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You are adding a new Keyword";
				  		}
				  		
				  	} 
		  		
		  		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}		  		
		   }
		   
		   
		   /**
		   *  Just following this stupid design -- to be rewritten 
		   * @param event
		   * 
		   */
		   private function onKeywordMaxCPCChange(event : Event) : void {
		   		try {
		   			var keyWordObj : Statistics = Statistics(this.adKeywordsList.getItemAt(this.selectedAdKeywordId));
		   			keyWordObj.MaxCPC = new Number(parseFloat(this.tbKeywords.txtKWMaxCPC.text));
		   			this.adKeywordsList.setItemAt(keyWordObj, this.selectedAdKeywordId);
		   			
		   			if(!this.isAddingKeyword)
			  		{
			  			this.lblEditMSG.text = "You are editing Keyword : " +this.currentKeywordText;
			  		}
			  		else
			  		{
			  			this.lblEditMSG.text = "You are adding a new Keyword";
			  		}
		   			
		   		}catch(e:Error){	
		  			Alert.show(e.message);
		  		}		   
		   }
		  		
		   /**
			 * Function to track the Keyword Status Combo Changed event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onKeywordMatchTypeComboClose(event : Event) : void {
		  		try{				  			
		  		    if(this.selectedAdKeywordId != -1){	
		  				var keyWordObj : Statistics = Statistics(this.adKeywordsList.getItemAt(this.selectedAdKeywordId));						
			    		keyWordObj.MatchType._MatchType = this.tbKeywords.cmbKWMatchType.selectedLabel;			
			    			  		
				  		this.adKeywordsList.setItemAt(keyWordObj, this.selectedAdKeywordId);				  		
				  		this.currentKeywordId = keyWordObj.Id;
				  		this.tbKeywords.keywordsListData = this.adKeywordsList;	 
				  		this.tbKeywords.btnSaveKW.enabled = true;
				  		
				  		if(!this.isAddingKeyword)
				  		{
				  			this.lblEditMSG.text = "You are editing Keyword : " +this.currentKeywordText;
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You are adding a new Keyword";
				  		}
				  		
				  	} 		  		
		  		}catch(e:Error){	
		  			Alert.show(e.message);	  
		  		}		  		
		   }
		  	
		   
		   
		   /**
			 * Function to Save keyword
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		    private function onClickSaveKeyword(event : Event) : void {		   				   		
		   		var keyWordObj : AdKeyWord = new AdKeyWord();
		   		var statusTypeObj : SemaStatusType = new SemaStatusType();
			                  
                if(this.currentKeywordId != 0){
                	keyWordObj.Id = new Number(this.currentKeywordId);
                }
                
		   		keyWordObj.VendorId = new Number(1);
		   		
		   		keyWordObj.AdGroupId = new Number(this.currentGroupId);
		   		 
		   		statusTypeObj._SemaStatusType = this.tbKeywords.cmbKWStatus.selectedLabel;
			    keyWordObj.Status = statusTypeObj;
			     
			    var matchTypeObj : MatchType = new MatchType();
			    matchTypeObj._MatchType = this.tbKeywords.cmbKWMatchType.selectedLabel;
			    
		   		keyWordObj.MatchType = matchTypeObj;	   		
		   		keyWordObj.KeywordText = this.tbKeywords.txtKWText.text;
		   		keyWordObj.DestinationURL = this.tbKeywords.txtKWDestURL.text;
		   		keyWordObj.MaxCPC = new Number(parseFloat(this.tbKeywords.txtKWMaxCPC.text));
		   		//keyWordObj.MinCPC = new Number(parseFloat(this.tbKeywords.txtKWMinCPC.text));
		   		keyWordObj.MinCPC = 0; // just for now
		   		
		   		//Negative
		   		keyWordObj.NegativeMatch = new Boolean(this.tbKeywords.chkKWNegativeMatch.selected);
		   				   				   	
		   		//keyWordObj.VendorPolicyExemptionRequest = "0";
		   		keyWordObj.VendorPolicyExemptionRequest = this.tbKeywords.txtVEReq.text;
		   		
		   			
		   		keyWordObj.AdVendorStatus = this.tbKeywords.txtKeyVendorStatus.text;	   		
		   		
		   		keyWordObj.CreatedDate = new Date();
		   		copyOriginalAdKeywordModifiedDate(keyWordObj);//p139dak: The UI is REQUIRED to save and pass back the modified date
		   		keyWordObj.PublishedDate = new Date();//this.tbKeywords.dtKeywordPuDate.selectedDate;
		   		keyWordObj.CreatedBy = "user";
		   		keyWordObj.ModifiedBy = "user";
		   	
		   		if((StringUtil.trim(keyWordObj.KeywordText) != "") && (StringUtil.trim(keyWordObj.DestinationURL) != "") && (keyWordObj.MaxCPC >= 0 || keyWordObj.MaxCPC.toString().toUpperCase() != "NAN" ) ){
		   		
			   		if(validateURL(keyWordObj.DestinationURL))
			   		{
						if(keyWordObj.MaxCPC <= currentAdGroupMaxCPC)
						{
							if(!isExistingKeyword()) {
								wsAdKeywordService.putAdKeywords.send(keyWordObj);
							    //wsAdKeywordService.getAllAdKeywords.send(this.currentAdGroupId);		   		 				   
							} else {
									this.tbKeywords.txtKWText.setFocus();
									Alert.show("Keyword already exists!\nPlease enter a different Keyword.");
									enableKeywordsComponents();
							}		   											   		 				  
						} else {
							this.tbKeywords.txtKWMaxCPC.setFocus();
							Alert.show("Please enter a value for the Max CPC less than the default Max CPC for this Ad Group : $" + currentAdGroupMaxCPC);
							enableKeywordsComponents();
						}
					} else {

						this.tbKeywords.txtKWDestURL.setFocus();
						Alert.show("Please add the URL in correct Format");
						enableKeywordsComponents();
					}
		   		} else {
		   			if(StringUtil.trim(keyWordObj.KeywordText) == ""){
						this.tbKeywords.txtKWText.setFocus();
		   				Alert.show("Please Fill Keyword Text");
		   			}
		   			else if(keyWordObj.DestinationURL == "")
		   			{
		   				this.tbKeywords.txtKWDestURL.setFocus();
		   				
		   				Alert.show("Please Fill Destination URL");
		   			}
		   			else if(keyWordObj.MaxCPC < 0 || keyWordObj.MaxCPC.toString().toUpperCase() == "NAN")
		   			{
		   				this.tbKeywords.txtKWMaxCPC.setFocus();
		   				Alert.show("Please Fill Max CPC");
		   			}
		   		}

		   		//disableKeywordsComponents();	   
		   }
		   
		   /*
		    * p139dak: Copy ModifiedDate stored in the original list of objects.
		    *
		    * How to make all copyOriginalModifiedDate() functions one and the same function?
		    * The problem is that if I pass the first parameter as Object, I would not know
		    * what to cast it to. We need an interface (or whatever passes for interface in
		    * the ActionScript) to be able to set the ModifiedDate. 		    
		    *
		    * I'm sorry, I have no idea how this code works, so I'm just brute-force hacking here.
		    */ 
		   private function copyOriginalAdKeywordModifiedDate(keyWordObj : AdKeyWord) : void{		   	
		      //In case we won't find the stored object, set the current date with the
		      //assumption this is a new object
		   	  keyWordObj.ModifiedDate=new Date();
              for(var i : int=0; i<this.adKeywordsList.length; i++){
                var storedKeyWordObj : Statistics = this.adKeywordsList.getItemAt(i) as Statistics;                
		      	if(storedKeyWordObj.Id == keyWordObj.Id){
		      		keyWordObj.ModifiedDate=storedKeyWordObj.ModifiedDate;
		      		break;
		      	}//if		    
		      }//for
		   }//copyOriginalAdKeywordModifiedDate

           /*
            * p139dak: Copy ModifiedDate stored in the original list of objects.
            *
            * How to make all copyOriginalModifiedDate() functions one and the same function?
            * The problem is that if I pass the first parameter as Object, I would not know
            * what to cast it to. We need an interface (or whatever passes for interface in
            * the ActionScript) to be able to set the ModifiedDate.             
            *
            * I'm sorry, I have no idea how this code works, so I'm just brute-force hacking here.
            */ 
           private function copyOriginalAdCopyModifiedDate(adCopyObj : Statistics) : void{            
              //In case we won't find the stored object, set the current date with the
              //assumption this is a new object
              adCopyObj.ModifiedDate=new Date();
              for(var i : int=0; i<this.adCopyList.length; i++){
                var storedAdCopyObj : Statistics = this.adCopyList.getItemAt(i) as Statistics;                
                if(storedAdCopyObj.Id == adCopyObj.Id){
                    adCopyObj.ModifiedDate=storedAdCopyObj.ModifiedDate;
                    break;
                }//if           
              }//for
           }//copyOriginalAdCopyModifiedDate
		   
		   /**
			 * Function to expand the tree
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */		  
		   private function isExistingKeyword() : Boolean 
		   {		   
		   		if(this.tbKeywords.keywordsListData != null && isAddingKeyword)
		   		{
		   			for(var i: int = 0; i < this.tbKeywords.keywordsListData.length-1; i++)
			   		{
				   		var keywordObj : Statistics = Statistics(this.tbKeywords.keywordsListData.getItemAt(i));
				    	if(keywordObj.KeywordText == this.tbKeywords.txtKWText.text)
				    	{
				    		return true;
				    	}
			   		}
		   		}
		   		return false;
		   }
		   
		   
		   /**
			 * Function to expand the tree
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */		  
		   private function ExpandPackageFileTree():void {
		    	this.customTreeView.treeList.expandItem(this.customTreeView.treeList.selectedItem, true);
		    	this.customTreeView.treeList.selectedIndex = 0;
		   }
		   
		   
		   
		   /**
			 * Function to track tree click event
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   public function onTreeClick(event : Event) : void {
		   	 	//selectedNode = Tree(event.target).selectedItem as XML;
		   	 	this.customTreeView.treeList.expandItem(this.customTreeView.treeList.selectedItem, true); 	 
		   	 	this.populateTabs(event);		   	 
		   	 	
		   	 	this.isAddingAdCopy	= false;
		   	 	this.isAddingAdGroup = false;
		   	 	this.isAddingCampaign = false;
		   	 	this.isAddingKeyword = false;
		   	 	this.isAddingPortfolio = false;		   	 
		   	 	this.isAddingPortfolioGroup = false; 
		   } 
		   
		   
		   
		   /**
			 * Function to show the Campaign Tab and hide Main tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function enableCampaignTab() : void {
		   	  	this.tabMain.visible=false;
		   	  	this.keywordTool.visible = false;
		   		this.tabPortfolio.visible = false;
		   		this.tabPortfolioGroup.visible = false;
	   	 		this.tabCampaign.visible = true;
	   	 		this.lblEditMSG.text="";
	   	 		disableCampaignSummary();
		   }
		   
		   
		   
		   
		   /**
			 * Function to show the Main tab and hide the Campaign tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function enableMainTab() : void {
		   		this.keywordTool.visible = false;
		   		this.tabMain.visible=true;	
	   	 		this.tabCampaign.visible = false;
	   	 		this.tabPortfolio.visible = false;
	   	 		this.tabPortfolioGroup.visible = false;	   	 		
	   	 		this.tabSEMA.visible = false; 	 		
		   }
		   
		   
		   		 
		   /**
			 * Function to disable Campaign Tab
			 * 
			 * @author Zone24x7
			 * @param  XML
			 * @return
			 */
		   private function displayDisabledCampaignTab(selNode:XML) : void {
		   	 	if (customTreeView.treeList.selectedItem.@type == "portfolioGroup") {		   	 			
			   	 		//this.lblBreadCrumb.text = "SEMA > MCOM >";			   	 		
			   	 		showPortfolioTab();
			   	 		this.tabPortfolio.visible = true;
		  				this.tabPortfolioGroup.visible = false;
		  				this.keywordTool.visible = false;
		   	 		}		   	 				   	 	
			   	 	else if(customTreeView.treeList.selectedItem.@type == "portfolio"){				   	 		
			   	 		//this.lblBreadCrumb.text = "SEMA > MCOM > Home";
			   	 		showPortfolioTab();
			   	 	}
			   	 	else if(customTreeView.treeList.selectedItem.@type == "campaign"){	
			   	 		
			   	 		if(customTreeView.treeList.selectedItem.@label!=null){
			   	 			//this.lblBreadCrumb.text = "SEMA > MCOM > Home > Google > Macy*s > "+ selectedNode.@label;
			   	 			this.currentlyEditing = "Campaign";
			   	 		}
			   	 		
			   	 		enableCampaignTab();
			   	 		enableCampaignSummaryFields();
			   	 		this.tabPortfolio.visible = false;
			   	 		this.tabPortfolioGroup.visible = false;
			   	 		this.keywordTool.visible = false;
			   	 	}
		   }
		   
		 
		   
		   /**
			 * Function to display portfolio tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function showPortfolioTab() : void {
		   		this.tabCampaign.visible = false;
	   			this.tabMain.visible = false;
	   			this.tabPortfolioGroup.visible = false;
	   			this.tabSEMA.visible = false;
   				this.tabPortfolio.visible = true;
   				this.lblEditMSG.text="";
   				this.tbPortfolioSummary.btnAddPortfolioSummaryAddCampaign.enabled =true;
   				this.tbPortfolioAdCampaign.enabled =true;
   				this.keywordTool.visible = false;
		   }
		   
		    /**
			 * Function to display SEMA tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function showSEMATab():void{
		   
		   		this.tabSEMA.visible = true;
		   		this.tabCampaign.visible = false;
	   			this.tabMain.visible = false;
	   			this.tabPortfolioGroup.visible = false;
   				this.tabPortfolio.visible = false;
   				this.lblEditMSG.text="";
   				this.keywordTool.visible = false;
		   }
		   
		     /**
			 * Function to display AdGroup Summary tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function showAdGroupSummaryTab():void{
		   
		   		this.tabSEMA.visible = false;
		   		this.tabCampaign.visible = false;
	   			this.tabMain.visible = true;
	   			this.tabPortfolioGroup.visible = false;
   				this.tabPortfolio.visible = false;
   				this.lblEditMSG.text="";
   				this.keywordTool.visible = false;
		   }
		   
		   /**
			 * Function to display Portfolio Gruop tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function showPortfolioGroupTab() : void{		
		    	this.tabPortfolioGroup.visible = true;
			   	this.tabPortfolio.visible = false;
			   	this.tabMain.visible = false;
			   	this.tabCampaign.visible = false;
			   	this.tbPortfolioGroup.enabled = true;
			   	this.tbPortfolioGroupSummary.btnAddPortfolio.enabled = true;
			   	this.keywordTool.visible = false;
			   	this.tabSEMA.visible = false;   
		   }
		   
		   
		   /**
			 * Function to display Campaign Summary tab
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function showCampaignSummaryTab() : void{		
		    	this.tabPortfolioGroup.visible = false;
			   	this.tabPortfolio.visible = false;
			   	this.tabMain.visible = false;
			   	this.tabCampaign.visible = true;
				this.tabSEMA.visible = false; 
			   	this.keywordTool.visible = false;
		   }
		   
			/**
			 * Function to enable portfolio summary data components
			 * 
			 * @author Zone24x7
			 * @param enable whether the portfolio summary components should be enabled or not.
			 */
			private function enablePortfolioSummaryComponents(enable : Boolean) : void
			{
				this.tbPortfolioSummary.txtPortfolioName.editable = enable;
		  		this.tbPortfolioSummary.txtDescription.editable = enable;
		  		this.tbPortfolioSummary.cmbCampaignStatus.enabled = enable;
		  		this.tbPortfolioSummary.chkAddPofileGroup.enabled = enable;
			}
		   
		  	/**
			 * Function to get the path up to the root
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
			private function getPathToNode(node:XML):void
			{
				var pathToNode:String = "";
				//Get the parent
				var parentNode:XML = XML(node.parent());
				var currentNode:XML =node;
				var nodeCount : int = new int;
				
				if( this.isFromCampaignNode){
					
					nodeCount = 1;
				}
				else if(this.isFromAdGroupNode){
					
					nodeCount = 0;
				}
				else if(this.isFromPortfolioNode){
					nodeCount = 2;
				}
				while(parentNode != "")
				{
					if(nodeCount == 1){
						
						this.currentCampaignName = currentNode.@label;
					}
					else if(nodeCount == 2){
						
						this.currentPortfolioName = currentNode.@label;
					}
					else if(nodeCount == 3){
						
						this.currentPortfolioGroupName = currentNode.@label;
					}
				
					//pathToNode = currentNode.@label + "\\" + pathToNode;
					currentNode = parentNode;
					parentNode = XML(currentNode.parent());
					 
					
					
					nodeCount++;
					
				}
				//pathToNode = currentNode.@name + "\\" + pathToNode;

				this.isFromCampaignNode = false;
				this.isFromAdGroupNode = false;
				
				this.isFromPortfolioNode = false;
				//return pathToNode;
			}
		   
		   /**
			 * Function to populate Tabs according to the selected tree node
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function populateTabs(event : Event) : void{		   	
		     try{
		     	var selectedNode : XML = XML(customTreeView.treeList.selectedItem); 
		   	 	if(selectedNode != null && selectedNode.@type != null){
		   	 				   	 		
		   	 		if(selectedNode.@type == "root"){		   	 			
		   	 			//this.adManager.title = "SEMA";	   	 			
		   	 			showSEMATab();		   	 					   	 		
		   	 			this.lblBreadCrumb.text = "SEMA"; 
		   	 			this.tabPortfolioGroup.selectedIndex = 0;
						this.tabPortfolio.selectedIndex = 0;
						this.tabCampaign.selectedIndex = 0;
						this.tabMain.selectedIndex = 0;	   	 	
						this.tbSEMA.clear();				   	 		
		   	 		}
		   	 				   	 		
		   	 		if(selectedNode.@type == "portfolioGroup"){			   	 			
			   			showPortfolioGroupTab();	
			   			wsPortfolioGroupService.getPortfolioGroupList.send(parseInt(selectedNode.@portfolioGroupId),"macys"); 						
						wsPortfolioService.getAllPortfolios.send(selectedNode.@portfolioGroupId);  
						this.currentPortfolioGroupId = selectedNode.@portfolioGroupId;
						this.isAddingPortfolioGroup = false;
						this.tabSEMA.visible = false;   
						this.keywordTool.visible = false;
			   			this.lblEditMSG.text="";	
			   			this.portfoliosList = new ArrayCollection();	
			   			this.tbPortfolioGroupSummary.btnEditPortfolioGroup.enabled = true;
			   			this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = false;
			  			this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = false;
			  			this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.enabled = false;
			  			
			  			showHidePortfolioGroupButtons(true,true,false,false);
			  			this.currentPortfolioGroupName = selectedNode.@label;
 						this.lblBreadCrumb.text = "SEMA > "+ selectedNode.@label; 
			   	 	 	if((this.currentPortfolioGroupName != selectedNode.@label) || (this.currentPortfolioGroupName == "")){
			   	 	 		
			   	 	 		this.currentPortfolioGroupName == selectedNode.@label
			   	 	 	}	
			  			
			  			this.tbPortfolioGroupSummary.pnlPortfolioGroupSummary.title = "Summary";		  			
			  			
						this.tabPortfolio.selectedIndex = 0;
						this.tabCampaign.selectedIndex = 0;
						this.tabMain.selectedIndex = 0;	
						this.tbPortfolioGroup.clear();	  			
			   		}
		   	 		
		   	 		if(selectedNode.@type == "portfolio"){	
			   			wsCampaignService.getAllCampaigns.send(parseInt(selectedNode.@portfolioId),"macys");
						this.currentPortfolioId = parseInt(selectedNode.@portfolioId);
		   	 			wsPortfolioService.getPortfolioList.send(parseInt(selectedNode.@portfolioId),"macys");  			   			
			   			showPortfolioTab();	   			
			   			this.tbPortfolioSummary.btnSavePortfolio.enabled=false; 
			   			
			   			//this.tbPortfolioGroupSummary.btnCancelPortfolioGroup.enabled = false;	
			   			
			   			this.isFromPortfolioNode = true;
			   			this.getPathToNode(selectedNode);
			   			
						this.lblBreadCrumb.text = "SEMA > " + XML(selectedNode.parent()).@label + " > " + selectedNode.@label;	
			   	 		if((this.currentPortfolioName != selectedNode.@label) || (this.currentPortfolioName == "")){
			   	 	 		
			   	 	 		this.currentPortfolioName == selectedNode.@label
			   	 	 	}
			   	 	 	if((this.currentPortfolioGroupName!= XML(selectedNode.parent()).@label) || (this.currentPortfolioGroupName == "")){
			   	 	 		
			   	 	 		this.currentPortfolioGroupName == XML(selectedNode.parent()).@label
			   	 	 	}
			   			//this.tbPortfolioSummary.pnlPortfolioSummary.title = "Summary";
			   			//wsCampaignService.getAllCampaigns.send(parseInt(selectedNode.@portfolioId));		   			
			   			
			   		
			   			enablePortfolioSummaryComponents(false); 			
			   			
			  			showHidePortfolioButtons(true,true,false,false);
			  				
						this.tabCampaign.selectedIndex = 0;
						this.tabMain.selectedIndex = 0;	
			  				
						this.tabPortfolioGroup.selectedIndex = 0;
						
			  			this.tbPortfolioAdCampaign.clear();
			   		}
			   	
			   		if(selectedNode.@type == "campaign")
			   		{		
		   				// Check to see if we have an item in the clipboard
	   					var token:ReplicateToken = model.replicationModel.retrieve(ReplicateToken.kAdGroup);
	   					if (token)
	   					{
			   				if (token.sourceId && token.sourceType == ReplicateToken.kAdGroup ) 
			   				{
			   					token.targetId = Number(selectedNode.@campaignID);
			   					token.targetName = selectedNode.@label;
			   					token.targetType = ReplicateToken.kAdCampaign;
			   					tbCampaignAdGroup.setPasteEnabled(true);
			   				} 
			   				else 
			   				{
			   					tbCampaignAdGroup.setPasteEnabled(false);
			   				}
			   			}
		   				this.tbCampaignSummary.cmbAccount.visible = false;
		   	 			this.tbCampaignSummary.lblAccount.visible = true;
			   	   		
			   			try
			   			{
			   				wsCampaignService.getCampaignList.send(parseInt(selectedNode.@campaignID),"macys");			   		
			   				wsAdGroup.getAllAdGroups.send(parseInt(selectedNode.@campaignID));
				   			
				   			if(this.tabCampaign.selectedIndex == 1){				   				
				   				this.tbCampaignAdGroup.enabled = true;	
				   				this.tbCampaignAdGroup.replicate.btnCopyGrps1.enabled = false;
				   			}			   						   		
				   			
				   			this.tabPortfolio.visible = false;	
				   			this.keywordTool.visible = false;
				   			this.tabPortfolioGroup.visible = false;	   	
				   					   				
				   			this.tabSEMA.visible = false; 	
				   			this.tbCampaignSummary.btnAddAdGruop.enabled = true;
				   			this.lblEditMSG.text="";	   				
				   				   
				   			if(this.tabCampaign.selectedIndex == 0){
				   				
				   				wsCampaignStatService.getCampaignStats.send(parseInt(selectedNode.@campaignID),"Yesterday");	
				   				   					   			
				   			}
							
				   			this.isFromCampaignNode = true;
				   			this.getPathToNode(selectedNode);
				   			this.lblBreadCrumb.text = "SEMA > " + this.currentPortfolioGroupName + " > " + XML(selectedNode.parent()).@label + " > " + selectedNode.@label;	
				   	 	 	this.tbCampaignSummary.pnlCampaignSummary.title = "Summary";			
				   	 	 	
				   	 	 	this.tbCampaignSummary.lblCampaignExist.visible = false;
					  		this.tbCampaignSummary.cmbAccount.enabled = false;	
					  		showHideCampaignSummaryButtons(true,true,false,false);	
					  		disableCampaignSummary();
					  		disableCampaignSummaryComponents();
			   			}
			   			catch(err : Error)
			   			{
			   				Alert.show(err.message, "selectedNode.@type == campaign");
			   			}
			   				
			   			//this.isAddingCampaign = false;
			   			//this.isAddingAdGroup = false;
			   			
			   			
                                                showCampaignSummaryComponents();
			   			this.tbCampaignAdGroup.enabled = true;
			   			disableCampaignSummaryComponents();
			   			this.tbCampaignSummary.btnEditCampaignSummary.enabled = true;	
			   			
			   			
			   			
						this.tabPortfolioGroup.selectedIndex = 0;
						this.tabPortfolio.selectedIndex = 0;
						this.tabMain.selectedIndex = 0;	
						this.tbCampaignAdGroup.clear();
			  		}
			  				  		
		   		if(selectedNode.@type == "adGroup"){
   					tbAdCopies.copyEnabled = false;
		   			tbKeywords.copyEnabled = false;
	   				var token:ReplicateToken;
   					var currentTab:UIComponent;
   	
   					if (tabMain != null && tabMain.selectedChild != null)
   					{
   						currentTab = UIComponent(tabMain.selectedChild);
   					}
   					
   					if (currentTab.id == "tbAdCopies") {
   						token = model.replicationModel.retrieve(ReplicateToken.kAdCopy);
   					} else if (currentTab.id == "tbKeywords") {
   						token = model.replicationModel.retrieve(ReplicateToken.kAdKeyword);
   					}
   					
	   				// Check to see if we actually have an item in the clipboard
	   				if (token)
	   				{
	   					token.targetType = ReplicateToken.kAdGroup;
		   				token.targetId = selectedNode.@groupID;
		   				token.targetName = selectedNode.@label;
		   				if (token.sourceId && 
		   				    token.sourceType == ReplicateToken.kAdCopy) 
		   				{
		   					tbAdCopies.setPasteEnabled(true);
		   				} 
		   				else if (token.sourceId && 
		   				         token.sourceType == ReplicateToken.kAdKeyword)
		   				{
		   					 tbKeywords.setPasteEnabled(true);
		   				}
		   				else
		   				{
		   					tbAdCopies.setPasteEnabled(false);
		   					tbKeywords.setPasteEnabled(false);
		   				}
		   			}
		   			
	   				
		   			this.isFromAdGroupNode = true;
		   			this.getPathToNode(selectedNode);
		   			this.lblBreadCrumb.text = "SEMA > " + this.currentPortfolioGroupName + " > " + this.currentPortfolioName + " > "+ XML(selectedNode.parent()).@label + " > " + selectedNode.@label;
		   	 	 	this.tbAdGroup.pnlAdGroupSummary.title = "Summary";		   	 	 	
		   	 	 	currentAdGroupName = selectedNode.@label;
		   	 	 	disableAdGroupSummaryComponents();
		   	 	 
		   	 	 	showHideAdGroupSummaryButtons(true,false,false);
		   	 	 	   		
			   		this.tbAdGroup.lblVendorStatusRes.visible = true;
			   		this.tbAdGroup.lblVendorStatus.visible = true;
			   		
			   		//this.tbAdGroup.dtAdGroupPuDate.selectedDate = null;
			   		
			   		this.tabPortfolioGroup.selectedIndex = 0;
					this.tabPortfolio.selectedIndex = 0;
					this.tabCampaign.selectedIndex = 0;
						
		   		}			   	
			   		   	 
		   	 	if(this.tabMain.selectedIndex == 0){	//AdGroup Summary Tab		   	 				   	 	
		   	 		if (selectedNode.@type == "portfolioGroup"){
		   	 			
			   	 		this.disableSummaryControls();	
			   	 		this.clearSummaryControls(); 
			   	 		this.tbKeywords.enabled = false;
			   	 		this.tbAdCopies.enabled = false;
			   	 		this.lblEditMSG.text="";
			   	 		this.tbPortfolioGroup.clear();
		   	 		}		   	 				   	 	
			   	 	else if(selectedNode.@type == "portfolio"){				   	 		
			   	 		this.disableSummaryControls();	
			   	 		this.clearSummaryControls(); 
			   	 		this.tbKeywords.enabled = false;
			   	 		this.tbAdCopies.enabled = false;		   	   	 		
			   	 		
			   	 		showPortfolioTab();
			   	 	   	this.tbPortfolioAdCampaign.clear();
			   	 	}
			   	 	else if(selectedNode.@type == "campaign"){				   	 		
			   	 		this.tabPortfolio.visible = false;
			   	 		this.keywordTool.visible = false;
			   	 		this.tabPortfolioGroup.visible = false;
			   	 		this.tabSEMA.visible = false; 
			   	 		if(selectedNode.@label!=null){
			   	 			this.currentlyEditing = selectedNode.@label;
			   	 		}
			   	 		
			   	 		this.currentCampaignId = selectedNode.@campaignID;
			   	 		//this.disableSummaryControls();
			   	 		this.clearSummaryControls();  
			   	 		this.tbKeywords.enabled = false;
			   	 		this.tbAdCopies.enabled = false;	 		
			   	 					   	 		
			   	 		enableCampaignTab();
			   	 		//enableCampaignSummaryFields();
			   	 		//this.tbCampaignSummary.btnSaveCampaign.enabled = false;
			   	 		this.lblEditMSG.text="";			   	 					   	 	
			   	 		 
		  				this.tbCampaignSummary.btnScheduleCampaign.enabled = false;	
		  				this.tbCampaignSummary.btnCancelScheduleCampaign.visible = false;
		  				this.tbCampaignSummary.dtEffectiveDate.enabled = false;
  						this.tbCampaignSummary.dtExpirationDate.enabled = false;
		  				this.tbCampaignAdGroup.clear();
			   	 	}
			   	 	else if(selectedNode.@type == "adGroup"){
			   	 		tbAdCopies.copyEnabled = false;
		   				tbKeywords.copyEnabled = false;				   	 		
			   	 		//this.lblEditMSG.text = "You are editing : " + selectedNode.@label;
			   	 		this.enableSummaryControls();
			   	 		
			   	 		 this.tbAdGroup.cmbAdGroupStatus.enabled = false;	
			   	 		this.tbKeywords.enabled = true;
			   	 		this.tbAdCopies.enabled = true;
			   	 		this.tbAdGroup.lblPublishedDate.visible = true;
			   	 		this.tbAdGroup.lblPubDate.visible = true;
			   	 		//disabling save button in the AdGruop summary
			   	 		//this.tbAdGroup.btnSaveAdGroup.enabled = false;
			   	 		
			   	 		enableMainTab();
			   	 		this.lblEditMSG.text = "";
			   	 		this.tbAdGroup.lblPublishedDate.visible = true; 
			   	 		//this.tbAdGroup.dtAdGroupPuDate.enabled = false;
			   	 		
			   	 		/* try {
			   	 			this.tbAdCopies.adsListData.removeAll();
			   	 			this.tbAdCopies.adsListData.refresh();
			   	 		} catch (e:Error) {			   	 		
			   	 		}  */
			   	 		
			   	 		try {			   	 			
				  			var adgId : int;
				  			adgId =  parseInt(selectedNode.@groupID); 
				  			wsAdGroup.getAdGroupList.send(adgId);	
				  			 			
				  		}catch(e:Error) {
				  			Alert.show(e.message + " Error on GetAdGroupClick");
				  		} 		   	 						  		
				   	 }	
			   	 }
			   	 else if(this.tabMain.selectedIndex == 1){	//Keywords Tab
			   	 	displayDisabledCampaignTab(selectedNode);
			   	 	this.clearKeyWordsControls();			   	 	
			   	 	disableKeywordsComponents();
			   	 	this.tbKeywords.grdKeywords.enabled = true;
			   	 	
			   	 	if(selectedNode!= null)  {	
			   	 		
			   	 	if(selectedNode.@type == "portfolioGroup"){			   	 			
			   			showPortfolioGroupTab();	
			   			wsPortfolioGroupService.getPortfolioGroupList.send(parseInt(selectedNode.@portfolioGroupId),"macys"); 						
						wsPortfolioService.getAllPortfolios.send(selectedNode.@portfolioGroupId);  
						
						//this.tabSEMA.visible = false;   
						this.keywordTool.visible = false;
			   			this.lblEditMSG.text="";
			   			this.tbPortfolioGroup.clear();	 			
			   		}	
			   	 	
			   	 	
			   	 	else if(selectedNode.@type == "portfolio"){				   	 		
			   	 		
			   	 			   	   	 		
			   	 		
			   	 		showPortfolioTab();
			   	 	   	this.tbPortfolioAdCampaign.clear();
			   	 	}
			   	 	if(selectedNode.@type == "adGroup")
			   	 	{	
			   	 		tbAdCopies.copyEnabled = false;
		   				tbKeywords.copyEnabled = false;
			   	 		enableMainTab();			   	 				   	 	
			   	 		var selectedAdGroupId : int = parseInt(selectedNode.@groupID);										   	 		
			   	 		
			   	 		this.lblEditMSG.text = "";
			   	 		
			   	 		
			   	 		this.currentGroupId = selectedAdGroupId;			   	 		
						
						try{	
				  			wsAdKeywordService.getAllAdKeywords.send(selectedAdGroupId);		  			
				  		}
				  		catch(e:Error){		
				  			Alert.show(e.message, "Error sending get keywords request!");
				  		}					  						  					  																													   	 					   
				  		
				  		showHideKeywordButtons(true,false,false,false);					  						  					  																													   	 					   
				  		this.tbKeywords.lblPublishedDate.text = "";				  						  					  																													   	 					   
				  		//this.tbKeywords.txtVEReq.text = "";	
				  				  						  					  																													   	 					   
		    		
					try {			   	 			
			  			
			  			
			  			wsAdGroup.getAdGroupList.send(selectedAdGroupId);	
			  			 			
			  		}catch(e:Error) {
			  			Alert.show(e.message + " Error on GetAdGroupClick");
			  		} 
			  			  						  			
				  				  						  					  																													   	 					   
			   	 	} 
			   	 		
			   	   }		   	 	   	 	
			   	 }
			   	 else if(this.tabMain.selectedIndex == 2){		//AdCopy Tab	
			   	 	if(adCopiesCreated){
			   	 	this.clearAdCopyFields();
			   	 	   
			   	 	} 
			   	 		 			
                    displayDisabledCampaignTab(selectedNode);	 			
			   	 	
			   	 	if(selectedNode.@type == "portfolioGroup"){			   	 			
			   			showPortfolioGroupTab();	
			   			wsPortfolioGroupService.getPortfolioGroupList.send(parseInt(selectedNode.@portfolioGroupId),"macys"); 						
						wsPortfolioService.getAllPortfolios.send(selectedNode.@portfolioGroupId);  
						
						this.tabSEMA.visible = false;   
						this.keywordTool.visible = false;
			   			this.lblEditMSG.text="";	
			   			this.tbPortfolioGroup.clear();	 		
			   		} 
			   	 	
			   	 	if(selectedNode.@type.toString() == "adGroup"){	
			   	 		tbAdCopies.copyEnabled = false;
		   		tbKeywords.copyEnabled = false;
			   	 		enableMainTab();
			   	 		var i : int;
			   	 		var selectedGroupId : int 
			   	 			
			   	 		if(selectedNode.@groupID != null){			   	 			
			   	 			if(adCopiesCreated){
			   	 				enableAdCopyFields(false);
			   	 			}
			   	 			selectedGroupId = parseInt(selectedNode.@groupID);							
			   	 			this.currentAdGroupId = selectedGroupId;
			   	 		}			   	 					   	 				   	 
			   	 		
			   	 		this.lblEditMSG.text = "";
			   	 		
			   	 		if(adCopiesCreated){
			   	 			this.tbAdCopies.cmbAdCopyStatus.selectedIndex = 0;
							this.tbAdCopies.grdAdCopies.selectedItem = null;
			   	 		}
						
						try{		  					  					  				             
				  		  	wsAdService.getAllAdCopy.send(selectedGroupId);		  			
				  		}
				  		catch(e:Error){		
				  			Alert.show(e.message, "Error sending get Ad Copy request!");
				  		}																																				   	 					   
				  		 
				       	showHideAdCopyButtons(true,false,false,false);		
				       	this.tbAdCopies.grdAdCopies.enabled = true;																																	   	 					   
				       	
		  				this.tbAdCopies.btnSchedule.visible = false;	
		  				this.tbAdCopies.btnCancelSchedule.visible = false;	
		  				showAdCopyScheduleComponents(false);																																   	 					   
			   	 	} 
			   	 	 	
			   	 }
			   	 }			   	   	 	   	 	
		   	 }
		   	 catch(e:Error){	
		   	 	trace(e.getStackTrace());
		   	 	Alert.show(e.message + "TreeClick");	   	 
		   	 }		   		   	
		   }
		   
		   /**
			 * Function to enable Ad Copy Fields
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function enableAdCopyFields(enable : Boolean) : void {
		   	
			   	this.tbAdCopies.txtHeadline.editable = enable;
				this.tbAdCopies.txtDescOne.editable = enable;
				this.tbAdCopies.txtDescTwo.editable = enable;
				this.tbAdCopies.txtDispUrl.editable = enable;
				this.tbAdCopies.txtDestUrl.editable = enable;
				this.tbAdCopies.cmbAdCopyType.enabled = enable;
				this.tbAdCopies.cmbAdCopyStatus.enabled = enable;	   	
			   	this.tbAdCopies.dtEffectiveDate.enabled = enable;	   	
			   	this.tbAdCopies.dtExpirationDate.enabled = enable;
			   	this.tbAdCopies.txtVendorPolicyExcemption.enabled = enable; 
		   }		   
		   
		   /**
			 * Function to clear Ad Copy Fields
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function clearAdCopyFields() : void{
		   	
			   	this.tbAdCopies.txtHeadline.text = "";
				this.tbAdCopies.txtDescOne.text = "";
				this.tbAdCopies.txtDescTwo.text = "";
				this.tbAdCopies.txtDispUrl.text = "";
				this.tbAdCopies.txtDestUrl.text = "";
				
				this.tbAdCopies.txtDisapproved.text = "";
			    
			    //this.tbAdCopies.chkAdCopyVendorPolicyEX.selected = false;	
			    this.tbAdCopies.txtVendorPolicyExcemption.text = ""; 
			    this.tbAdCopies.adsListData = null;			    	
		   }
		   
		   
		   /**
			 * Function to validate whether a given date is older than current date
			 * 
			 * @author Zone24x7
			 * @param  date
			 * @return
			 */
		   private function validateOlderDate(date:Date, isAdding : Boolean):Boolean{
		   	
		   		var currentDate : Date = new Date();
		   		if(isAdding){
				if((date.getFullYear() > currentDate.getFullYear())||((date.getFullYear() == currentDate.getFullYear())&&(date.getMonth() > currentDate.getMonth()))||((date.getFullYear() == currentDate.getFullYear())&&(date.getMonth() == currentDate.getMonth())&&(date.getDate() >= currentDate.getDate()))){
	         		return true;
	         	}
	         	else{
	         		return false;
	         	}
		   		}else{
		         		return true;
		        }					
		   }
		   
		   /**
			 * Function to save Ad Group
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onClickSaveAdGroup(event : Event) : void {		   		
			   	try{	
			   		var adGroup : AdGroup = new AdGroup();
			   		this.newNodeName = this.tbAdGroup.txtAdGroupName.text;
			   		
			   		var statusTypeObj : SemaStatusType = new SemaStatusType();
				    			   		
			   		try{	
		  				if(!isAddingAdGroup){		  				 							  						  			
		  					adGroup.Id =  this.currentAdGroupId;
		  					adGroup.ModifiedDate = this.currentAdGroupModifiedDate;//p139dak: for existing ad groups, UI is supposed to send the timestamp of the ad group being edited		  					
		  				}else{
		  					adGroup.ModifiedDate = new Date();//p139dak: for new ad groups, UI is supposed to send current timestamp
		  				}
		  				
		  				adGroup.PublishDate = new Date();
		  				
		  				adGroup.CampaignId = this.currentCampaignId; 
					    adGroup.AdGroupName = tbAdGroup.txtAdGroupName.text;
				    	   		
					    this.currentAdGroupName = tbAdGroup.txtAdGroupName.text;
				    	   		
					    statusTypeObj._SemaStatusType = tbAdGroup.cmbAdGroupStatus.selectedLabel;
				    	adGroup.Status = statusTypeObj;
				    	
					    
					    adGroup.DefaultMaxCPC = new Number(parseFloat(tbAdGroup.txtAdGroupMaxCPC.text));
					    adGroup.CreatedDate = new Date();
					    
					    adGroup.CreatedBy = "user";
					    adGroup.ModifiedBy = "user";
					    adGroup.AdVendorId = new Number(1);
					    adGroup.AdVendorStatus = "Active";
					    
					    adGroup.DefaultDestinationUrl = tbAdGroup.txtAdGroupURL.text;
					    		  			   
		  				if((tbAdGroup.txtAdGroupMaxCPC.text != null)&&(StringUtil.trim(tbAdGroup.txtAdGroupMaxCPC.text).length!=0)&&
		  				   		(tbAdGroup.txtAdGroupURL.text!=null) && (StringUtil.trim(tbAdGroup.txtAdGroupURL.text).length != 0) && 
		  				   		(tbAdGroup.txtAdGroupName.text!=null)&&(StringUtil.trim(tbAdGroup.txtAdGroupName.text).length!= 0))
		  				{         				         	
				         	if(validateURL(tbAdGroup.txtAdGroupURL.text)){
				         		wsAdGroup.putAdGroup.send(adGroup);
						    } else {
						    	this.tbAdGroup.txtAdGroupURL.setFocus();
						    	Alert.show("Please add a valid URL");
						    }	         	
				            this.tbAdGroup.btnEditAdGroup.enabled = true;
				        }
				        else
				        {
				        	if(StringUtil.trim(this.tbAdGroup.txtAdGroupName.text) == "")
	         				{
	             				this.tbAdGroup.txtAdGroupName.setFocus();               
	         				}
	         				else if(StringUtil.trim(this.tbAdGroup.txtAdGroupURL.text) == "")
	         				{
	             				this.tbAdGroup.txtAdGroupURL.setFocus();          
	         				}else if(StringUtil.trim(this.tbAdGroup.txtAdGroupMaxCPC.text) == "")
	         				{
	             				this.tbAdGroup.txtAdGroupMaxCPC.setFocus();          
	         				}
	         				Alert.show("Please fill all required information before saving!");
				        }
				        
				        adgroupDestURL = tbAdGroup.txtAdGroupURL.text;	
				        tbAdGroup.txtAdGroupURL.text = "";			        
						tbAdGroup.txtAdGroupURL.setFocus();	
						tbAdGroup.txtAdGroupURL.text = adgroupDestURL;	
			  		}
			  		catch (e1: Error){
			  			Alert.show(e1.message);
			  		}			  					  				  					  					  			  					  		
			   	}catch(e2:Error){		
			   		Alert.show(e2.message);   	
			   	}
		   }
		   
		   /**
			 * Function to Add Keyword
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onClickAddKeyword(event : Event) : void {
			   	try{	
                    this.lblEditMSG.text = "";
			   		this.enableKeyWordsControls();			   		
			   		this.isAddingKeyword = true;
			   		this.currentKeywordId = 0;
			   		this.tbKeywords.txtKWText.setFocus();  
			   		try {			
			   			if(customTreeView.treeList.selectedItem.@groupID != null){
			   				var adgId : int = parseInt(customTreeView.treeList.selectedItem.@groupID); 
			  				wsAdGroup.getAdGroupList.send(adgId);	
			   			}					  							  			 		
			  		}catch(e:Error) {
			  			Alert.show(e.message + " Error on Get Ad Group URL");
			  		}
			   		
			   		var keyWordObj : Statistics = new Statistics();
			   		var statusTypeObj : SemaStatusType = new SemaStatusType();
				    
			   		keyWordObj.Id = new Number(0);
			   		keyWordObj.VendorId = new Number(1);
			   		keyWordObj.AdGroupId = this.currentAdGroupId;
			   		
			   		statusTypeObj._SemaStatusType = "Paused";
				    keyWordObj.Status = statusTypeObj;
				    
				    keyWordObj.AdVendorStatus = "Unknown";
				    
			   		keyWordObj.MatchType = new MatchType();
			   		keyWordObj.MatchType._MatchType = "Broad";		   		
			   		keyWordObj.KeywordText = "Keyword";
			   		keyWordObj.DestinationURL = this.currentAdGroupDestURL;
			   		keyWordObj.MaxCPC = new Number(0.0);
			   		keyWordObj.MinCPC = new Number(0.0);
			   		keyWordObj.NegativeMatch = new Boolean(false);
			   		keyWordObj.VendorPolicyExemptionRequest = "";
			   		//keyWordObj.PublishedDate = sendUTCDate(new Date());
			   		keyWordObj.CreatedDate = new Date();
			   		keyWordObj.ModifiedDate = new Date();
			   		keyWordObj.PublishedDate = new Date();
			   		
					this.tbKeywords.lblPublishedDate.visible = true;
					this.tbKeywords.lblPubDt.visible = true;
			   		this.tbKeywords.lblPublishedDate.text = (keyWordObj.PublishedDate.getMonth()+1).toString() + " / " + keyWordObj.PublishedDate.getDate().toString()+ " / " + keyWordObj.PublishedDate.getFullYear().toString();
			   		keyWordObj.CreatedBy = "user";
			   		keyWordObj.ModifiedBy = "user";
			   		
			   		adKeywordsList.addItem(keyWordObj); 
	           				
	           		enableKeywordsComponents();		
	           		this.tbKeywords.txtKWText.enabled = true;
	           		
	           		this.tbKeywords.keywordsListData = this.adKeywordsList;
	           		
	           		//focusing the newly added keyword
					this.tbKeywords.grdKeywords.selectedItem = keyWordObj;		
					onKeywordsGridItemClick(event);
					
					this.tbKeywords.txtKWText.text = "";
					this.tbKeywords.txtKWMaxCPC.text = "";
					this.tbKeywords.txtKWMinCPC.text = "";
					
					
					this.tbKeywords.txtVEReq.text = "";	
					//this.tbAdCopies.btnSchedule.enabled = true;
										
					this.tbKeywords.txtKWDestURL.text = this.currentAdGroupDestURL;
					this.tbKeywords.cmbKWMatchType.selectedIndex = 0;
	   	 	  		this.tbKeywords.cmbKWStatus.selectedIndex = 1;	
	   	 	   		this.tbKeywords.chkKWNegativeMatch.selected = false;	   	 	   	
	   	 	   		
	   	 	   		
	   	 	   		this.lblEditMSG.text = "You are adding a new Keyword";																									   	 					   	 
			   				   	 			   					   					   					   		   	
			   		keyWordObj.Clicks = 0;
					keyWordObj.Impressions = 0;
					keyWordObj.Cost = 0;																									   	 					   	 
			   		keyWordObj.CTR = 0;
					keyWordObj.CPM = 0;
					keyWordObj.CPC = 0;		   	 			   					   					   					   		   	
					
					
					showHideKeywordButtons(false,false,true,true);
					this.tbKeywords.replicate.btnCopyGrps1.enabled  = false;	
					this.tbKeywords.grdKeywords.scrollToIndex(this.adKeywordsList.length - 1);	
					this.tbKeywords.grdKeywords.enabled = false;	   	 			   					   					   					   		   	
					
					this.tbKeywords.lblPublishedDate.visible = false;
					this.tbKeywords.lblPubDt.visible = false;	   	 			   					   					   					   		   	
			   	}
			   	catch(e:Error){		   		
			   	}		   	
		   }
		   
		   
		   
		   /**
			 * Function to track Tab Index Change event 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
		   private function onTabIndexChange(event : Event) : void {
		   	try{		   				   		
		   		if(customTreeView.treeList.selectedItem != null){
		   			this.populateTabs(event);
		   		}
		   		tbAdCopies.copyEnabled = false;
		   		tbKeywords.copyEnabled = false;
		   	}
		   	catch(e:Event){		   		
		   	}
		  }	
		   	   
		   
		   
		  /**
			 * Function to clear Keywords Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		  private function clearKeyWordsControls() : void {		      
		       this.tbKeywords.txtKWText.text = "";  
	   	 	   this.tbKeywords.txtKWMaxCPC.text = "";
	   	 	   this.tbKeywords.txtKWMinCPC.text = "";  
	   	 	   this.tbKeywords.txtKWDestURL.text = "";	
	   	 	   this.tbKeywords.cmbKWMatchType.selectedIndex = 0;
	   	 	   this.tbKeywords.cmbKWStatus.selectedIndex = 0;	
	   	 	   this.tbKeywords.chkKWNegativeMatch.selected = false;	   	 	   	
	   	 	   this.tbKeywords.keywordsListData = null;   
	   	 	   this.tbKeywords.txtVEReq.text = "";	    			       
		  }
		   
		   
		   
		   /**
			 * Function to disable Keywords Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */   
		  private function disableKeyWordsControls() : void{		      
		       this.tbKeywords.txtKWText.enabled = false;  
	   	 	   this.tbKeywords.txtKWMaxCPC.enabled = false;
	   	 	   this.tbKeywords.txtKWMinCPC.enabled = false;  
	   	 	   this.tbKeywords.txtKWDestURL.enabled = false;	
	   	 	   this.tbKeywords.cmbKWMatchType.enabled = false;
	   	 	   this.tbKeywords.cmbKWStatus.enabled = false;	
	   	 	   	   	 	   		   	 	          			      
		  }
		   
		  
		     /**
			 * Function to disable the editability of Keywords components 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function disableKeywordsComponents():void{
		   
		   		this.tbKeywords.txtKWText.editable = false;  
	   	 	   	this.tbKeywords.txtKWMaxCPC.editable = false;
	   	 	   	this.tbKeywords.txtKWMinCPC.editable = false;  
	   	 	   	this.tbKeywords.txtKWDestURL.editable = false;
	   	 	   	this.tbKeywords.txtVEReq.editable = false;	
	   	 	   	this.tbKeywords.txtKWText.enabled = true;  
	   	 	   	this.tbKeywords.txtKWMaxCPC.enabled = true;
	   	 	   	this.tbKeywords.txtKWMinCPC.enabled = false;  
	   	 	   	this.tbKeywords.txtKWDestURL.enabled = true;
	   	 	   	this.tbKeywords.txtVEReq.enabled = true;	
	   	 	   	this.tbKeywords.cmbKWMatchType.enabled = false;
	   	 	   	this.tbKeywords.cmbKWStatus.enabled = false;	
	   	 	   	this.tbKeywords.chkKWNegativeMatch.enabled = false;		   	 	   	
	   	 	    this.tbKeywords.replicate.btnCopyGrps1.enabled  = false;		
		   }
		   
		   /**
			 * Function to enable the editability of Keywords components 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */
		   private function enableKeywordsComponents():void
		   {		   
		   		this.tbKeywords.txtKWText.editable = true;  
	   	 	   	this.tbKeywords.txtKWMaxCPC.editable = true;
	   	 	   	this.tbKeywords.txtKWMinCPC.enabled = true;  
	   	 	   	this.tbKeywords.txtKWMinCPC.editable = false;
	   	 	   	this.tbKeywords.txtKWDestURL.editable = true;	
	   	 	   	this.tbKeywords.txtVEReq.editable = true;	
	   	 	   	this.tbKeywords.cmbKWMatchType.enabled = true;
	   	 	   	this.tbKeywords.cmbKWStatus.enabled = true;	
	   	 	   	
	   	 	  	//p139dak: 04/15/2008: SEMA-315: NegativeMatch cannot be changed. Ever. And cannot cause Split,
	   	 	  	//so do not do anything with the negative match checkbox here
		   }
		   
		   /**
			 * Function to enable ad group summary Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 
		  private function enableSummaryControls() : void{
		       this.tbAdGroup.txtAdGroupMaxCPC.enabled = true;
		       this.tbAdGroup.txtAdGroupName.enabled = true;
		       this.tbAdGroup.txtAdGroupURL.enabled = true;
		       this.tbAdGroup.cmbAdGroupStatus.enabled = true;		       		      
		  }
     
     
     
     	   /**
			 * Function to disable ad group summary Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 
		  private function disableSummaryControls() : void {		      
		       
		       this.tbAdGroup.txtAdGroupMaxCPC.enabled = false;
		       this.tbAdGroup.txtAdGroupName.enabled = false;
		       this.tbAdGroup.txtAdGroupURL.enabled = false;
		       this.tbAdGroup.cmbAdGroupStatus.enabled = false;		          
		  }		   
		  
		  
		    /**
			 * Function to disable editablity of summary Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 
		  private function disableCampaignSummaryComponents() : void {
       		enableCampaignSummaryComponents(false);
		  }
		   
		    /**
			 * Function to enable editablity of summary Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 
		  private function enableCampaignSummaryComponents(isEnable:Boolean) : void {
				this.tbCampaignSummary.txtCampaignName.editable=isEnable;
				this.tbCampaignSummary.txtDailyBudget.editable=isEnable;
				this.tbCampaignSummary.dtEffectiveDate.enabled=isEnable;
				this.tbCampaignSummary.dtExpirationDate.enabled=isEnable;
				this.tbCampaignSummary.cmbCampaignStatus.enabled=isEnable;	
				this.tbCampaignSummary.radioRotate.enabled=isEnable;
				this.tbCampaignSummary.radioOptimize.enabled=isEnable;          
		  }
		  
		  
		     /**
			 * Function to hide stats summary Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 
		  private function hideCampaignSummaryComponents() : void {
				    
				this.tbCampaignSummary.lblClicks.visible = false;   
				this.tbCampaignSummary.lblClicksCMP.visible = false;
				this.tbCampaignSummary.lblImpressions.visible = false;
				this.tbCampaignSummary.lblImpressionsCMP.visible = false;
				this.tbCampaignSummary.lblCost.visible = false;
				this.tbCampaignSummary.lblCostCMP.visible = false;
				this.tbCampaignSummary.lblCPM.visible = false;
				this.tbCampaignSummary.lblCTR.visible = false;
				this.tbCampaignSummary.lblClickThruRateCMP.visible = false;
				this.tbCampaignSummary.lblAvgCPC.visible = false;
				this.tbCampaignSummary.lblAverageCPCCMP.visible = false;
				this.tbCampaignSummary.lblTextCPM.visible = false;
				//this.tbCampaignSummary.lblActualStatus.visible = false;
				this.tbCampaignSummary.lblActualStatusCMP.visible = false;
				//this.tbCampaignSummary.lblAdRunOption.visible = false;
				//this.tbCampaignSummary.radioRotate.visible = false;
				//this.tbCampaignSummary.radioOptimize.visible = false;
				this.tbCampaignSummary.lblVendorSt.visible = false;
				this.tbCampaignSummary.lblVendorStatus.visible = false;
				this.tbCampaignSummary.lblPubDate.visible = false;
				this.tbCampaignSummary.dtCamSummPuDate.visible = false;
				
				this.tbCampaignSummary.lblsd.visible = false;
				//this.tbCampaignSummary.dtEffectiveDate1.visible = false;
				//this.tbCampaignSummary.dtEffectiveTime1.visible = false;
				this.tbCampaignSummary.lbled.visible = false;
				//this.tbCampaignSummary.dtExpirationDate1.visible = false;
				//this.tbCampaignSummary.dtExpirationTime1.visible = false;  
				
				this.tbCampaignSummary.cnvCampaignStats.visible = false; 
		  }
		  
		   /**
			 * Function to show stats summary Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 
		  private function showCampaignSummaryComponents() : void {
				    
				this.tbCampaignSummary.lblClicks.visible = true;   
				this.tbCampaignSummary.lblClicksCMP.visible = true;
				this.tbCampaignSummary.lblImpressions.visible = true;
				this.tbCampaignSummary.lblImpressionsCMP.visible = true;
				this.tbCampaignSummary.lblCost.visible = true;
				this.tbCampaignSummary.lblCostCMP.visible = true;
				this.tbCampaignSummary.lblCPM.visible = true;
				this.tbCampaignSummary.lblCTR.visible = true;
				this.tbCampaignSummary.lblClickThruRateCMP.visible = true;
				this.tbCampaignSummary.lblAvgCPC.visible = true;
				this.tbCampaignSummary.lblAverageCPCCMP.visible = true;
				this.tbCampaignSummary.lblTextCPM.visible = true;
				//this.tbCampaignSummary.lblActualStatus.visible = true;
				this.tbCampaignSummary.lblActualStatusCMP.visible = true;
				//this.tbCampaignSummary.lblAdRunOption.visible = true;
				//this.tbCampaignSummary.radioRotate.visible = true;
				//this.tbCampaignSummary.radioOptimize.visible = true;
				this.tbCampaignSummary.lblVendorSt.visible = true;
				this.tbCampaignSummary.lblVendorStatus.visible = true;
				this.tbCampaignSummary.lblPubDate.visible = true;
				this.tbCampaignSummary.dtCamSummPuDate.visible = true;
		
				//this.tbCampaignSummary.lblsd.visible = true;
				//this.tbCampaignSummary.dtEffectiveDate1.visible = true;
				//this.tbCampaignSummary.dtEffectiveTime1.visible = true;
				//this.tbCampaignSummary.lbled.visible = true;
				//this.tbCampaignSummary.dtExpirationDate1.visible = true;
				//this.tbCampaignSummary.dtExpirationTime1.visible = true;  
				
				this.tbCampaignSummary.cnvCampaignStats.visible = true;  
		  }
		  
		  
		   /**
			 * Function to clear ad group summary Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 		
		  private function clearSummaryControls() : void {		      
		       this.tbAdGroup.txtAdGroupMaxCPC.text = "";
		       this.tbAdGroup.txtAdGroupName.text = "";
		       this.tbAdGroup.txtAdGroupURL.text = "";
		       this.tbAdGroup.cmbAdGroupStatus.selectedIndex = 0;		       			       
		  }
		     
		  
		  
		   /**
			 * Function to enable keywords Controls 
			 * 
			 * @author Zone24x7
			 * @param  
			 * @return
			 */ 
		  private function enableKeyWordsControls() : void {		      
		       this.tbKeywords.txtKWText.enabled = true;  
	   	 	   this.tbKeywords.txtKWMaxCPC.enabled = true;
	   	 	   this.tbKeywords.txtKWMinCPC.enabled = false;  
	   	 	   this.tbKeywords.txtKWDestURL.enabled = true;	
	   	 	   this.tbKeywords.cmbKWMatchType.enabled = true;
	   	 	   this.tbKeywords.cmbKWStatus.enabled = true;	
	   	 	   //p139dak: 04/15/2008: SEMA-315: NegativeMatch cannot be changed. Ever. This is only invoked from add keyword, this is the only place where the checkbox can be enabled.                                                
	   	 	   this.tbKeywords.chkKWNegativeMatch.enabled = true;
		  }
		     		  
		   	   
		  
		  /* Web Services */	
		  
		  
		   /**
			 * Function to handle get ad group list response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */ 	
		  private function wsGetAdGroupList(event : ResultEvent) : void {	  	
		  		
		  		var wsADGResult : Object;		 		
		        try {
		        	wsADGResult = event.result as Object;
		        	
		        	if(wsADGResult != null) {
		        		
		        		this.currentAdGroupId = wsADGResult.Id;
		        		this.currentAdGroupModifiedDate = wsADGResult.ModifiedDate;//p139dak: maintain the modified date of the ad group to send back to the server
		        		
		        		tbAdGroup.txtAdGroupName.text = String(wsADGResult.AdGroupName);
		        		tbAdGroup.txtAdGroupMaxCPC.text = String(wsADGResult.DefaultMaxCPC); 
		        	
		        		currentAdGroupMaxCPC = wsADGResult.DefaultMaxCPC;
		        		
		        		//If the DefaultDestinationUrl is null, then display ""
		        		if(wsADGResult.DefaultDestinationUrl != null)
		        		{
		        		tbAdGroup.txtAdGroupURL.text = String(wsADGResult.DefaultDestinationUrl); 		        		
		        			
		        			//To be displayed in the keywords tab on click ad new keyword
		        			this.currentAdGroupDestURL = String(wsADGResult.DefaultDestinationUrl);  	
		        		}
		        		else
		        		{
		        			tbAdGroup.txtAdGroupURL.text = "";
		        			this.currentAdGroupDestURL = "";
		        		}
		        			        		
		        		//tbAdGroup.dtAdGroupPuDate.selectedDate = wsADGResult.PublishDate; 	
		        		
		        		
		        		if(	wsADGResult.PublishDate.getMonth() != 00 && wsADGResult.PublishDate.getDate() != 01 && wsADGResult.PublishDate.getFullYear() != 1901)
		        		{
		        		this.tbAdGroup.lblPublishedDate.text = (wsADGResult.PublishDate.getMonth() + 1).toString() +
		        												" / " + wsADGResult.PublishDate.getDate().toString()+
		        												" / " + wsADGResult.PublishDate.getFullYear().toString(); 
		        		}
		        		else{
		        			
		        			this.tbAdGroup.lblPublishedDate.text = "Not Published";
		        		}
		        		
		        		//Populate the Campain name combo box 
		        		var i : int;
		        		var slectedLabel : String = "";
		        		wsCampaignService.getCampaignList.send(wsADGResult.CampaignId,"macys");	
		        				   		
			   			/* for(i = 0; i < this.tbAdGroup.campaignsListData.length; i++){
             if(wsADGResult.CampaignId == this.tbAdGroup.campaignsListData[i].Id ){
              this.tbAdGroup.cmbAdGroupCampaignName.selectedIndex = i;
              slectedLabel = this.tbAdGroup.campaignsListData[i].label; 
             }
            } */
                  
                    
                
       
                                    
       					this.tbAdGroup.lblCampaignName.text = this.currentCampaignName;//this.selectedNode.parent().@label;//slectedLabel;
		                
		        		if(wsADGResult.Status == "Enabled")
		        			tbAdGroup.cmbAdGroupStatus.selectedIndex = 0;
		        		else if(wsADGResult.Status == "Paused")
		        			tbAdGroup.cmbAdGroupStatus.selectedIndex = 1;
		        		else if(wsADGResult.Status == "Deleted")
		        			tbAdGroup.cmbAdGroupStatus.selectedIndex = 2;
		        		
		        				        				        			        		   		
		        		/* if(wsADGResult.PublishDate == null)
		        		{
		        			tbAdGroup.lblPublishedDate.text = "";
		        		}
		        		else
		        		{
		        			tbAdGroup.lblPublishedDate.text = String(wsADGResult.PublishDate);
		        		} */
		        		
		        		
		        		this.tbAdGroup.lblVendorStatusRes.text = wsADGResult.AdVendorStatus;
		        				        				        			        		   		
		        	}
					else {
						this.currentAdGroupId = -1;
						this.currentAdGroupModifiedDate = null;//p139dak: maintain modified date of the ad group
		        	Alert.show("Requested Ad Group not available", "wsGetAdGroupList");
		        	}		        	
		        } catch(e:Error) {
		        	Alert.show(e.message + " wsGetAdGroupList");
		        }
	    	}
		  	
		  	
		  	
			/**
			 * Function to handle get all ad groups response from Web service
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */ 
			private function wsGetAllAdGroups(event : ResultEvent) : void
			{
				try
				{
					var wsTreeData : Object = event.result as Object;

					if (adGroupsList == null)
					{
						adGroupsList = new ArrayCollection;
					}
					else
					{
						//we want to reuse the collection reference because at the moment the 
						//grouplist view is bound to the current reference
	    				adGroupsList.removeAll();
	    			}
			        
					var AdGroupObj : Statistics;
					var statusTypeObj : SemaStatusType;

					if(wsTreeData != null)
					{
						if((customTreeView.treeList.selectedItem.@type == "campaign") && (this.tabCampaign.selectedIndex == 1))
						{
							if(wsTreeData.length > 0)
							{
								for(var i : int = 0; i < wsTreeData.length; i++)
								{
									AdGroupObj = new Statistics();
									statusTypeObj = new SemaStatusType();

									AdGroupObj.AdGroupName = wsTreeData[i].AdGroupName;
									AdGroupObj.DefaultDestinationUrl = wsTreeData[i].DefaultDestinationUrl;
									AdGroupObj.Id = wsTreeData[i].Id;

									statusTypeObj._SemaStatusType = wsTreeData[i].Status;
									AdGroupObj.Status = statusTypeObj;

									AdGroupObj.Clicks = 0;
									AdGroupObj.Cost = 0;
									AdGroupObj.Impressions = 0;
									AdGroupObj.CTR = 0;
									AdGroupObj.CPM = 0;
									AdGroupObj.CPC = 0;
									
									adGroupsList.addItem(AdGroupObj);            
								}
								this.tbCampaignAdGroup.adGroupsListData = this.adGroupsList;
							}
							else
							{
								AdGroupObj = new Statistics();
								statusTypeObj = new SemaStatusType();

								AdGroupObj.AdGroupName = wsTreeData.AdGroupName;
								AdGroupObj.DefaultDestinationUrl = wsTreeData.DefaultDestinationUrl;
								AdGroupObj.Id = wsTreeData.Id;

								statusTypeObj._SemaStatusType = wsTreeData.Status;
								AdGroupObj.Status = statusTypeObj;

								AdGroupObj.Clicks = 0;
								AdGroupObj.Cost = 0;
								AdGroupObj.Impressions = 0;
								AdGroupObj.CTR = 0;
								AdGroupObj.CPM = 0;
								AdGroupObj.CPC = 0;

								adGroupsList.addItem(AdGroupObj);
								this.tbCampaignAdGroup.adGroupsListData = this.adGroupsList;
							}
							
							if(adGroupsList != null)
                            {
                            	adGroupsList.sort = new Sort();
				            	adGroupsList.sort.fields = [new SortField("AdGroupName", true, false)];
				            	adGroupsList.refresh();
                            }  
							
							this.tbCampaignAdGroup.refreshGrid();

							//Ad Group Statistics
							var adGroupIdList : String = new String();
							var adGroupStatReq : GetAdGroupStats = new GetAdGroupStats();
							var statsType : SemaStatsType = new SemaStatsType();

							for(var i : int = 0; i < adGroupsList.length; i++)
							{
								var statObj	: Statistics = Statistics(adGroupsList.getItemAt(i));
								adGroupIdList += statObj.Id.toString()+",";
							}

							adGroupStatReq.AdGroupIds = adGroupIdList;
							statsType._SemaStatsType = "Yesterday";
							adGroupStatReq.Type = statsType;

							wsAdGroupStatService.getAdGroupStats.send(adGroupStatReq.AdGroupIds, adGroupStatReq.Type);
						}
		        			
						var parentElement : XMLList = XML(this.customTreeView.treeData).descendants().(@type=="campaign").(@campaignID==this.currentCampaignId);
						if ((parentElement != null)&&(parentElement.length()>0))
						{
							deleteChildren(parentElement.children());
							var items : ArrayCollection;
							if (wsTreeData.length >=1)
							{
								items = ArrayCollection(wsTreeData);
							}
							else
							{
								items = new ArrayCollection();
								items.addItem(wsTreeData);
							}
							
							if(items != null)
                            {
                            	items.sort = new Sort();
				            	items.sort.fields = [new SortField("AdGroupName", true, false)];
				            	items.refresh();
                            }  
							
							for (var n : int; n<items.length; n++)
							{
								var node : XML = <element label={items[n].AdGroupName} type="adGroup" groupID={items[n].Id}/>;
								parentElement[0].appendChild(node);
							}
						}
					}
					else
					{
						this.tbCampaignAdGroup.adGroupsListData = null;
					}
				}
				catch(e:Error)
		        {
					Alert.show(e.message + " wsGetAllAdGroups");
				}
			}
	    	
	    	
	    	private function deleteChildren(children : XMLList) : void
	    	{
	    		for (var i : int=children.length()-1; i>=0; i--)
	    		{
	    			delete children[i];
	    		} 
	    	}
	    	
	       /**
			 * Function to trace Display List
			 * 
			 * @author Zone24x7
			 * @param  container
			 * @param  indentString
			 * @return DisplayObject
			 */ 
	    	private function traceDisplayList(container:DisplayObjectContainer, indentString:String): DisplayObject {
			    var child:DisplayObject;
			    for (var i:uint=0; i < container.numChildren; i++){
			        child = container.getChildAt(i);
					if(child.name == indentString)		        
						return child;	
			    }
			    return child;
			}
	    	
	    	
	    	
	       /**
			 * Function to handle put ad group response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */ 
		  	private function wsPutAdGroup(event : ResultEvent) : void {	  		
		  		var wsADGResult : Object;	 		  				
		  		try {
		        	wsADGResult = event.result as Object;
		        	var node : XML;
		        	var element: XML = XML(customTreeView.treeList.selectedItem);
		        	
		        	
		        	if(wsADGResult != null) {	
		        					  		
			  			if (this.isAddingAdGroup)
			  			{
			  				node = <element label={this.newNodeName} type="adGroup" groupID={wsADGResult.Id}/>;
			  				element.appendChild( node );
	           				this.customTreeView.treeList.expandItem(element,true);
	           				customTreeView.treeList.selectedItem = node;	           					           					           						        				           				
	           				this.lblEditMSG.text = "You have successfully added : " +this.newNodeName;             						        			
	           				
	           				this.tbAdGroup.lblVendorStatusRes.visible = true;
	           				this.tbAdGroup.lblVendorStatusRes.text = "UNKNOWN";
			   				this.tbAdGroup.lblVendorStatus.visible = true;   
			   				
			   				this.tbAdGroup.lblPubDate.visible = true;
			   				this.tbAdGroup.lblPublishedDate.text = "Not Published"; 
			   				this.tbAdGroup.lblPublishedDate.visible = true;			   				   						        			
			   				
			   				if(this.tbCampaignAdGroup.adGroupsListData != null)
                            {
                            	this.tbCampaignAdGroup.adGroupsListData.sort = new Sort();
				            	this.tbCampaignAdGroup.adGroupsListData.sort.fields = [new SortField("AdGroupName", true, false)];
				            	this.tbCampaignAdGroup.adGroupsListData.refresh();
                            }                               	   				   						        		
		  				}
		  				else 
		  				{
		  					customTreeView.treeList.selectedItem = element;
			  				element.@label = wsADGResult.AdGroupName;
			  				element.@groupID = wsADGResult.Id;
			  				element.@type = "adGroup";
			  				this.tbAdGroup.btnSaveAdGroup.enabled = true;			  				
			  				this.lblEditMSG.text = "You have modified the Ad Group : "+wsADGResult.AdGroupName;  
			  			}
			  			disableAdGroupSummaryComponents();
 			  			this.lblBreadCrumb.text = "SEMA > " + this.currentPortfolioGroupName + " > " + this.currentPortfolioName + " > " + this.currentCampaignName+ " > " + this.currentAdGroupName; 
			  			this.currentAdGroupId = wsADGResult.Id;	  			  						
			  			this.currentAdGroupModifiedDate = wsADGResult.ModifiedDate;//p139dak: save the modified date of the ad group to send back to the UI		  						
		        		Alert.show("Ad Group Successfully Saved : " + wsADGResult.AdGroupName,"",Alert.OK,null,resetFocus);	        		
		        		this.tbAdCopies.enabled = true;
		        		this.tbKeywords.enabled = true;	        		
		        		
		        		customTreeView.treeList.selectedItem.@type = "adGroup";  
		        		customTreeView.treeList.selectedItem.@label = wsADGResult.AdGroupName;
			  			customTreeView.treeList.selectedItem.@groupID = wsADGResult.Id;
			  					
			  			this.tbAdGroup.pnlAdGroupSummary.title = "Summary";
		        	}
		        	else 
		        	{		        		
		        		// Focus stays in ad group summary
		        		Alert.show("Error while Saving the Ad Group!");
		        		this.lblEditMSG.text = "";
		        		this.tbAdCopies.enabled = false;
		  				this.tbKeywords.enabled = false;
		        	}
		        	this.isAddingAdGroup = false;
		        
		        	showHideAdGroupSummaryButtons(true,false,false);
		        	disableAdGroupSummaryComponents();
		        }catch(e:Error) {
		        	//Focus stays in ad group summary
		        	this.lblEditMSG.text = "";	
		        		this.tbAdCopies.enabled = false;
		  				this.tbKeywords.enabled = false;
		        	Alert.show(e.message, "wsPutAdGroup");	
		        }		        			       
	    	}
	    	
	    	private function resetFocus(event:Object):void
	    	{
		        this.tbAdGroup.txtAdGroupURL.text = adgroupDestURL;	
	    		this.tbAdGroup.btnEditAdGroup.setFocus();
	    	}
	    	
	       /**
			 * Function to handle get all ad copy response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */ 
	    	private function wsGetAllAdCopy(event : ResultEvent) : void {
	    	
	    		 var wsAdCopyResult : Object;	
	    		 adCopyList = new ArrayCollection;
	    		 var adCopy : Statistics;
	    		 var i:int;	    		 	    		 
	    		 var statusTypeObj : SemaStatusType;	    			
	    		 var adCopyTypeObj : AdCopyType;     		 
	    		 try{
	    		 	wsAdCopyResult = event.result as Object;
	    		 		     		   				        	       					        	       		
	    			if( wsAdCopyResult != null ){		    				
	    				if(wsAdCopyResult.length > 0){  	    							
		    				for(i = 0; i < wsAdCopyResult.length; i++){	 											
	       						
	       						adCopy = new Statistics();
	       						statusTypeObj = new SemaStatusType();
	       						adCopyTypeObj = new AdCopyType();
	       						
	       						adCopy.Id = parseInt(wsAdCopyResult[i].Id);
	       						
	       						adCopy.AdVendorId = parseInt(wsAdCopyResult[i].AdVendorId);
	       						adCopy.GroupId = parseInt(wsAdCopyResult[i].GroupId);
	       						
	       						statusTypeObj._SemaStatusType = wsAdCopyResult[i].Status;
							    adCopy.Status = statusTypeObj;
							    
							    adCopy.AdVendorStatus = wsAdCopyResult[i].AdVendorStatus;
							    
							    adCopyTypeObj._AdCopyType = wsAdCopyResult[i].Type;
							    adCopy.Type = adCopyTypeObj;	       	
							    
							    if(wsAdCopyResult[i].Disapproved != null){
							    	adCopy.Disapproved = wsAdCopyResult[i].Disapproved;
							    }else{
							    	adCopy.Disapproved = false;
							    }
							    					               				
	               				adCopy.Headline = wsAdCopyResult[i].Headline;
	               				adCopy.Description1 = wsAdCopyResult[i].Description1;
	               				adCopy.Description2 = wsAdCopyResult[i].Description2;
	               				adCopy.DestinationUrl = wsAdCopyResult[i].DestinationUrl;
	               				adCopy.DisplayUrl = wsAdCopyResult[i].DisplayUrl;
	               				adCopy.VendorPolicyExemptionRequest = wsAdCopyResult[i].VendorPolicyExemptionRequest;
	               				adCopy.EffectiveDate = wsAdCopyResult[i].EffectiveDate;
	               				//var offsetMilliseconds:Number = adCopy.EffectiveDate.getTimezoneOffset() * 60 * 1000;
								//adCopy.EffectiveDate.setTime(adCopy.EffectiveDate.getTime() + offsetMilliseconds);
	               				adCopy.ExpirationDate = wsAdCopyResult[i].ExpirationDate;
	               				//var offsetMilliseconds:Number = adCopy.ExpirationDate.getTimezoneOffset() * 60 * 1000;
								//adCopy.ExpirationDate.setTime(adCopy.ExpirationDate.getTime() + offsetMilliseconds);
	               				
	               				//p139dak: ModifiedDate field must be stored on the client side from the
                                //get service response and then passed back to the server side with update
                                //service request; the server side will refuse any requests with incorrect
                                //timestamps, so this rule will be strictly enforced.
                                adCopy.ModifiedDate = wsAdCopyResult[i].ModifiedDate;	               				
	               				
	               				adCopy.Clicks = 0;
	           					adCopy.Cost = 0;
	           					adCopy.Impressions = 0
	           					adCopy.CTR = 0;
								adCopy.CPM = 0;
								adCopy.CPC = 0;      
								         				
	               				adCopyList.addItem(adCopy);    	               					               				    		
	        				} 
	        				this.tbAdCopies.adsListData = this.adCopyList;
		    			}
		    			else{		    				
		    				adCopy = new Statistics();
		    				statusTypeObj = new SemaStatusType();
	       					adCopyTypeObj = new AdCopyType();
	       					
	   						adCopy.Id = parseInt(wsAdCopyResult.Id);
	   						adCopy.AdVendorId = parseInt(wsAdCopyResult.AdVendorId);
	   						adCopy.GroupId = parseInt(wsAdCopyResult.GroupId);
	           				
	           				statusTypeObj._SemaStatusType = wsAdCopyResult.Status;
							adCopy.Status = statusTypeObj;
							    
							adCopy.AdVendorStatus = wsAdCopyResult.AdVendorStatus;
	           				
	           				if(wsAdCopyResult.Disapproved != null){
							    	adCopy.Disapproved = wsAdCopyResult.Disapproved;
						    }else{
						    	adCopy.Disapproved = false;
						    }
	           				
							adCopyTypeObj._AdCopyType = wsAdCopyResult.Type;
							adCopy.Type = adCopyTypeObj;
	           					           				
	           				adCopy.Headline = wsAdCopyResult.Headline;
	           				adCopy.Description1 = wsAdCopyResult.Description1;
	           				adCopy.Description2 = wsAdCopyResult.Description2;
	           				adCopy.DestinationUrl = wsAdCopyResult.DestinationUrl;
	           				adCopy.DisplayUrl = wsAdCopyResult.DisplayUrl;
	           				adCopy.VendorPolicyExemptionRequest = wsAdCopyResult.VendorPolicyExemptionRequest; 
	           				
	           				
	           				adCopy.EffectiveDate = wsAdCopyResult.EffectiveDate;
	           				adCopy.ExpirationDate = wsAdCopyResult.ExpirationDate;
	           				
	           				//p139dak: ModifiedDate field must be stored on the client side from the
                            //get service response and then passed back to the server side with update
                            //service request; the server side will refuse any requests with incorrect
                            //timestamps, so this rule will be strictly enforced.
                            adCopy.ModifiedDate = wsAdCopyResult.ModifiedDate;
                                
	           				adCopy.Clicks = 0;
	           				adCopy.Cost = 0;
	           				adCopy.Impressions = 0;
	           				adCopy.CTR = 0;
							adCopy.CPM = 0;
							adCopy.CPC = 0;	
							
	           				adCopyList.addItem(adCopy);  
	           				
	           				this.tbAdCopies.adsListData = this.adCopyList; 
		    			}
		    			/* 
		    			//Ad Copy Statistics
		    			for(var i : int = 0; i < adCopyList.length; i++){		    				
		    				var statObj	: Statistics = new Statistics();
		    				statObj =  Statistics(adCopyList.getItemAt(i));	    					    				
		    				wsAdCopyStatService.getAdCopyStats.send(statObj.Id,"Yesterday");
		    			}
		    			 */
		    			
		    			//Ad Copy Statistics
		    			var adCopyIdList : String = new String();
		    			var adCopyStatReq : GetAdCopyStats = new GetAdCopyStats();		    			
		    			var statsType : SemaStatsType = new SemaStatsType();
				          	  
		    			for(var i : int = 0; i < adCopyList.length; i++){		    				
		    				var statObj	: Statistics = Statistics(adCopyList.getItemAt(i));	    			
		    				adCopyIdList += statObj.Id.toString()+",";  
		    			}
		    					    			
		    			adCopyStatReq.AdCopyIds = adCopyIdList;
				        statsType._SemaStatsType = "Yesterday";
				        adCopyStatReq.Type = statsType;
				          	  
		    			wsAdCopyStatService.getAdCopyStats.send(adCopyStatReq.AdCopyIds, adCopyStatReq.Type);
		    			
		    			//callLater(selectAdCopyLastItem);
		    			//disabling AdCopy data fields
		    			enableAdCopyFields(false);		    			
		    		}
	    			else{
	    				this.tbAdCopies.adsListData = null;
	    			}
	    		}
	    		catch(err:Error){
	    			Alert.show(err.message , "wsGetAllAdCopy");
	    		}
	    	}
	    	
	    	
	    	
	       /**
			 * Function to handle put ad copy response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */ 	    		    	
	    	private function wsPutAdCopyList(event : ResultEvent) : void {
	    		var wsADCopyResult : Object;	
	    		var adCopyObj : Statistics;
	    		var i : int;
	    		
	    		try{
	    			wsADCopyResult = event.result as Object;
	    			if(wsADCopyResult != null){	    				  
		  				for(i=0 ; i < this.adCopyList.length; i++){
		  					adCopyObj = Statistics(this.adCopyList.getItemAt(i));
		  					if(adCopyObj.Id == 0){
		  						adCopyObj.Id = wsADCopyResult.Id;
		  						this.adCopyList.setItemAt(adCopyObj, i);
		  					}
		  				}			  						  		
		  				wsAdService.getAllAdCopy.send(this.currentAdGroupId);			  						  						  		
		  				this.currentAdCopyId = wsADCopyResult.Id;
		  				
			   			
				  		if(this.isAddingAdCopy){
				  			this.lblEditMSG.text = "You have added the Ad Copy : "+wsADCopyResult.Headline;		
				  			Alert.show("The new ad copy has been successfully saved.");
				  		}
				  		else
				  		{
				  			this.lblEditMSG.text = "You have modified the Ad Copy : "+wsADCopyResult.Headline;	
				  			Alert.show("Modified ad copy has been successfully saved.");
				  		}
                        			  					  						  
						//To enable the ad copy grid after successfuly saving an ad copy
						this.tbAdCopies.grdAdCopies.enabled = true;			  					  						  
							  					  						  
						showHideAdCopyButtons(true,false,false,false);		  					  						  
						this.tbAdCopies.txtHeadline.text = "";
						this.tbAdCopies.txtDescOne.text = "";
						this.tbAdCopies.txtDescTwo.text = "";
						this.tbAdCopies.txtDispUrl.text = "";
						this.tbAdCopies.txtDestUrl.text = "";
						
			  			this.tbAdCopies.lblVendorStatus.text = "";
			  			this.tbAdCopies.txtVendorPolicyExcemption.text = "";
			  			// sampath 08.04.2008
						this.tbAdCopies.btnSchedule.visible = false;	
						showAdCopyScheduleComponents(false);		  					  						  
	    			}
	    			else{
	    				Alert.show("Error while saving ad Copy!");
	    				this.lblEditMSG.text = "";
	    				showHideAdCopyButtons(false,false,true,true);
	    			}
	    			this.isAddingAdCopy  = false;		    			
	    			this.tbAdCopies.cmbAdCopyStatus.enabled = false;	    			
	    		}catch(err:Error){
	    			this.lblEditMSG.text = "";
	    			Alert.show(err.message, " wsPutAdCopyList");
	    			showHideAdCopyButtons(false,false,true,true);
	    		}
	    	}	    		    

	    	/**
			 * Function to select Ad Copy Last Item
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */ 	    		    	
	    	private function selectAdCopyLastItem() : void {
	    		//this.tbAdCopies.grdAdCopies.selectedItem = Statistics(this.tbAdCopies.adsListData[this.adCopyList.length-1]);
	    		
	    		this.tbAdCopies.grdAdCopies.selectedItem = Statistics(this.adCopyList.getItemAt(this.adCopyList.length-1));
		  		//Alert.show(selectedAdId.toString());		    		    		
	    	}
	    	
	    	
	    	
	    	 /**
			 * Function to validate a given URL
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */ 	    		    	
	    	private function validateURL(url:String) : Boolean {
	    		
	    		var isAValidURL : Boolean = new Boolean;
	    		var regExString :String = "http(s?)\\:\\/\\/[\\w]+(\\.?[a-zA-Z0-9_-]+)*((\\:?)([0-9]+))?((\\/)*[a-zA-Z0-9_-]*(\\.)?[a-zA-Z0-9_-]*)*(\\?)?(([a-zA-Z0-9_-]*(\\s)*(\\=)?(\\s)*([a-zA-Z0-9_-])*(\\s)*(\\,)?(\\s)*)*(\\/)*[a-zA-Z0-9_-]*)*";
	    	
	    		var regEx:RegExp = new RegExp(regExString,"g") ;
	    		var hasADot : Boolean = validateDot(url);
	    	
	    		isAValidURL = regEx.test(url.toString());
	    	
	    		return (isAValidURL && hasADot); 
	    	}
	    	
	    	private function validateDot(url : String) : Boolean
	    	{
	    		var hasADot : Boolean = new Boolean;
	    		var regExString : String = "(\\.)";
	    		
	    		var regEx : RegExp = new RegExp(regExString,"g");
	    		
	    		hasADot = regEx.test(url.toString());
	    		
	    		return hasADot;
	    	}
	    	
	       /**
			 * Function to handle get all keywords response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */
	    	private function wsGetAllAdKeywords(event : ResultEvent) : void {
	    	
	    		 var wsAdKeywordsResult : Object;	
	    		 adKeywordsList = new ArrayCollection;
	    		 var adKeyword : Statistics;
	    		 var statusTypeObj : SemaStatusType;
		          	    		
	    		 var i:int;	
	    		 
	    		 try{
	    		 	wsAdKeywordsResult = event.result as Object;
	    		 		     		   				        	       					        	       		
	    			if( wsAdKeywordsResult != null ){		    				
	    				if(wsAdKeywordsResult.length > 0){  	 
	    					for(i = 0; i < wsAdKeywordsResult.length; i++){	 											
	       						adKeyword = new Statistics();
	       						statusTypeObj = new SemaStatusType();
		         
	       						adKeyword.Id = parseInt(wsAdKeywordsResult[i].Id);
	       						adKeyword.VendorId = parseInt(wsAdKeywordsResult[i].VendorId);
	       						adKeyword.AdGroupId = parseInt(wsAdKeywordsResult[i].AdGroupId);
	               				
	               				statusTypeObj._SemaStatusType = wsAdKeywordsResult[i].Status;
							    adKeyword.Status = statusTypeObj;
							    
							    adKeyword.AdVendorStatus = wsAdKeywordsResult[i].AdVendorStatus;
							    
	               				
	               				adKeyword.KeywordText = wsAdKeywordsResult[i].KeywordText;
	               				adKeyword.MaxCPC = wsAdKeywordsResult[i].MaxCPC;
	               				adKeyword.MinCPC = wsAdKeywordsResult[i].MinCPC;	               				
	               				adKeyword.CreatedBy = wsAdKeywordsResult[i].CreatedBy;
	               				adKeyword.ModifiedBy = wsAdKeywordsResult[i].ModifiedBy;
	               				adKeyword.DestinationURL = wsAdKeywordsResult[i].DestinationURL;	
	               				adKeyword.MatchType = new MatchType();
	               				adKeyword.MatchType._MatchType = wsAdKeywordsResult[i].MatchType;
	               				adKeyword.NegativeMatch = new Boolean(wsAdKeywordsResult[i].NegativeMatch);
	               				adKeyword.VendorPolicyExemptionRequest = wsAdKeywordsResult[i].VendorPolicyExemptionRequest; 	               				
	               				adKeyword.AdVendorStatus = wsAdKeywordsResult[i].AdVendorStatus;               				
	               				adKeyword.PublishedDate = wsAdKeywordsResult[i].PublishedDate; 
	               				
	               				//p139dak: ModifiedDate field must be stored on the client side from the
	               				//get service response and then passed back to the server side with update
	               				//service request; the server side will refuse any requests with incorrect
	               				//timestamps, so this rule will be strictly enforced.
	               				adKeyword.ModifiedDate = wsAdKeywordsResult[i].ModifiedDate; 
	               				
	               				adKeyword.Clicks = 0;
	               				adKeyword.Cost = 0;
	               				adKeyword.Impressions = 0;
	               				adKeyword.CTR = 0;
								adKeyword.CPM = 0;
								adKeyword.CPC = 0;
								
	               				adKeywordsList.addItem(adKeyword);        				
	        				} 
	        				this.tbKeywords.keywordsListData = this.adKeywordsList;
		    			}
		    			else{	
		    				adKeyword = new Statistics();
		    				statusTypeObj = new SemaStatusType();
		        				
       						adKeyword.Id = parseInt(wsAdKeywordsResult.Id);
       						adKeyword.VendorId = parseInt(wsAdKeywordsResult.VendorId);
       						adKeyword.AdGroupId = parseInt(wsAdKeywordsResult.AdGroupId);
               				               		               				
               				statusTypeObj._SemaStatusType = wsAdKeywordsResult.Status;
						    adKeyword.Status = statusTypeObj;
						    
						    adKeyword.AdVendorStatus = wsAdKeywordsResult.AdVendorStatus;
						    

               				adKeyword.KeywordText = wsAdKeywordsResult.KeywordText;
               				adKeyword.MaxCPC = wsAdKeywordsResult.MaxCPC;
               				adKeyword.MinCPC = wsAdKeywordsResult.MinCPC;	               				
               				adKeyword.CreatedBy = wsAdKeywordsResult.CreatedBy;
               				adKeyword.ModifiedBy = wsAdKeywordsResult.ModifiedBy;
               				adKeyword.DestinationURL = wsAdKeywordsResult.DestinationURL;	
               				adKeyword.MatchType = new MatchType();
               				adKeyword.MatchType._MatchType = wsAdKeywordsResult.MatchType;
               				adKeyword.NegativeMatch = new Boolean(wsAdKeywordsResult.NegativeMatch);               				
               				adKeyword.VendorPolicyExemptionRequest = wsAdKeywordsResult.VendorPolicyExemptionRequest; 
               				adKeyword.AdVendorStatus = wsAdKeywordsResult.AdVendorStatus; 
               				adKeyword.PublishedDate = wsAdKeywordsResult.PublishedDate; 
               				
                            //p139dak: ModifiedDate field must be stored on the client side from the
                            //get service response and then passed back to the server side with update
                            //service request; the server side will refuse any requests with incorrect
                            //timestamps, so this rule will be strictly enforced.
                            adKeyword.ModifiedDate = wsAdKeywordsResult.ModifiedDate; 
 
               				
               				adKeyword.Clicks = 0;
	               			adKeyword.Cost = 0;
	               			adKeyword.Impressions = 0;
	               			adKeyword.CTR = 0;
							adKeyword.CPM = 0;
							adKeyword.CPC = 0;
								
               				adKeywordsList.addItem(adKeyword); 
	           				
	           				this.tbKeywords.keywordsListData = this.adKeywordsList;
		    			}
		    			
		    			//Keyword Statistics
		    			var keywordIdList : String = new String();
		    			var keywordStatReq : GetAdKeyWordStats = new GetAdKeyWordStats();
				        var statsType : SemaStatsType = new SemaStatsType();
				          	  
		    			for(var i : int = 0; i < adKeywordsList.length; i++){
		    				var statObj	: Statistics = Statistics(adKeywordsList.getItemAt(i));	    			
		    				keywordIdList += statObj.Id.toString()+",";  
		    			}
		    					    			
		    			keywordStatReq.AdKeyWordIds = keywordIdList;
				        statsType._SemaStatsType = "Yesterday";
				        keywordStatReq.Type = statsType;
				          	  
		    			wsAdKeywordStatService.getAdKeyWordStats.send(keywordStatReq.AdKeyWordIds, keywordStatReq.Type);
		    		}
	    			else{
	    				this.tbKeywords.keywordsListData = null;
	    			}
	    			
	    		}catch(err:Error){
	    			Alert.show(err.message , "wsGetAllAdKeywords");
	    		}
	    	}
	    	
	    	
	    	
	    	/**
			 * Function to handle put keywords response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	    		    	
	    	private function wsPutAdKeywords(event : ResultEvent) : void {
	    		var wsKWResult : Object;	
	    		try{
	    			wsKWResult = event.result as Object;
	    			if(wsKWResult != null){
	    				
	    				//Refresh keyword grid
	    				wsAdKeywordService.getAllAdKeywords.send(this.currentAdGroupId);
	    				
	    				var adKeywordObj : Statistics = new Statistics();
		  				adKeywordObj = Statistics(this.tbKeywords.grdKeywords.selectedItem);
		  				adKeywordObj.Id = wsKWResult.Id;		  				
	    				this.adKeywordsList.setItemAt(adKeywordObj, this.selectedAdKeywordId);
	    				this.currentKeywordId = wsKWResult.Id;
	    				Alert.show("Keyword : " + wsKWResult.KeywordText + " successfully saved.");
	    				
						   this.tbKeywords.grdKeywords.enabled = true;
						   this.tbKeywords.txtKWText.text = "";  
				   	 	   this.tbKeywords.txtKWMaxCPC.text = "";
				   	 	   this.tbKeywords.txtKWMinCPC.text = "";  
				   	 	   this.tbKeywords.txtKWDestURL.text = "";	
				   	 	   this.tbKeywords.cmbKWMatchType.selectedIndex = 0;
				   	 	   this.tbKeywords.cmbKWStatus.selectedIndex = 0;	
				   	 	 
				   	 	 if(isAddingKeyword){
				   	 	 	this.isAddingKeyword = false;
				   	 	 	this.lblEditMSG.text = "You have added the keyword : "+wsKWResult.KeywordText;
				   	 	 }
				   	 	 else{
				   	 	 	this.lblEditMSG.text = "You have modified the keyword : "+wsKWResult.KeywordText;
				   	 	 }
						showHideKeywordButtons(true,false,false,false);   
						
						disableKeywordsComponents();
	    			}
	    			else{
	    				this.lblEditMSG.text = "";
	    				Alert.show("Error while saving Keyword!");	 
	    				showHideKeywordButtons(false,false,true,true);      				
	    			}	    						
	    		}catch(err:Error){
	    			this.lblEditMSG.text = "";
	    			Alert.show(err.message, " wsPutAdKeywords");
	    			showHideKeywordButtons(false,false,true,true);  	
	    		} 
	    		this.tbKeywords.grdKeywords.enabled = true;
	    	}
	    	
	    	
	    	
	       /**
			 * Function to handle put campaigns response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */		    	
	    	private function wsPutCampaigns(event : ResultEvent) : void {
	    		var wsCampaignResult : Object;	
	    		try{
	    			wsCampaignResult = event.result as Object;
	    			var element: XML = XML(customTreeView.treeList.selectedItem);
		  			var node : XML;
		  			
	    			if(wsCampaignResult != null){
	    				
	       				if(this.isAddingCampaign) 
	  					{
		  					node = <element label={wsCampaignResult.CampaignName} type="campaign" campaignID={wsCampaignResult.Id} portfolioId={wsCampaignResult.PortfolioId} isBranch="true"/>;
		  					customTreeView.treeList.selectedItem = node;
           					element.appendChild( node );	
           					this.customTreeView.treeList.expandItem(element,true);           					
	        				customTreeView.treeList.selectedItem = node;
                            this.lblEditMSG.text = "You have Added campaign : "+ wsCampaignResult.CampaignName; 
                            
                            if(this.tbPortfolioAdCampaign.campaignsListData != null)
                            {
                            	this.tbPortfolioAdCampaign.campaignsListData.sort = new Sort();
				            	this.tbPortfolioAdCampaign.campaignsListData.sort.fields = [new SortField("CampaignName", true, false)];
				            	this.tbPortfolioAdCampaign.campaignsListData.refresh();
                            }                            
		  				}
		  				else
		  				{		  					
		  					customTreeView.treeList.selectedItem = element; 					
			  				element.@label = wsCampaignResult.CampaignName;
			  				element.@campaignID = wsCampaignResult.Id;
			  				element.@type = "campaign";
			  				element.@portfolioId = wsCampaignResult.PortfolioId;				  				
                            this.lblEditMSG.text = "You have edited campaign : "+ wsCampaignResult.CampaignName; 
			  			}
			  		
	        			this.lblBreadCrumb.text = "SEMA > " + this.currentPortfolioGroupName + " > " + this.currentPortfolioName + " > " + this.currentCampaignName;					  				
	        				
	        			this.tbCampaignAdGroup.enabled = true;	
	        			disableCampaignSummaryComponents();
	       				
	       				Alert.show("Campaign : " + wsCampaignResult.CampaignName + " successfully saved.");
		        		this.currentCampaignId = wsCampaignResult.Id;
		        		this.currentCampaignName = wsCampaignResult.CampaignName;
		        		this.currentCampaignObj.ModifiedDate = wsCampaignResult.ModifiedDate;//p139dak: maintain modified date; must be passed back to the services by contract
		        		this.isAddingCampaign = false;
		        		
					    campaignAccntId = wsCampaignResult.AccountId;
					    wsAccountService.getAllAccounts();
		  				
		        		customTreeView.treeList.selectedItem.@type = "campaign";
		        		customTreeView.treeList.selectedItem.@label = wsCampaignResult.CampaignName;
			  			customTreeView.treeList.selectedItem.@campaignID = wsCampaignResult.Id;			  			
			  			customTreeView.treeList.selectedItem.@portfolioId = wsCampaignResult.PortfolioId;
			  			
			  			this.tbCampaignSummary.pnlCampaignSummary.title = "Summary";
			  			
			  			this.tbCampaignSummary.cmbAccount.visible = false;
		   	 			this.tbCampaignSummary.lblAccount.visible = true;
	    			}
	    			else
	    			{
	    				
		        		this.tbCampaignAdGroup.enabled = false;
		  				
	    				Alert.show("Error while saving Campaign!");
	    				showPortfolioTab();		        		    			  					    			    				    				
	    			}		        		    			  					    			    			
	    			this.tbCampaignSummary.btnScheduleCampaign.enabled = false;
	    			
	    			showHideCampaignSummaryButtons(true,true,false,false);	        		    			  					    			    			
	    		}catch(err:Error){
	    			
		        		this.tbCampaignAdGroup.enabled = false;
	    			Alert.show(err.message, " wsPutCampaigns");
	    			if(this.selectedNode.@type == "portfolio")
    				{
	    				showPortfolioTab();	
	    			} 
	    		}
	    	}
	    	
	    	
	    	private function setAccountIdForCampaign(accountId : int) : void
	    	{
	    		tbCampaignSummary.accountId = accountId;
	    	}
	    	
	    	
	    	
	       /**
			 * Function to handle get campaign list response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetCampaignList(event : ResultEvent) : void {
	    		var wsKWResult : Object;
	    		var campaignObj : Campaign;	    		
	    		var adRunOpt : AdRunOption;	
	    		try{
	    			wsKWResult = event.result as Object;
	    			campaignObj = new Campaign();
	    			
	    			if(wsKWResult != null){
	    		  	
		    		    campaignObj = new Campaign();
		   				
				   		var statusTypeObj : SemaStatusType = new SemaStatusType();
				        var statusObj : SemaStatusType= new SemaStatusType();
			    		
			    		campaignObj.Id = wsKWResult.Id;
			    		this.currentCampaignId = wsKWResult.Id;
			    		 
                        campaignObj.ModifiedDate = wsKWResult.ModifiedDate;//p139dak: save ModifiedDate to pass back to the services later; this is the contract			    		 
			    		 
				   		campaignObj.AdVendorId = wsKWResult.AdVendorId;
				   		campaignObj.PortfolioId = wsKWResult.PortfolioId;
				   		
				   		statusObj._SemaStatusType = wsKWResult.Status;
					    campaignObj.Status = statusObj;
					    
						campaignObj.AdVendorStatus = wsKWResult.AdVendorStatus;
						
						this.tbCampaignSummary.lblVendorStatus.text = wsKWResult.AdVendorStatus;
					    
					    campaignObj.AccountId = wsKWResult.AccountId;
					    
					    campaignAccntId = campaignObj.AccountId;
					    setAccountIdForCampaign(wsKWResult.AccountId);
					    
					    
				   		campaignObj.CampaignName = wsKWResult.CampaignName;
				   		this.currentCampaignName = wsKWResult.CampaignName;
				   		
				   		campaignObj.DailyBudget = wsKWResult.DailyBudget;
				   		campaignDailyBudget = wsKWResult.DailyBudget;
				   		
				   		campaignObj.EffectiveDate = wsKWResult.EffectiveDate;
				   		campaignObj.PublishedDate = wsKWResult.PublishedDate;
				   		campaignObj.ExpirationDate = wsKWResult.ExpirationDate;
				   		campaignObj.CreatedDate = wsKWResult.CreatedDate;
				   		campaignObj.ModifiedDate = wsKWResult.ModifiedDate;
				   		campaignObj.CreatedBy = wsKWResult.CreatedBy;
				   		campaignObj.ModifiedBy = wsKWResult.ModifiedBy;
		    		  	
		    		  	wsAccountService.getAllAccounts();
		    		  	
		    		  	this.tbCampaignSummary.txtCampaignName.text = campaignObj.CampaignName;
		    		  	
		    		  	var defaultEffectiveDate : Date = new Date(2000,00,01,01,01,00,000000);
		    		  	var defaultExpDate : Date = new Date(2030,00,01,01,01,00,000000);
		    		  	
		    		 	if(campaignObj.EffectiveDate != null && (campaignObj.EffectiveDate.toDateString() != defaultEffectiveDate.toDateString()))
		    		 	{
		    		 		showCampaignSummaryScheduleComponents(true);
		    		 		this.tbCampaignSummary.btnScheduleCampaign.visible = false;
		    		 		this.tbCampaignSummary.dtEffectiveDate.selectedDate = campaignObj.EffectiveDate;
		    		  		this.tbCampaignSummary.dtExpirationDate.selectedDate = campaignObj.ExpirationDate;
		    		  		
		    		  		//Setting the original values
		  				this.tbCampaignSummary.dtOriginalCampaignEffectiveDate = campaignObj.EffectiveDate;
		  				this.tbCampaignSummary.dtOriginalCampaignExpirationDate = campaignObj.ExpirationDate;
		    		 	}
		    		 	else
		    		 	{
		    		 		showCampaignSummaryScheduleComponents(false);
		    		 		this.tbCampaignSummary.btnScheduleCampaign.visible = true;
		    		 	}
		    		  	
		    		  	if(campaignObj.PublishedDate != null){
		    		  		if(campaignObj.PublishedDate.getMonth() != 00 && campaignObj.PublishedDate.getDate() != 01 && campaignObj.PublishedDate.getFullYear() != 1901) {		    		  	
		    		  			this.tbCampaignSummary.dtCamSummPuDate.text = (campaignObj.PublishedDate.getMonth()+1).toString() + "/" + campaignObj.PublishedDate.getDate().toString() + "/" + campaignObj.PublishedDate.getFullYear().toString();
		    		  		}else{
		    		  			this.tbCampaignSummary.dtCamSummPuDate.text = "Not Published";	
		    		  		}		    		  		
		    		  	}
		    		  			    		  	
		    		  	this.tbCampaignSummary.txtDailyBudget.text = campaignObj.DailyBudget.toString();
		    		  	
		    		  	if(wsKWResult.Status == "Enabled"){
		    		  		this.tbCampaignSummary.cmbCampaignStatus.selectedIndex = 0;
		    		  	}else if(wsKWResult.Status == "Paused"){
		    		  		this.tbCampaignSummary.cmbCampaignStatus.selectedIndex = 1;
		    		  	}else{
		    		  		this.tbCampaignSummary.cmbCampaignStatus.selectedIndex = 2;
		    		  	}	
		    		  	
		    		  	
		    		  
		    		  	
		    		  	adRunOpt = new AdRunOption();
		    		  	adRunOpt.adRunOption = wsKWResult.AdRunOption;
		    		  	campaignObj.AdRunOption = adRunOpt;
		    		  	
		    		  	//Alert.show(adRunOpt.adRunOption.toUpperCase());
		    		  	if(adRunOpt.adRunOption != null)
		    		  	{
		    		  		if(adRunOpt.adRunOption.toUpperCase() == "OPTIMIZE"){
		    		  			
		    		  			//this.tbCampaignSummary.radioOptimize.enabled = true;
		    		  			//this.tbCampaignSummary.radioRotate.enabled = true;
			    		  		this.tbCampaignSummary.radioOptimize.selected = true;
			    		  		
			    		  	}else if(adRunOpt.adRunOption.toUpperCase() == "ROTATE"){
			    		  		
			    		  		//this.tbCampaignSummary.radioOptimize.enabled = true;
		    		  			//this.tbCampaignSummary.radioRotate.enabled = true;
			    		  		this.tbCampaignSummary.radioRotate.selected = true;
			    		  		
			    		  	}else{
			    		  		
			    		  		this.tbCampaignSummary.radioOptimize.enabled = false;
		    		  			this.tbCampaignSummary.radioRotate.enabled = false;
			    		  		this.tbCampaignSummary.radioRotate.selected = false;
			    		  		this.tbCampaignSummary.radioOptimize.selected = false;
			    		  		
			    		  	}
		    		  	}		    		  			    		  				    					    						   		
		    		  	this.currentCampaignObj = campaignObj;		    		  			    		  				    					    						   		
	    			}
	    			else{
	    				Alert.show("Errror getting campaigns !");
	    			}	
	    			    			
	    		}catch(err:Error){
	    			Alert.show(err.message, " error get campaigns");	
	    		} 
	    	}
	    	
	       /**
			 * Function to handle get campaigns response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetCampaigns(event : ResultEvent) : void 
	    	{
	    		var wsKWResult : Object;
       			
       			var campaignObj : Statistics;
       			var statusTypeObj : SemaStatusType;
          		var adRunOpt : AdRunOption;
          		
          		//re-use / refresh campaignsList
          		if (campaignsList == null)
			{
				campaignsList = new ArrayCollection;
			}
			else
			{
				campaignsList.removeAll();
	    		}
          		
          		//re-use / refresh campaignNamesList
          		if (campaignNamesList == null)
			{
				campaignNamesList = new ArrayCollection;
			}
			else
			{
				campaignNamesList.removeAll();
	    		}
          		
	    		try{
	    			wsKWResult = event.result as Object;
	    			if(wsKWResult != null)
	    			{	    				
	    				if(customTreeView.treeList.selectedItem.@type == "portfolio")
	    				{                             
				          if(wsKWResult.length != null)
				          {    
				            for(var i : int = 0; i < wsKWResult.length; i++)
				            {             
				               campaignObj = new Statistics();
				               statusTypeObj = new SemaStatusType();
				               adRunOpt = new AdRunOption();
				            
				               campaignObj.Id = parseInt(wsKWResult[i].Id);
				               campaignObj.AdVendorId = parseInt(wsKWResult[i].AdVendorId);
				               campaignObj.PortfolioId = parseInt(wsKWResult[i].PortfolioId);
				               campaignObj.AccountId = parseInt(wsKWResult[i].AccountId);
				               campaignObj.AdVendorStatus = wsKWResult[i].AdVendorStatus;
				               
				               campaignObj.CampaignName = wsKWResult[i].CampaignName;
				               campaignObj.EffectiveDate = wsKWResult[i].EffectiveDate;
				               campaignObj.ExpirationDate = wsKWResult[i].ExpirationDate;
				               campaignObj.PublishedDate = wsKWResult[i].PublishedDate;
				               
				               campaignObj.DailyBudget = wsKWResult[i].DailyBudget;
				               
				               adRunOpt.adRunOption = "Optimize";
				               campaignObj.AdRunOption = adRunOpt;
				               
				               statusTypeObj._SemaStatusType = wsKWResult[i].Status;
				               campaignObj.Status = statusTypeObj;
				            
				               
				               campaignObj.CreatedDate = wsKWResult[i].CreatedDate;
				               campaignObj.ModifiedDate = wsKWResult[i].ModifiedDate;
				               
				               campaignObj.CreatedBy = wsKWResult[i].CreatedBy;
				               campaignObj.ModifiedBy = wsKWResult[i].ModifiedBy;
				               
				               campaignObj.Cost = 0;
				               campaignObj.Clicks = 0;
				               campaignObj.Impressions = 0;
				               campaignObj.CTR = 0;
							   campaignObj.CPM = 0;
							   campaignObj.CPC = 0;	
								      
				               campaignsList.addItem(campaignObj);            
				              } 
				             this.tbPortfolioAdCampaign.campaignsListData = this.campaignsList;
				          }
				          else
				          { 
				              campaignObj = new Statistics();
				              statusTypeObj = new SemaStatusType();
				              adRunOpt = new AdRunOption();
				               
				              campaignObj.Id = parseInt(wsKWResult.Id);
				              campaignObj.AdVendorId = parseInt(wsKWResult.AdVendorId);
				              campaignObj.PortfolioId = parseInt(wsKWResult.PortfolioId);
				              campaignObj.AccountId = parseInt(wsKWResult.AccountId);
				              campaignObj.AdVendorStatus = wsKWResult.AdVendorStatus;
				               
				              campaignObj.CampaignName = wsKWResult.CampaignName;
				              campaignObj.EffectiveDate = wsKWResult.EffectiveDate;
				              campaignObj.ExpirationDate = wsKWResult.ExpirationDate;
				              campaignObj.PublishedDate = wsKWResult.PublishedDate;
				               
				              campaignObj.DailyBudget = wsKWResult.DailyBudget;
				                                                  
				              adRunOpt.adRunOption = "Optimize";
				              campaignObj.AdRunOption = adRunOpt;
				               				               
				              statusTypeObj._SemaStatusType = wsKWResult.Status;
				              campaignObj.Status = statusTypeObj;
				           
				               
				              campaignObj.CreatedDate = wsKWResult.CreatedDate;
				              campaignObj.ModifiedDate = wsKWResult.ModifiedDate;
				               
				              campaignObj.CreatedBy = wsKWResult.CreatedBy;
				              campaignObj.ModifiedBy = wsKWResult.ModifiedBy;
				              
				              campaignObj.Cost = 0;
				              campaignObj.Clicks = 0;
				              campaignObj.Impressions = 0;
				 			  campaignObj.CTR = 0;
							  campaignObj.CPM = 0;
							  campaignObj.CPC = 0;
				 
				              campaignsList.addItem(campaignObj); 
				                 
				              this.tbPortfolioAdCampaign.campaignsListData = this.campaignsList;
				          }
				          
				          if(campaignsList != null)
						  {
								campaignsList.sort = new Sort();
				            	campaignsList.sort.fields = [new SortField("CampaignName", true, false)];
				            	campaignsList.refresh();
					      }
				          
				          
				          this.tbPortfolioAdCampaign.refreshGrid();
				          
					          //Ad Campaign Statistics
					          var campIdList : String = new String();
					          
				    		  for(var i : int = 0; i < campaignsList.length; i++){
				    				var statObj	: Statistics =  Statistics(campaignsList.getItemAt(i));	
				    				campIdList += statObj.Id.toString()+",";     					    								    								    					    					    				
				          	  }				          		
				          	  var campStatReq : GetCampaignStats = new GetCampaignStats();
				          	  var statsType : SemaStatsType = new SemaStatsType();
				    				
				          	  campStatReq.CampaignIds = campIdList;
				          	  statsType._SemaStatsType = "Yesterday";
				          	  campStatReq.Type = statsType;
				    								    					    					    				
				          	  wsCampaignStatService.getCampaignStats.send(campStatReq.CampaignIds, campStatReq.Type);					          		
				          	
				         } 
				        else{
				              this.tbPortfolioAdCampaign.campaignsListData = null;
				        }
	    				
	    		  		//At least one campaign exist	  	    		  			  		  			    		  
    		  			var parentElement : XMLList = XML(this.customTreeView.treeData).descendants().(@type=="portfolio").(@portfolioId == this.currentPortfolioId);
           				if ((parentElement != null)&&(parentElement.length()>0)) {
           								
           					deleteChildren(parentElement.children());
						var items : ArrayCollection;
						if (wsKWResult.length >=1)
						{
							items = ArrayCollection(wsKWResult);
           					 	}           						           						
						else
						{
							items = new ArrayCollection();
							items.addItem(wsKWResult);
           					}
							
						if(items != null)
					  	{
							items.sort = new Sort();
			            	items.sort.fields = [new SortField("CampaignName", true, false)];
			            	items.refresh();
				      	}
				      	
						for (var n : int; n<items.length; n++)
						{
							var node : XML = <element label={items[n].CampaignName} type="campaign" campaignID={items[n].Id} portfolioId={items[n].PortfolioId} isBranch="true"/>;
           							parentElement[0].appendChild(node);
           							
           							 //For populating the AdGroups Campaign combo
           						campaignNamesList.addItem({label : items[n].CampaignName , Id : items[n].Id});			 
           							 
           					}
           					this.tbAdGroup.campaignsListData = this.campaignNamesList;   
           					 
           					 
	  					} 	
	    			}
	    			else{	    				
	    				this.tbPortfolioAdCampaign.campaignsListData = null;
	   	 				this.lblEditMSG.text="";
	    			}		    			    			
	    		}catch(err:Error){
	    			Alert.show(err.message, " error get campaign list");
	    		} 
	    	}	    	
	    	
		  	/*
		  	 * Portfolio Service Response Handlers
		  	 */		  	
		  	
		  	/**
			 * Function to handle Get All Portfolios response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetAllPortfolios(event : ResultEvent) : void {
       
		       var wsPortfoliosResult : Object;
		       portfoliosList = new ArrayCollection;
		       var portfolioObj : Portfolio;
		       var statusTypeObj : SemaStatusType;
		       
		       try
		       {
		        wsPortfoliosResult = event.result as Object;
		        
		        if(wsPortfoliosResult!=null)
		        {
		         
		         if((customTreeView.treeList.selectedItem.@type == "portfolioGroup") && (this.tabPortfolioGroup.selectedIndex == 1))
		         {
		              if(wsPortfoliosResult.length >= 1)
		              {    
		                   for(var i : int =0 ; i < wsPortfoliosResult.length; i++){ 
		                    
		                   portfolioObj = new Portfolio();
		                   statusTypeObj = new SemaStatusType();
		                
		                   portfolioObj.Name = wsPortfoliosResult[i].Name;
		                   portfolioObj.Description = wsPortfoliosResult[i].Description;
		                   
		                   statusTypeObj._SemaStatusType = wsPortfoliosResult[i].Status;
		                   portfolioObj.Status = statusTypeObj;
		                
		                         
		                   portfoliosList.addItem(portfolioObj);            
		                  } 
		                  this.tbPortfolioGroup.portfolioListData = this.portfoliosList;
		              }
		              else
		              { 
		                  portfolioObj = new Portfolio();
		                  statusTypeObj = new SemaStatusType();
		                   
		                  portfolioObj.Name = wsPortfoliosResult.Name;
		                  portfolioObj.Description = wsPortfoliosResult.Description;
		                                                      
		                  statusTypeObj._SemaStatusType = wsPortfoliosResult.Status;
		                  portfolioObj.Status = statusTypeObj;
		               
		     
		                  portfoliosList.addItem(portfolioObj); 
		                     
		                  this.tbPortfolioGroup.portfolioListData = this.portfoliosList;
		              }
		              
		              if(portfoliosList != null)
					  {
						  portfoliosList.sort = new Sort();
			              portfoliosList.sort.fields = [new SortField("Name", true, false)];
			              portfoliosList.refresh();
					  }
		              
		              this.tbPortfolioGroup.refreshGrid();
		         }
		         else
		         {
		          	this.tbPortfolioGroup.portfolioListData = null;
		         }
		         
				         var parentElement : XMLList = XML(this.customTreeView.treeData).descendants().(@type=="portfolioGroup").(@portfolioGroupId == this.currentPortfolioGroupId);
				               if ((parentElement != null)&&(parentElement.length()>0)) {
				               	var node : XML;
				                if(wsPortfoliosResult.length >= 1){
				                 
				                 if(parentElement.descendants().length()==0)
				                 {
				                 	var pfArrcol : ArrayCollection = new ArrayCollection();
				                 	pfArrcol = ArrayCollection(wsPortfoliosResult);
				                 	if(pfArrcol != null)
				                 	{
								pfArrcol.sort = new Sort();
								pfArrcol.sort.fields = [new SortField("Name", true, false)];
								pfArrcol.refresh();
				                 	}
				                 
				                  	for(var n:int = 0; n < pfArrcol.length; n++)
				                  	{
				                   portfolioObj = new Portfolio();
				                   		node = <element label={pfArrcol[n].Name} type="portfolio" portfolioId={pfArrcol[n].Id} portfolioGroupId={pfArrcol[n].PortfolioGroupId} isBranch="true"/>;
				                   parentElement[0].appendChild(node);
				                  }
				                 }                                  
				                }
				                else{
				                 if(parentElement.descendants().length()==0){
				                  node = <element label={wsPortfoliosResult.Name} type="portfolio" portfolioId={wsPortfoliosResult.Id} portfolioGroupId={wsPortfoliosResult.PortfolioGroupId} isBranch="true"/>;
				                  parentElement[0].appendChild(node);
				                 }                 
				                }
				         
				        } 
		        }
		        else //ws null
		        {
		          	this.tbPortfolioGroup.portfolioListData = null;
		    	}
		       }
		       catch(err : Error)
		       {
		        
		       }
		      }
		  	
		  	
		  	
		  	/**
			 * Function to handle Get Portfolio List response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetPortfolioList(event : ResultEvent) : void {
	    		
	    		var wsPortfolioList : Object;		 		
		        try {
		        	wsPortfolioList = event.result as Object;
		        	
		        	if(wsPortfolioList != null) {
		        		
		        		this.currentPortfolioId = wsPortfolioList.Id;
		        		this.currentPortfolioModifiedDate = wsPortfolioList.ModifiedDate;//p139dak: maintain modified date to pass back to the srevice layer
						this.currentPortfolioGroupId = wsPortfolioList.PortfolioGroupId;
		        		this.currentPortfolioName = wsPortfolioList.Name;
		        		tbPortfolioSummary.txtPortfolioName.text = String(wsPortfolioList.Name);
		        		tbPortfolioSummary.txtDescription.text = String(wsPortfolioList.Description);
		        		
		        		if(wsPortfolioList.Status == "Enabled")
		        			tbPortfolioSummary.cmbCampaignStatus.selectedIndex = 0;
		        		else if(wsPortfolioList.Status == "Paused")
		        			tbPortfolioSummary.cmbCampaignStatus.selectedIndex = 1;
		        		else if(wsPortfolioList.Status == "Deleted")
		        			tbPortfolioSummary.cmbCampaignStatus.selectedIndex = 2;
		        				        		
		        		//Populate the Portfolio Groups combo box 		        		
		        		
		        		if(this.tbPortfolioSummary.portfolioGroupsListData != null){
		        		var i : int;		   		
			   			for(i = 0; i < this.tbPortfolioSummary.portfolioGroupsListData.length; i++){
			   		
			   			
		        			if(this.tbPortfolioSummary.portfolioGroupsListData[i].Id == wsPortfolioList.PortfolioGroupId  ){
		        				
		        				
		        				//this.lblBreadCrumb.text = "SEMA > MCOM > "+ this.tbPortfolioSummary.portfolioGroupsListData[i].label + " > " +this.currentPortfolioName;	
		        			}
		        		}		                     				        			        		   	
		        	        }		        			                     				        			        		   	
		        	        }
					else {
						this.currentPortfolioId = -1;
						this.currentPortfolioModifiedDate = null;//p139dak: maintain modified date
		        		Alert.show("Requested Ad Group not available", "wsGetPortfolioList");
		        	}		        	
		        } catch(e:Error) {
		        	Alert.show(e.message + " wsGetPortfolioList");
		        }
	    		
	    	}
		  	
		  	
		  	
		  	/**
			 * Function to handle Put Portfolios response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsPutPortfolios(event : ResultEvent) : void {
	    		
	    		var wsPortfolio : Object;	
	    		var node : XML;
	    				   		
			   	enablePortfolioSummaryComponents(false);			
	    		try{
	    			wsPortfolio = event.result as Object;
	    			if(wsPortfolio != null){
	    				var element: XML = XML(customTreeView.treeList.selectedItem);
	    				
	    				
		  				if(element.@type == "portfolioGroup")
		  				{
		  					node = <element label={wsPortfolio.Name} type="portfolio" portfolioId={wsPortfolio.Id} portfolioGroupId={wsPortfolio.PortfolioGroupId} isBranch="true" />;
	           				element.appendChild(node);	 
	           				this.customTreeView.treeList.expandItem(element,true);	
	           				customTreeView.treeList.selectedItem = node;           				         				
		        			this.disableSummaryControls();		        			 
		        			this.clearSummaryControls();		        			
		        			
		        			if(this.tbPortfolioGroup.portfolioListData != null)
		        			{
		        				this.tbPortfolioGroup.portfolioListData.sort = new Sort();
				            	this.tbPortfolioGroup.portfolioListData.sort.fields = [new SortField("Name", true, false)];
				            	this.tbPortfolioGroup.portfolioListData.refresh();
		        			}		        					        					        			
			  			}
						else
						{
							//selectedNode = element;
			  				element.@label = wsPortfolio.Name;
			  				element.@portfolioId = wsPortfolio.Id;	
			  				element.@portfolioGroupId = wsPortfolio.PortfolioGroupId;		  				
				  		}
			  			
	    				Alert.show("Portfolio : " + wsPortfolio.Name + " successfully saved.");
	    				
	    				//this.tbPortfolioSummary.btnAddPortfolioSummaryAddCampaign.enabled = true;	    				
	    				
	    				if(isAddingPortfolio){
	    					this.customTreeView.treeList.selectedItem = node;
	    					customTreeView.treeList.selectedItem = node;
	    					this.isAddingPortfolio = false; 
	    					this.lblEditMSG.text = "You have added portfolio: " +wsPortfolio.Name;
	    				}
	    				else{	    					
	    					customTreeView.treeList.selectedItem = element;	    					
	    					this.lblEditMSG.text = "You have modified portfolio: " +wsPortfolio.Name;
	    				}	
	    				
	    				this.lblBreadCrumb.text = "SEMA > " + this.currentPortfolioGroupName + " > " + this.currentPortfolioName;	    				
	    				this.currentPortfolioId = wsPortfolio.Id;   
	    				this.currentPortfolioModifiedDate = wsPortfolio.ModifiedDate;//p139dak: maintain modified date to pass back to the service layer   
	    				showHidePortfolioButtons(true,true,false,false);
	    				this.tbPortfolioSummary.btnAddPortfolioSummaryAddCampaign.enabled = true;	 					    			
	    				
	    				this.tbPortfolioAdCampaign.enabled = true;
	    				
	    				this.tbPortfolioSummary.pnlPortfolioSummary.title = "Summary"; 					    			
	    				
	    				/* selectedNode.@type = "portfolio";	
	    				selectedNode.@label = wsPortfolio.Name;
			  			selectedNode.@portfolioId = wsPortfolio.Id;	
			  			selectedNode.@portfolioGroupId = wsPortfolio.PortfolioGroupId;	 */
	    						    			
	    			}
	    			else{
	    				
		        		this.tbPortfolioAdCampaign.enabled = false;
	    				Alert.show("Error while saving Portfolio!");	
	    				showPortfolioGroupTab();    				
	    				this.tbPortfolioSummary.btnAddPortfolioSummaryAddCampaign.enabled = false;   				
	    			}	    			
	    		
	    			showHidePortfolioButtons(true,true,false,false);   			
	    		}catch(err:Error){
	    			
		        		this.tbPortfolioAdCampaign.enabled = false;
	    			showPortfolioGroupTab();
	    			Alert.show(err.message, " wsPutPortfolios");	
	    		} 		    			
	    	}
		  	 
		  	/*
		  	 * Portfolio Group Service Response Handlers
		  	 */	
	    	
			/** 
			 * Function to handle Get All Portfolio Groups response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			private function wsGetAllPortfolioGroups(event : ResultEvent) : void
			{
				try
				{
					var wsPortfolioGroupsResult : Object = event.result as Object;
					var portfolioGroupsList : ArrayCollection = new ArrayCollection();
					var portfolioGroup : PortfolioGroup;
					var statusTypeObj : SemaStatusType;
					
					if(wsPortfolioGroupsResult != null)
					{
					if(wsPortfolioGroupsResult.length > 0)
					{
						for(var i : int = 0; i < wsPortfolioGroupsResult.length; i++)
						{
							portfolioGroup = new PortfolioGroup();
							statusTypeObj = new SemaStatusType();

							portfolioGroup.Id = parseInt(wsPortfolioGroupsResult[i].Id);
							portfolioGroup.Name = wsPortfolioGroupsResult[i].Name;
							portfolioGroup.Description = wsPortfolioGroupsResult[i].Description;

							statusTypeObj._SemaStatusType = wsPortfolioGroupsResult[i].Status;
							portfolioGroup.Status = statusTypeObj;

							portfolioGroupsList.addItem(portfolioGroup);
						}
					}
					else
					{
						portfolioGroup = new PortfolioGroup();
						statusTypeObj = new SemaStatusType();

						portfolioGroup.Id = parseInt(wsPortfolioGroupsResult.Id);
						portfolioGroup.Name = wsPortfolioGroupsResult.Name;
						portfolioGroup.Description = wsPortfolioGroupsResult.Description;

						statusTypeObj._SemaStatusType = wsPortfolioGroupsResult.Status;
						portfolioGroup.Status = statusTypeObj;

						portfolioGroupsList.addItem(portfolioGroup);
					}
					this.tbSEMA.portfolioGroupsListData = portfolioGroupsList;

		    		var parentElement : XMLList = XML(this.customTreeView.treeData).(@type=="root");
					if ((parentElement != null)&&(parentElement.children().length()>0))
					{
						deleteChildren(parentElement.children());
					}
					
					if(portfolioGroupsList != null)
					{
						portfolioGroupsList.sort = new Sort();
		            	portfolioGroupsList.sort.fields = [new SortField("Name", true, false)];
		            	portfolioGroupsList.refresh();
					}
					
					for (var n : int; n<portfolioGroupsList.length; n++)
					{
						parentElement[0]. * += <element label={portfolioGroupsList[n].Name} type="portfolioGroup" portfolioGroupId={portfolioGroupsList[n].Id}  isBranch="true"/>;
					}	    		
					}
						    		
					//To select the SEMA node in startup
					customTreeView.treeList.selectedIndex = 0;	    		
					
					if(this.tbSEMA.portfolioGroupsListData != null)
					{
						this.tbSEMA.portfolioGroupsListData.sort = new Sort();
		            	this.tbSEMA.portfolioGroupsListData.sort.fields = [new SortField("Name", true, false)];
		            	this.tbSEMA.portfolioGroupsListData.refresh();
					}					
				}
				catch(err:Error)
		    	{
					Alert.show(err.message , "wsGetAllPortfolioGroups");
				}
			}
	    	
	    	
	    	private function expandTree():void
	    	{
	    		this.customTreeView.treeList.selectedIndex = 0;
	    		this.customTreeView.treeList.expandItem(this.customTreeView.treeList.selectedItem,true);
	    	}
	    	
	       /**
			 * Function to handle Get Portfolio Group List response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetPortfolioGroupList(event : ResultEvent) : void {
	    		var wsPortfolioGroupResult : Object;		 		
		        try {
		        	wsPortfolioGroupResult = event.result as Object;
		        	
		        	if(wsPortfolioGroupResult != null) {
		        		
		        		this.currentPortfolioGroupId = wsPortfolioGroupResult.Id;
		        		this.currentPortfolioGroupModifiedDate = wsPortfolioGroupResult.ModifiedDate;//p139dak: maintain modified date to pass back to the service layer
		        		
		        		tbPortfolioGroupSummary.txtPortfolioGroupName.text = String(wsPortfolioGroupResult.Name);
		        		tbPortfolioGroupSummary.txtPortfolioGroupDescription.text = String(wsPortfolioGroupResult.Description); 
		        		
		        		if(wsPortfolioGroupResult.Status == "Enabled")
		        			tbPortfolioGroupSummary.cmbPortfolioGroupStatus.selectedIndex = 0;
		        		else if(wsPortfolioGroupResult.Status == "Paused")
		        			tbPortfolioGroupSummary.cmbPortfolioGroupStatus.selectedIndex = 1;
		        		else if(wsPortfolioGroupResult.Status == "Deleted")
		        			tbPortfolioGroupSummary.cmbPortfolioGroupStatus.selectedIndex = 2;		        				        		 		        				        			        		   
		        	}
					else {
						this.currentPortfolioGroupId = 0;
						this.currentPortfolioGroupModifiedDate = null;//p139dak: maintain modified date to pass back to the service layer
		        		Alert.show("Requested Portfolio Group not available");
		        	}		        	
		        } catch(e:Error) {
		        	Alert.show(e.message + " wsGetPortfolioGroupList");
		        }
	    	}
	    	
	    	
	    	
			/**
			 * Function to handle Put Portfolio Groups response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
			private function wsPutPortfolioGroups(event : ResultEvent) : void
			{
				try
				{
					var wsPortfolioGroupResult : Object = event.result as Object;
					var node : XML;
					var element: XML = XML(customTreeView.treeList.selectedItem);
					var portfolioGroup : PortfolioGroup;
					var statusTypeObj : SemaStatusType;

					if (!isAddingPortfolioGroup)
					{
						this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = false;
						this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = false;	
						this.tbPortfolioGroupSummary.cmbPortfolioGroupStatus.enabled = false;	
					
						this.tbPortfolioGroupSummary.btnSavePortfolioGroup.visible = false;			  						  		
						this.tbPortfolioGroupSummary.btnCancelPortfolioGroup.visible = false;				  	
						this.tbPortfolioGroupSummary.btnEditPortfolioGroup.visible = true;
						this.tbPortfolioGroupSummary.btnAddPortfolio.visible = true;
						this.tbSEMA.btnAddPortfolioGroup.enabled = true;
					} else {
						this.tbPortfolioGroupSummary.btnSavePortfolioGroup.enabled = false;	
						this.tbPortfolioGroupSummary.txtPortfolioGroupName.editable = false;
						this.tbPortfolioGroupSummary.txtPortfolioGroupDescription.editable = false;	
					
						this.tbPortfolioGroupSummary.btnCancelPortfolioGroup.enabled = true;				  	
						this.tbPortfolioGroupSummary.btnEditPortfolioGroup.enabled = true;
						this.tbPortfolioGroupSummary.btnAddPortfolio.enabled = true;
						this.tbSEMA.btnAddPortfolioGroup.enabled = true;		      
					}

					if(wsPortfolioGroupResult != null)
					{ 			  				
						if(this.isAddingPortfolioGroup)
						{
		  					node = <element label={wsPortfolioGroupResult.Name} type="portfolioGroup" portfolioGroupId={wsPortfolioGroupResult.Id} isBranch="true"/>;
		            		element.appendChild(node);
		            		customTreeView.treeList.selectedItem = node;
		            		
		  					Alert.show("Portfolio Group : " + wsPortfolioGroupResult.Name + " Added.");
		  					
			  				this.lblEditMSG.text = "You have added Portfolio Group: " +wsPortfolioGroupResult.Name;
		  					
		  					customTreeView.treeList.selectedIndex = 0;
			  				xList = new XMLList(<root label="SEMA" type="root" rootId="1">{XML(customTreeView.treeList.selectedItem).children()}</root>);
			  				customTreeView.treeData = null;
			  				callLater(MyMethod);		  								 		  				                          				                   				                    				            
				 		}
				 		else
				 		{				 			
				 			//Modifying...				 			
				 			element.@label = wsPortfolioGroupResult.Name;				  				
			  				element.@portfolioGroupId = wsPortfolioGroupResult.Id;	 
			  				element.@type = "portfolioGroup";
			  				Alert.show("Portfolio Group : " + wsPortfolioGroupResult.Name + " Modified.");
			  			} 
			  			portfolioGroup = new PortfolioGroup();
			  			statusTypeObj = new SemaStatusType();
	         				
   						portfolioGroup.Id = parseInt(wsPortfolioGroupResult.Id);
   						portfolioGroup.Name = wsPortfolioGroupResult.Name;
   						portfolioGroup.Description = wsPortfolioGroupResult.Description;
           				
           				statusTypeObj._SemaStatusType = wsPortfolioGroupResult.Status;
					    portfolioGroup.Status = statusTypeObj;
					    
          				portfolioGroup.CreatedBy = wsPortfolioGroupResult.CreatedBy;
           				portfolioGroup.ModifiedBy = wsPortfolioGroupResult.ModifiedBy;
           				
           				portfolioGroup.CreatedDate = wsPortfolioGroupResult.CreatedDate;
           				portfolioGroup.ModifiedDate = wsPortfolioGroupResult.ModifiedDate;	
			  			
			  			
			  			if (this.isAddingPortfolioGroup)
			  			{
			  				if(this.tbSEMA.portfolioGroupsListData != null)
			  				{
			  					this.tbSEMA.portfolioGroupsListData.addItem(portfolioGroup);
			  				}
			  				else
			  				{
			  					this.tbSEMA.portfolioGroupsListData = new ArrayCollection;
			  				this.tbSEMA.portfolioGroupsListData.addItem(portfolioGroup);
			  			}
			  				
			  				this.tbSEMA.portfolioGroupsListData.sort = new Sort();
				            this.tbSEMA.portfolioGroupsListData.sort.fields = [new SortField("Name", true, false)];
				            this.tbSEMA.portfolioGroupsListData.refresh();
			  				
			  			}
			  			else
			  			{
               				for(var i : int = 0; i < this.tbSEMA.portfolioGroupsListData.length; i++)
               				{
               					var portfolioGroupTemp : PortfolioGroup = PortfolioGroup(this.tbSEMA.portfolioGroupsListData.getItemAt(i));
               					
               					if(portfolioGroupTemp.Id == portfolioGroup.Id)
               					{
               						this.tbSEMA.portfolioGroupsListData.setItemAt(portfolioGroup, i);
               					}
               				}
               				
			  				
			  				this.lblEditMSG.text = "You have modified Portfolio Group: " +wsPortfolioGroupResult.Name;
			  						  							
			  			}
			  			
			  			this.currentPortfolioGroupId = wsPortfolioGroupResult.Id;		
			  			this.currentPortfolioGroupModifiedDate = wsPortfolioGroupResult.ModifiedDate;//p139dak: maintain modified date to pass back to the service layer		
			  			this.lblBreadCrumb.text = "SEMA > " + wsPortfolioGroupResult.Name;
			  			     				        				        		   	
			  			this.tbPortfolioGroup.enabled = true;	
			  			
			  			customTreeView.treeList.selectedItem.@type = "portfolioGroup";  
			  			customTreeView.treeList.selectedItem.@label = wsPortfolioGroupResult.Name;				  				
			  			customTreeView.treeList.selectedItem.@portfolioGroupId = wsPortfolioGroupResult.Id;	 			  			   				        				        		   
			  			this.tbPortfolioGroupSummary.pnlPortfolioGroupSummary.title = "Summary";
			  			
		        	} 
		        	else{		        				        		
		        		
		        		this.tbPortfolioGroup.enabled = false;		        				        		
		        		Alert.show("Error while Saving the Portfolio Group!");		        				        		
		  				this.tbPortfolioGroup.enabled = false;	        				        		
		        	}
		        	
		  		
		  			showHidePortfolioGroupButtons(true,true,false,false);
		  			this.isAddingPortfolioGroup = false;
		        }catch(e:Error) {		        	
		        	Alert.show(e.message, "wsPutPortfolioGroups");		        	
		        	this.tbPortfolioGroup.enabled = false;			        	
		        }
	    	}
	    	    		    		    	
		  	/*
		  	 * Portfolio Group Service Response Handlers
		  	 */	
		  	
		  	 
		  	private var xList:XMLList = new XMLList();
	    	private function MyMethod():void
	    	{
	    		customTreeView.treeData = xList;
	    		callLater(expandTree1);	
	    	}
	    	
	    	private function expandTree1():void
	    	{
	    		this.customTreeView.treeList.selectedIndex = 0;
	    		this.customTreeView.treeList.expandItem(this.customTreeView.treeList.selectedItem,true);
	    		this.customTreeView.treeList.selectedIndex = XML(this.customTreeView.treeList.selectedItem).children().length();	    		   			 
	    	}
 			
		  	/*
		  	 * Get All Acounts Response Handlers
		  	 */ 
			private function wsGetAllAccounts(event : ResultEvent):void
			{
		  		var i : int;
		  		var wsAccountsListResponse : Object;
		  		this.tbCampaignSummary.AccountListData = new ArrayCollection();
		  		var accountIdInitialized : Boolean = false;
		  		
		  		try
		  		{
		  			wsAccountsListResponse = event.result as Object;
		  			
		  			if(wsAccountsListResponse != null)
		  			{
		  				if (wsAccountsListResponse.length > 0)
		  				{
		  					for(i = 0 ; i< wsAccountsListResponse.length ; i++)
		  					{
		  						if ((wsAccountsListResponse[i].Synchable) && (wsAccountsListResponse[i].Vendorname == "GOOGLE")) 
		  						{
		  							this.tbCampaignSummary.AccountListData.addItem({label : wsAccountsListResponse[i].Name, Id : wsAccountsListResponse[i].Id});
		  							if (campaignAccntId==wsAccountsListResponse[i].Id)
		  							{
		  								this.tbCampaignSummary.lblAccount.text = wsAccountsListResponse[i].Name;
		  							}
		  							if (!accountIdInitialized)
		  							{
		  								accountIdInitialized = true;
		  								this.tbCampaignSummary.accountId = wsAccountsListResponse[i].Id
		  							}
		  						}
		  					}
		  				}
		  				else
		  				{
		  					this.tbCampaignSummary.AccountListData.addItem({label : wsAccountsListResponse.Name, Id : wsAccountsListResponse.Id});
		  					if ((wsAccountsListResponse.Synchable) && (wsAccountsListResponse.Vendorname == "GOOGLE")) 
		  					{
		  						if (campaignAccntId==wsAccountsListResponse.Id)
		  						{
		  							this.tbCampaignSummary.lblAccount.text = wsAccountsListResponse.Name;
		  						}
		  						if (!accountIdInitialized)
	  							{
	  								accountIdInitialized = true;
	  								this.tbCampaignSummary.accountId = wsAccountsListResponse.Id;
	  							}
		  					}
		  				}
		  			}
		  		}
		  		catch(e:Error)
		  		{
	    			Alert.show(e.message,"wsGetAllAccounts");	    	
	    		}
		  	}
		  	
		  	/*
		  	 * Statistics Service Response Handlers
		  	 */
		  	
		  	
		   /**
			 * Function to handle Get Ad Copy Stats response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetAdCopyStats(event : ResultEvent) : void {

	    	var wsAdCopyStatResponse : Object;
	    	var val:int = 0;
	    	var adCopyStatId : int;
	    	var statObj	: Statistics;
	    	var i : int;
	    	try{
	    		wsAdCopyStatResponse = event.result as Object;
	    		
	    		if(wsAdCopyStatResponse != null)
	    		{
	    			if(wsAdCopyStatResponse.length > 0)
	    			{
		    			if((this.adCopyList != null) &&(this.adCopyList.length > 0)){		    				
			    			for(i = 0; i < wsAdCopyStatResponse.length; i++)
			    			{
			    				adCopyStatId = wsAdCopyStatResponse[i].AdCopyStats.Id;		    			
		    				
			    				for(var j : int = 0; j < adCopyList.length; j++)
			    			{
			    					statObj = Statistics(adCopyList.getItemAt(j));	
			    				if(statObj.Id == adCopyStatId)
		    					{
			    						statObj.Clicks = wsAdCopyStatResponse[i].Clicks;
										statObj.Impressions = wsAdCopyStatResponse[i].Impressions;
										statObj.Cost = wsAdCopyStatResponse[i].Cost;	
										statObj.CTR = wsAdCopyStatResponse[i].CTR;
										statObj.CPM = wsAdCopyStatResponse[i].CPM;
										statObj.CPC = wsAdCopyStatResponse[i].CPC;	
										this.adCopyList.setItemAt(statObj, j);
				    					break;								    					
				        			}					    				
			        			}	
						    }
			    			this.tbAdCopies.adsListData = this.adCopyList;   
			        	} 
			   		}
			   		else
			   		{
			   			adCopyStatId = wsAdCopyStatResponse.AdCopyStats.Id;
		    				
		    			if((this.adCopyList != null) &&(this.adCopyList.length > 0)){		    				
			    			for(i = 0; i < adCopyList.length; i++)
			    			{
			    				statObj = Statistics(adCopyList.getItemAt(i));	
			    				if(statObj.Id == adCopyStatId)
		    					{
		    						statObj.Clicks = wsAdCopyStatResponse.Clicks;
									statObj.Impressions = wsAdCopyStatResponse.Impressions;
									statObj.Cost = wsAdCopyStatResponse.Cost;	
									statObj.CTR = wsAdCopyStatResponse.CTR;
									statObj.CPM = wsAdCopyStatResponse.CPM;
									statObj.CPC = wsAdCopyStatResponse.CPC;									    					
			        			}	
			    				this.adCopyList.setItemAt(statObj, i);
			    				val = i;
						    }
			    			this.tbAdCopies.adsListData = this.adCopyList;   
			        	} 
			   		}
		        } 	    		
	    	}
	    	catch(e:Error){
	    		Alert.show(e.message,"wsGetAdCopyStats");
	    	} 
	      }
		  	
		  	
		  	
		   /**
			 * Function to handle Get Ad Keyword Stats response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetAdKeyWordStats(event : ResultEvent) : void {
	    		
	    		var wsAdKeywordStatResponse : Object;
	    		var adKeywordStatId : int;
	    		var statObj	: Statistics;
	    		var i : int;
	    		try{	    		
	    			wsAdKeywordStatResponse = event.result as Object;
	    		
					if(wsAdKeywordStatResponse != null)
		    		{
		    			if(wsAdKeywordStatResponse.length > 0)
		    			{
		    				if((this.adKeywordsList != null) &&(this.adKeywordsList.length > 0)){		    				
				    			for(i = 0; i < wsAdKeywordStatResponse.length; i++)
				    			{
				    				adKeywordStatId = wsAdKeywordStatResponse[i].AdKeyWordStats.Id;		    			
		    			
				    				for(var j : int = 0; j < adKeywordsList.length; j++)
				    			{
				    					statObj = Statistics(adKeywordsList.getItemAt(j));	 
				    				if(statObj.Id == adKeywordStatId)
			    					{
				    						statObj.Clicks = wsAdKeywordStatResponse[i].Clicks;
											statObj.Impressions = wsAdKeywordStatResponse[i].Impressions;
											statObj.Cost = wsAdKeywordStatResponse[i].Cost;	
											statObj.CTR = wsAdKeywordStatResponse[i].CTR;
											statObj.CPM = wsAdKeywordStatResponse[i].CPM;
											statObj.CPC = wsAdKeywordStatResponse[i].CPC;
											this.adKeywordsList.setItemAt(statObj, j);
					    					break;	    					
				    					}					    				
			    					}
			    				}
			    				this.tbKeywords.keywordsListData = this.adKeywordsList;
		    				}
		    			}
		    			else
		    			{
		    				adKeywordStatId = wsAdKeywordStatResponse.AdKeyWordStats.Id;
		    			
			    			if((this.adKeywordsList != null) &&(this.adKeywordsList.length > 0)){		    				
				    			for(i = 0; i < adKeywordsList.length; i++)
				    			{
				    				statObj = Statistics(adKeywordsList.getItemAt(i));	    			
				    				if(statObj.Id == adKeywordStatId)
			    					{
			    						statObj.Clicks = wsAdKeywordStatResponse.Clicks;
										statObj.Impressions = wsAdKeywordStatResponse.Impressions;
										statObj.Cost = wsAdKeywordStatResponse.Cost;	
										statObj.CTR = wsAdKeywordStatResponse.CTR;
										statObj.CPM = wsAdKeywordStatResponse.CPM;
										statObj.CPC = wsAdKeywordStatResponse.CPC;	    					
			    					}
				    				this.adKeywordsList.setItemAt(statObj, i);
			    				}
		    				this.tbKeywords.keywordsListData = this.adKeywordsList;
		    			}	
		    		  }		    			
		    		}	    				    		
		    	}		    	   			
		    	catch(e:Error){
		    		Alert.show(e.message, "wsGetAdKeyWordStats");
		    	}   		
	    	}
		  	
		  	
		  	
		   /**
			 * Function to handle Get Ad Group Stats response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event
			 * @return
			 */	
	    	private function wsGetAdGroupStats(event : ResultEvent) : void {
		    	
		    	var wsAdGroupStatResponse : Object;
	    		var adGroupStatId : int;
	    		var i : int;
		    	try{	
	    		
		    		wsAdGroupStatResponse = event.result as Object;
		    		
		    		if(wsAdGroupStatResponse != null)
		    		{
		    			if(wsAdGroupStatResponse.length > 0)
		    			{
		    				if((this.adGroupsList != null) &&(this.adGroupsList.length > 0)){		    				
				    			for(i = 0; i < wsAdGroupStatResponse.length; i++)
				    			{
				    				adGroupStatId = wsAdGroupStatResponse[i].AdGroupStats.Id;			    			
				    				for(var j : int = 0; j < adGroupsList.length; j++)
				    			{
				    					var statObj	: Statistics = Statistics(adGroupsList.getItemAt(j));	    			
				    				if(statObj.Id == adGroupStatId)
			    					{
				    						statObj.Clicks = wsAdGroupStatResponse[i].Clicks;
											statObj.Impressions = wsAdGroupStatResponse[i].Impressions;
											statObj.Cost = wsAdGroupStatResponse[i].Cost;	
											statObj.CTR = wsAdGroupStatResponse[i].CTR;
											statObj.CPM = wsAdGroupStatResponse[i].CPM;
											statObj.CPC = wsAdGroupStatResponse[i].CPC;	
											this.adGroupsList.setItemAt(statObj, j);
											break;	    					
				    					}
			    					}
			    				}
		    					this.tbCampaignAdGroup.adGroupsListData = this.adGroupsList;
			    			}  
		    			}
		    			else
		    			{
			    			adGroupStatId = wsAdGroupStatResponse.AdGroupStats.Id;
				    			
			    			if((this.adGroupsList != null) &&(this.adGroupsList.length > 0)){		    				
				    			for(i = 0; i < adGroupsList.length; i++)
				    			{
				    				statObj = Statistics(adGroupsList.getItemAt(i));	    			
				    				if(statObj.Id == adGroupStatId)
			    					{
			    						statObj.Clicks = wsAdGroupStatResponse.Clicks;
										statObj.Impressions = wsAdGroupStatResponse.Impressions;
										statObj.Cost = wsAdGroupStatResponse.Cost;	
										statObj.CTR = wsAdGroupStatResponse.CTR;
										statObj.CPM = wsAdGroupStatResponse.CPM;
										statObj.CPC = wsAdGroupStatResponse.CPC;		    					
			    					}
				    				this.adGroupsList.setItemAt(statObj, i);
			    				}
			    				this.tbCampaignAdGroup.adGroupsListData = this.adGroupsList;
				    		}    	
		    			}
		    		} 
		    	}
		    	catch(e:Error){
		    		Alert.show(e.message,"wsGetAdGroupStats");
		    	}
	    	}
	    	
	    	
	    	
	    	/**
	    	 * @private
			 * Function to handle Get Ad Keyword Stats response from Web service 
			 * 
			 * @author Zone24x7
			 * @param  event ResultEvent from the web service
			 */	
	    	private function wsGetCampaignStats(event : ResultEvent) : void 
	    	{
		    		var statObj	: Statistics;
		    		var campaignStatId : int;
		    		var i : int;
		    	try
		    	{	
	    		var campaignStatsObj : Object = event.result as Object;
		    		//If result comes from the request
	    		if(campaignStatsObj != null)
	    		{
		    			if(campaignStatsObj.length > 0)
		    			{
					    			if((this.campaignsList != null) &&(this.campaignsList.length > 0))
					    			{
						    			for(i = 0; i < campaignStatsObj.length; i++)
						    			{
						    				campaignStatId = campaignStatsObj[i].CampaignStats.Id;						    		
						    					
						    				for(var j : int = 0; j < campaignsList.length; j++)
						    			{
						    					statObj = Statistics(campaignsList.getItemAt(j));
						    				if(statObj.Id == campaignStatId)
					    					{
					    						statObj.Clicks = campaignStatsObj[i].Clicks;
												statObj.Impressions = campaignStatsObj[i].Impressions;
												statObj.Cost = campaignStatsObj[i].Cost;
												statObj.CTR = campaignStatsObj[i].CTR;
												statObj.CPM = campaignStatsObj[i].CPM;
												statObj.CPC = campaignStatsObj[i].CPC;		    					
													this.campaignsList.setItemAt(statObj, j);
													break;		    					
						    					}							    				
							    				
					    					}
						    				
					    				}
					    				this.tbPortfolioAdCampaign.campaignsListData = this.campaignsList;
					    			}
				    			
					    			if(customTreeView.treeList.selectedItem != null && customTreeView.treeList.selectedItem.@type != null)
					    			{					   	 				   					   		
						    			if((this.tabCampaign.selectedIndex == 0) && (customTreeView.treeList.selectedItem.@type == "campaign"))
						    			{
						    				this.tbCampaignSummary.lblClicksCMP.enabled = true;
											this.tbCampaignSummary.lblImpressionsCMP.enabled = true;
											this.tbCampaignSummary.lblCostCMP.enabled = true;
						    				this.tbCampaignSummary.lblClickThruRateCMP.enabled = true;
											this.tbCampaignSummary.lblAverageCPCCMP.enabled = true;
											this.tbCampaignSummary.lblTextCPM.enabled = true;
											
						    				this.tbCampaignSummary.lblClicksCMP.text = campaignStatsObj[i].Clicks;
											this.tbCampaignSummary.lblImpressionsCMP.text = campaignStatsObj[i].Impressions;
											this.tbCampaignSummary.lblCostCMP.text = campaignStatsObj[i].Cost;	
											this.tbCampaignSummary.lblClickThruRateCMP.text = campaignStatsObj[i].CTR;
											this.tbCampaignSummary.lblAverageCPCCMP.text = campaignStatsObj[i].CPC;
											this.tbCampaignSummary.lblTextCPM.text = campaignStatsObj[i].CPM;	
						    			}
						    		}			    			
				    		}
					    else
					    {
				    			
				    				campaignStatId = campaignStatsObj.CampaignStats.Id;
						    		
					    			if((this.campaignsList != null) &&(this.campaignsList.length > 0))
					    			{
						    			for(i = 0; i < campaignsList.length; i++)
						    			{
						    				statObj = Statistics(campaignsList.getItemAt(i));	    			
						    				if(statObj.Id == campaignStatId)
					    					{
					    						statObj.Clicks = campaignStatsObj.Clicks;
												statObj.Impressions = campaignStatsObj.Impressions;
												statObj.Cost = campaignStatsObj.Cost;
												statObj.CTR = campaignStatsObj.CTR;
												statObj.CPM = campaignStatsObj.CPM;
												statObj.CPC = campaignStatsObj.CPC;		    					
					    					}
						    				this.campaignsList.setItemAt(statObj, i);
					    				}
					    				this.tbPortfolioAdCampaign.campaignsListData = this.campaignsList;
					    			}
				    			
					    			if(customTreeView.treeList.selectedItem != null && customTreeView.treeList.selectedItem.@type != null)
					    			{					   	 				   					   		
						    			if((this.tabCampaign.selectedIndex == 0) && (customTreeView.treeList.selectedItem.@type == "campaign"))
						    			{
						    				this.tbCampaignSummary.lblClicksCMP.enabled = true;
											this.tbCampaignSummary.lblImpressionsCMP.enabled = true;
											this.tbCampaignSummary.lblCostCMP.enabled = true;
						    				this.tbCampaignSummary.lblClickThruRateCMP.enabled = true;
											this.tbCampaignSummary.lblAverageCPCCMP.enabled = true;
											this.tbCampaignSummary.lblTextCPM.enabled = true;
											
						    				this.tbCampaignSummary.lblClicksCMP.text = campaignStatsObj.Clicks;
											this.tbCampaignSummary.lblImpressionsCMP.text = campaignStatsObj.Impressions;
											this.tbCampaignSummary.lblCostCMP.text = campaignStatsObj.Cost;	
											this.tbCampaignSummary.lblClickThruRateCMP.text = campaignStatsObj.CTR;
											this.tbCampaignSummary.lblAverageCPCCMP.text = campaignStatsObj.CPC;
											this.tbCampaignSummary.lblTextCPM.text = campaignStatsObj.CPM;	
						    			}
						    		}
				    		}
			    			    			
				    }
				    //If no result comes from the request make the labels show empty values
				    else
				    {
			    			this.tbCampaignSummary.lblClicksCMP.text = "N/A";
							this.tbCampaignSummary.lblImpressionsCMP.text = "N/A";
							this.tbCampaignSummary.lblCostCMP.text = "N/A";
							this.tbCampaignSummary.lblClickThruRateCMP.text = "N/A";
							this.tbCampaignSummary.lblAverageCPCCMP.text = "N/A";
							this.tbCampaignSummary.lblTextCPM.text = "N/A";
			    		}
                       }
                catch(e:Error)
                {
		    		  	Alert.show(e.message, "wsGetCampaignStats");	 
	    		      } 
	    	}
	    	
	    	/**
	    	 * @public
	    	 * To refresh the grid when Ad Copy, Ad Keyword or Ad Group is replicated
	    	 * 
	    	 * @author Zone24x7
	    	 * @param  event ReplicateEvent from the HTTP service
	    	 */
	    	public function handleReplicateResults(event:ReplicateEvent):void
	    	{
				var obj : Object =  event.value.result;
				if (event.key == ReplicateEvent.AD_GROUPS_CHANGED)
				{
					//this method, wsReplicateAdGroupList and the cairngorm result handler should be 
		    		//merged in the delegate
		    		obj.Clicks = 0;
			   		obj.Cost = 0;
			   		obj.Impressions = 0;
			   		obj.CTR = 0;
					obj.CPM = 0;
					obj.CPC = 0;
		    		adGroupsList.addItem(obj);
					tbCampaignAdGroup.adGroupsListData = this.adGroupsList;
					tbCampaignAdGroup.adGroupsListData.refresh();
					wsAdGroup.getAllAdGroups.send(obj.CampaignId);
	    		} 
	    		else if (event.key == ReplicateEvent.AD_COPY_CHANGED)
	    		{
	    			wsAdService.getAllAdCopy.send(obj.GroupId);
	    		}
	    		else if (event.key == ReplicateEvent.AD_KEYWORD_CHANGED)
	    		{
	    			wsAdKeywordService.getAllAdKeywords.send(obj.AdGroupId);
	    		}
	    	}
		  	
			/**
			 * @private
			 * Function to handle Replicate Ad Group List response from Web service
			 * 
			 * @author Zone24x7
			 * @param  event ResultEvent from the HTTP service
			 */ 
			private function wsReplicateAdGroupList(event : ResultEvent) : void 
			{
				try
				{
					var adGroupObj : Object =  event.result as Object;
					
					adGroupObj.Clicks = 0;
			   		adGroupObj.Cost = 0;
			   		adGroupObj.Impressions = 0;
			   		adGroupObj.CTR = 0;
					adGroupObj.CPM = 0;
					adGroupObj.CPC = 0;
					
					//Creates and add the node to the tree, when replication happens
					if(XMLList(this.customTreeView.p).children().length() > 0) 
					{
						var insert:XML = <node />;
						insert.@label = adGroupObj.AdGroupName;
						insert.@type  = "adGroup";
						insert.@groupID = adGroupObj.Id;
						insert.@campaignID = adGroupObj.CampaignId;
						insert.@replicate="true";
						this.customTreeView.treeList.dataDescriptor.addChildAt(this.customTreeView.p, insert, this.customTreeView.calDropIndex);
					}
					
					//To change the selection to the parent of the copied node
					this.customTreeView.treeList.selectedItem = this.customTreeView.p;
      				        onTreeClick(null);
					
					//To refresh the grid, if copied to the same campaign
					if(customTreeView.treeList.selectedItem == this.customTreeView.p)
					{
						this.adGroupsList.addItem(adGroupObj);
						this.tbCampaignAdGroup.adGroupsListData = this.adGroupsList;
						this.tbCampaignAdGroup.adGroupsListData.refresh();
					}
					
					Alert.show("AdGroup '"+adGroupObj.AdGroupName+"' successfuly copied from Campaign '"+customTreeView.treeList.selectedItem.@label+"' to Campaign '"+this.customTreeView.p.@label+"'","Ad Group Copied");
				}
				catch(e : Error)
				{
					Alert.show(e.message, "wsReplicateAdGroupList");  
				}
			}

			/** 
			 * @private
			 * Function to handle Replicate Ad Copy List response from Web service
			 * 
			 * @author Zone24x7
			 * @param  event ResultEvent from the HTTP service
			 */ 
			private function wsReplicateAdCopyList(event : ResultEvent) : void 
			{
				try
				{
					var adCopyObj : Object =  event.result as Object;
					Alert.show("AdCopy '"+adCopyObj.Headline+"' is successfuly copied from AdGroup '"+customTreeView.treeList.selectedItem.@label+"' to AdGroup '"+this.customTreeView.dropNode.@label+"'","Ad Copy Copied");
				}
				catch(e : Error)
				{
					Alert.show(e.message, "wsReplicateAdCopyList");  
				}
			}
			
			/**
			 * @private
			 * Function to handle Replicate Ad Keyword List response from Web service
			 *
			 * @author Zone24x7
			 * @param  event ResultEvent from the HTTP service
			 */ 
			private function wsReplicateAdKeyWordList(event : ResultEvent) : void 
			{
				try
				{
					var adKeyWordObj : Object =  event.result as Object;
					Alert.show("AdkeyWord '"+adKeyWordObj.KeywordText+"' is successfuly copied from AdGroup '"+customTreeView.treeList.selectedItem.@label+"' to AdGroup '"+this.customTreeView.dropNode.@label+"'","Ad Keyword Copied");
				}
				catch(e : Error)
				{
					Alert.show(e.message, "wsReplicateAdKeyWordList");  
				}
			}
		  	
		    /**
		  	* WebService fault handlers
		  	*/
		  	
		   /**
		     * @private
			 * Function to handle faultWebService response
			 * 
			 * @author Zone24x7
			 * @param  faultEvt FaultEvent from the HTTP service
			 */	 
		  	private function faultWebService(faultEvt : FaultEvent) : void 
		  	{
		    	Alert.show("Web Service is currently unavailable!", "Web Service Error");
	    	}
			
			/** 
			 * @private
			 * Common method to handle a soap fault. If you need special handling in some case,
			 * you could write one and override the webservice declaration where the fault handler is specified.
			 * 
			 * @author
			 * @param  faultEvt FaultEvent from HTTP service
			 */
			public function handleSoapFault(faultEvt : FaultEvent) : void
			{
				var strLockedEntityName:String=getOptimisticLockEntityName(faultEvt);
				if(strLockedEntityName!=null){
					Alert.show(formatFaultMessage(faultEvt), "Warning", Alert.CANCEL, null, getAlertCloseHandler(strLockedEntityName));
				}else{
				    Alert.show(formatFaultMessage(faultEvt), "Error");
				}//if
			}//handleSoapFault

            
            /**
             * @private
             * Returns a cancel function for the appropriate entity based on the entity name. 
             * 
             * @param strLockedEntityName Name of the entity xperiencing optimistic lock. From FaultEvent. 
             */
            private function getAlertCloseHandler(strLockedEntityName : String) : Function{
            	
            	switch(strLockedEntityName){
            		case "AdKeyWord":
            		  return onKeywordCancelButtonClick;
            		case "AdCopy":
            		  return onAdCopyCancelButtonClick;
            		case "AdGroup":
            		  return onClickCancelAdGroup;
            		case "Campaign":
            		  return onCancelCampaignBtnClick;
            		case "Portfolio":
            		  return onPortfolioCancelButtonClick;
            		case "PortfolioGroup":
            		  return onClickCancelPortfolioGroup;            		  
            	}//switch
            	
            	return null;
            	
            }//getAlertCloseHandler

            /**
             * @private
             * If given FaultEvent contains at least one ExceptionInfoDetail with Code=="ConcurrentModification",
             * return the entity name from the ExceptionInfoDetail. Otherwise return null.
             * 
             * Sample ExceptionInfoDetail with Code=="ConcurrentModification":
             * 
             * <sema:ExceptionInfo xmlns:sema="http://schemas.macys.com/definitions/ad/v1">
                <ExceptionInfoDetail>
                    <Code>ConcurrentModification</Code>
                    <EntityName>PortfolioGroup</EntityName>
                    <Message>PortfolioGroup has been modified by another user or process "Macys" on 2008-04-24 14:59:22.552.</Message>
                    <Trigger>2008-04-24 14:58:49.616 PDT</Trigger>
                </ExceptionInfoDetail>
               </sema:ExceptionInfo> 
             * 
             * @param  faultEvt FaultEvent from the HTTP service 
             */			
			private function getOptimisticLockEntityName(faultEvt : FaultEvent) : String{
                var soapFault:SOAPFault = faultEvt.fault as SOAPFault;//if faultEvt is not an instance of SOAPFault, this cast will return null
                var strEntityName:String = null;
                if((soapFault!=null)&&(soapFault.element!=null)&&(soapFault.element..ExceptionInfoDetail!=null)){
	                for each (var exceptionInfo : XML in soapFault.element..ExceptionInfoDetail)
	                {
	                    if(exceptionInfo.Code == "ConcurrentModification"){
	                    	strEntityName=exceptionInfo.EntityName;
	                    	break;
	                    }//if
	                }//for
	            }//if
                return strEntityName;				
			}//getOptimisticLockEntityName
			
			/**
			 * @private
			 * Formats a message from a list of exceptionInfoDetail from the soap fault.
			 * For now, only a message is extracted. At some point, we'd like to identify
			 * and highlight error form fields.
			 * 
			 * Sample error xml looks like this:
			 * <exceptionInfo>
                  <ExceptionInfoDetail>
                     <Code>EntityValidation</Code>
                     <Message>AdKeyword MaxCPC cannot be lesser than AdKeyword MinCPC</Message>
                     <EntityName>AdKeyWordBean</EntityName>
                     <Trigger>maxCPC :</Trigger>
                  </ExceptionInfoDetail>
                  <ExceptionInfoDetail>
                     <Code>EntityValidation</Code>
                     <Message>AdKeyword's MaxCPC cannot be greater than AdGroup's default MaxCPC</Message>
                     <EntityName>AdKeyWordBean</EntityName>
                     <Trigger>maxCPC :</Trigger>
                  </ExceptionInfoDetail>
               </exceptionInfo>
             * 
             * @author
             * @param  faultEvt FaultEvent from the HTTP service 
			 */
			private function formatFaultMessage(faultEvt : FaultEvent) : String
			{
				var soapFault:SOAPFault = faultEvt.fault as SOAPFault;//if faultEvt is not an instance of SOAPFault, this cast will return null
				var strError:String = "";
				if(soapFault!=null){
					var msgArray:Array = new Array();
					if((soapFault.element!=null)&&(soapFault.element..ExceptionInfoDetail!=null)){
						for each (var exceptionInfo : XML in soapFault.element..ExceptionInfoDetail)
						{
							msgArray.push(exceptionInfo.Message);  
						}
				    }//if
					//If there is more than one message, add an index and line separator.
					if(msgArray.length > 1)
					{
						for (var i:int = 0; i < msgArray.length; i++)
						{
							if(i > 0)
							{
							  strError += "\n";	
							}	
							strError += ((i+1) + ". " + msgArray[i]);
						}
		    	    }
		    	    else if(msgArray.length == 1)
		    	    {
		    	        strError = msgArray[0];	
		    	    }
		    	    
		    	    if(strError==""){
					    strError = soapFault.faultString;
				    }//if
				}//if
				
				if(strError==""){
					strError="Insufficient error information.";
				}//if
			    return strError;
			}

		   /**
			 * @private
			 * This function will read the config.xml file and read all the web services end points. This needs to be
			 * called when the application is initialized.
			 * 
			 * @author Zone24x7
			 * @param  event ResultEvent from the HTTP service
			 */
			private function getUrls(event : ResultEvent) : void
			{
				try
				{
					var temp : XML = XML(event.result);
					for each(var url : XML in temp.WebServiceURL)
					{
						if (url.@wsName.toString()=="AdCopyService")
						{
							wsAdCopyServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="AdKeywordService")
						{
							wsKeyWordServiceURL = url.toString();
						}
						else if(url.@wsName.toString()=="AdGroupService")
						{
							wsAdGroupUrl = url.toString();
						}
						else if (url.@wsName.toString()=="CampaignService")
						{
							wsCampaignServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="PortfolioService")
						{
							wsPortfolioServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="PortfolioGroupService")
						{
							wsPortfolioGroupServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="AdCopyStatsService")
						{
							wsAdCopyStatServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="AdKeywordStatsService")
						{
							wsAdKeyWordStatServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="AdGroupStatsService")
						{
							wsAdGroupStatServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="CampaignStatsService")
						{
							wsCampaignStatServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="AccountService")
						{
							wsAccountServiceURL = url.toString();
						}
						else if (url.@wsName.toString()=="ReplicateEntityService")
						{
							wsReplicateEntityServiceURL = url.toString();
						}
                        else if (url.@wsName.toString()=="CampaignExistsService")
						{
							wsCampaignExistsServiceURL = url.toString();
						}

					}
				}
				catch(e:Error)
				{
					Alert.show("Error while reading the configuration file.", "Critical Error");
					trace("Error while reading the configuration file.");
				}                             
			}
            
            /**
             * @private
             * To handle the response of the campaignExistsResponse.
             * This will return "true" if the campign name already exists in one of the campaigns.
             * 
             * @author
             * @param  event ResultEvent from the HTTP service
             */
            private function handleCampaignExistsResponse(event:ResultEvent):void
			{
				//get the raw JSON data and cast to String
                var rawData:String = String(event.result);

				//De-serialize the object
                var exists : Object = JSON.decode(rawData);
				// disable if campaign with name already exists and if the 
				// response is for the still existing value
				if(exists.result.toString()=="true"
					&& tbCampaignSummary.txtCampaignName.text.toString()==exists.checkWasFor.toString()) 
				{
					this.tbCampaignSummary.btnSaveCampaign.enabled = false;
					//Alert.show("Another Campaign within this Account has the same name. Please ensure that the new Campaign name is unique.");
				    this.tbCampaignSummary.lblCampaignExist.visible = true;
				}
				else
				{
					this.tbCampaignSummary.lblCampaignExist.visible = false;
				}
			}
			
			/**
			 * @private
			 * To handle the fault event of the campaignExistsService only.
			 * But this can be used for any other service.
			 * 
			 * @author Zone24x7
			 * @param  event FaultEvent from the HTTP service
			 */
			private function handleFault(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString, "Error");
			}

		]]>
	</mx:Script>
	
	
	<!-- Retrieve WEb service URL's from the config.xml -->
	<mx:HTTPService id="urlRetrieveService" url="xml/config.xml" result="getUrls(event);" resultFormat="xml">     
	</mx:HTTPService>
	
	<!-- Ad Group Web service -->
	<mx:WebService id="wsAdGroup" wsdl="{this.wsAdGroupUrl}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			      		
		<mx:operation name="getAdGroupList" fault="handleSoapFault(event);" result="wsGetAdGroupList(event);"></mx:operation>
		<mx:operation name="putAdGroup" fault="handleSoapFault(event);" result="wsPutAdGroup(event);"></mx:operation>
		<mx:operation name="getAllAdGroups" fault="handleSoapFault(event);" result="wsGetAllAdGroups(event);"></mx:operation>			
	</mx:WebService>
	
	
	<!-- Ad Copy Web service -->
	<mx:WebService id="wsAdService" wsdl="{this.wsAdCopyServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAllAdCopy" fault="handleSoapFault(event);" result="wsGetAllAdCopy(event);"></mx:operation>
		<mx:operation name="putAdCopyList" fault="handleSoapFault(event);" result="wsPutAdCopyList(event);"> </mx:operation>						
	</mx:WebService>
	
	
	<!-- Ad Keywords Web service -->
	<mx:WebService id="wsAdKeywordService" wsdl="{this.wsKeyWordServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAllAdKeywords" fault="handleSoapFault(event);" result="wsGetAllAdKeywords(event);"></mx:operation>
		<mx:operation name="putAdKeywords" fault="handleSoapFault(event);" result="wsPutAdKeywords(event);"> </mx:operation>						
	</mx:WebService>


    <!-- Campaigns Web service -->
	<mx:WebService id="wsCampaignService" wsdl="{this.wsCampaignServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAllCampaigns" fault="handleSoapFault(event);" result="wsGetCampaigns(event);"></mx:operation>
		<mx:operation name="putCampaigns" fault="handleSoapFault(event);" result="wsPutCampaigns(event);"> </mx:operation>
		<mx:operation name="getCampaignList" fault="handleSoapFault(event);" result="wsGetCampaignList(event);"> </mx:operation>						
	</mx:WebService>

	
	<!-- Portfolio Web service -->
	<mx:WebService id="wsPortfolioService" wsdl="{this.wsPortfolioServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
     	<mx:operation name="getAllPortfolios" fault="handleSoapFault(event);" result="wsGetAllPortfolios(event);"></mx:operation>
		<mx:operation name="getPortfolioList" fault="handleSoapFault(event);" result="wsGetPortfolioList(event);"></mx:operation>
		<mx:operation name="putPortfolios" fault="handleSoapFault(event);" result="wsPutPortfolios(event);"> </mx:operation>						
	</mx:WebService>


    <!-- Portfolio Group Web service -->
	<mx:WebService id="wsPortfolioGroupService" wsdl="{this.wsPortfolioGroupServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAllPortfolioGroups" fault="handleSoapFault(event);" result="wsGetAllPortfolioGroups(event);"></mx:operation>
		<mx:operation name="getPortfolioGroupList" fault="handleSoapFault(event);" result="wsGetPortfolioGroupList(event);"> </mx:operation>
		<mx:operation name="putPortfolioGroups" fault="handleSoapFault(event);" result="wsPutPortfolioGroups(event);"> </mx:operation>						
	</mx:WebService>
	
	 <!-- AccountService Web Service -->
	<mx:WebService id="wsAccountService" wsdl="{this.wsAccountServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAllAccounts" fault="handleSoapFault(event);" result="wsGetAllAccounts(event);"/>					
	</mx:WebService>
	
	<!-- ReplicateEntityService Web Service -->
	<mx:WebService id="wsReplicateEntityService" wsdl="{this.wsReplicateEntityServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="ReplicateAdCopyList" fault="handleSoapFault(event);" result="wsReplicateAdCopyList(event);"/>
		<mx:operation name="ReplicateAdGroupList" fault="handleSoapFault(event);" result="wsReplicateAdGroupList(event);"/>
		<mx:operation name="ReplicateAdKeyWordList" fault="handleSoapFault(event);" result="wsReplicateAdKeyWordList(event);"/>
	</mx:WebService>
	
	<!-- Statistics Services -->
	
    <!-- Lightweight Services -->
	<mx:HTTPService id="campaignExistsService"
		url="{this.wsCampaignExistsServiceURL}"
		result="handleCampaignExistsResponse(event)" 
		fault="handleFault(event)" 
		resultFormat="text">
		<mx:request>
			<campaignName>{tbCampaignSummary.txtCampaignName.text}</campaignName>
			<campaignId>{currentCampaignId}</campaignId>
			<portfolioId>{currentPortfolioId}</portfolioId>
			<accountId>{tbCampaignSummary.accountId}</accountId>
		</mx:request>
	</mx:HTTPService>

	<!-- Ad Copy Stat Web service -->	
	<mx:WebService id="wsAdCopyStatService" wsdl="{this.wsAdCopyStatServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAdCopyStats" fault="handleSoapFault(event);" result="wsGetAdCopyStats(event);"></mx:operation>
	</mx:WebService>
	
	
	<!-- Ad Keyword Stat Web service -->	
	<mx:WebService id="wsAdKeywordStatService" wsdl="{this.wsAdKeyWordStatServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAdKeyWordStats" fault="handleSoapFault(event);" result="wsGetAdKeyWordStats(event);"></mx:operation>
	</mx:WebService>
	
	
	<!-- Ad Group Stat Web service -->	
	<mx:WebService id="wsAdGroupStatService" wsdl="{this.wsAdGroupStatServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getAdGroupStats" fault="handleSoapFault(event);" result="wsGetAdGroupStats(event);"></mx:operation>
	</mx:WebService>
	
	
	<!-- Campaign Stat Web service -->	
	<mx:WebService id="wsCampaignStatService" wsdl="{this.wsCampaignStatServiceURL}"
     			   showBusyCursor="true" requestTimeout="120" fault="faultWebService(event)">       			     		
		<mx:operation name="getCampaignStats" fault="handleSoapFault(event);" result="wsGetCampaignStats(event);"></mx:operation>
	</mx:WebService>
		
	<!-- Statistics Services -->
	
	
	
	<!-- Main UI Components-->
	
	<login:Login id="loginScreen" visible="{model.loginRequired}"/>
	<mx:VBox verticalAlign="top" width="100%" height="100%" 
		horizontalScrollPolicy="off" verticalScrollPolicy="off" 
		paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"
		backgroundColor="#FFFFFF" backgroundAlpha="100" visible="{!model.loginRequired}" id="mainAppVBox">
	
		<mx:VBox verticalAlign="top" width="100%" height="90" 
		horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingBottom="8" verticalGap="0">
			
			<mx:HBox verticalScrollPolicy="off" horizontalScrollPolicy="off" 
				width="100%" paddingTop="5" paddingBottom="20" horizontalGap="0">
				<mx:Spacer width="5" />
				<mx:Image source="@Embed('style/assets/sema_140x30.png')" verticalAlign="top" />
				<mx:Label width="100%" textAlign="right" fontSize="10" 
					color="#000000" id="lblEditMSG" fontWeight="normal" paddingTop="10" 
					paddingLeft="10" paddingRight="10"/>
			</mx:HBox>
			
			<mx:HBox backgroundColor="#999999" height="25" width="100%">
			
				<mx:Label width="100%" id="lblBreadCrumb" 
					fontWeight="normal" fontSize="12" color="#FFFFFF" 
					paddingTop="3" paddingLeft="10" paddingRight="10" />
						
			</mx:HBox>
			
		</mx:VBox>
		
		<mx:HBox horizontalGap="10" verticalAlign="top" 
			width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			
			<mx:HBox verticalAlign="top" width="250" height="100%" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off" enabled="true">
				
				<ns1:TreeView height="100%" id="customTreeView" width="250" clickEvent="onKeywordToolButtonClick" />		
				<mx:Tree horizontalScrollPolicy="on" visible="false"></mx:Tree>
				
				<mx:TextInput visible="false"/>
				<mx:CheckBox visible="false"/>
				<mx:ComboBox visible="false"></mx:ComboBox>
				
			</mx:HBox>	
			
			<mx:Canvas width="100%" height="100%" id="adManager"
				horizontalScrollPolicy="off" verticalScrollPolicy="off">	
			
				<mx:TabNavigator id="tabMain" width="100%" height="100%" horizontalGap="5" paddingLeft="5" paddingRight="5" 
					tabHeight="25" change="onTabIndexChange(event);" visible="false" creationComplete="initTabView();">
					
					<ns1:AdGroups id="tbAdGroup" width="100%" height="100%" />
					<ns1:Keywords id="tbKeywords" width="100%" height="100%" creationComplete="initKeywordsTab();" />
					<ns1:Ads id="tbAdCopies" width="100%" height="100%" creationComplete="initTextAdsTab();" />
					
				</mx:TabNavigator>
	
				<mx:TabNavigator id="tabCampaign" width="100%" height="100%" horizontalGap="5" 
					tabHeight="25" change="onTabIndexChange(event);" paddingLeft="5" paddingRight="5"
				    creationComplete="initCampaignTabView();" visible="false">
				    
				    <ns1:CampaignSummary id="tbCampaignSummary" width="100%" height="100%"/>
				    <ns1:CampaignAdGroup id="tbCampaignAdGroup" width="100%" height="100%" creationComplete="initCampaignAdgroups();"/>
					
				</mx:TabNavigator>
				
				<mx:TabNavigator id="tabPortfolio" width="100%" height="100%" horizontalGap="5" 
					tabHeight="25" change="onTabIndexChange(event);" paddingLeft="5" paddingRight="5"
				    creationComplete="initCampaignTabView();" visible="false">
				    
				    <ns1:PortfolioSummary id="tbPortfolioSummary" width="100%" height="100%" creationComplete="initPortfolioTab();"/>
					<ns1:PortfolioAdCampaign id="tbPortfolioAdCampaign" width="100%" height="100%" creationComplete="initPortfolioCampaigns();"/>
					
				</mx:TabNavigator>
				
				<mx:TabNavigator id="tabPortfolioGroup" width="100%" height="100%" horizontalGap="5" 
					tabHeight="25" visible="false" change="onTabIndexChange(event);" paddingLeft="5" paddingRight="5">
				    
				   <ns1:PortfolioGroupSummary id="tbPortfolioGroupSummary" width="100%" height="100%" creationComplete="initPortfolioGroupTab();"/>
				   <ns1:PortfolioGroups id="tbPortfolioGroup" width="100%" height="100%"/>
				
				</mx:TabNavigator>
				
				<mx:TabNavigator id="tabSEMA" width="100%" height="100%" horizontalGap="5" tabHeight="25" paddingLeft="5" paddingRight="5">
					
					<ns1:SEMA id="tbSEMA" width="100%" height="100%" creationComplete="initSEMATab();"/>
					
				</mx:TabNavigator>
				
				<ns1:KeywordsTool id="keywordTool" width="100%" height="100%" 
					creationComplete="initKeywordTool()" visible="false"/>
				
			</mx:Canvas>
		
		</mx:HBox>
	</mx:VBox>

</mx:Application>